<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.9.0-beta2" last-position="133,4140" last-zoom="1"
	 default-schema="public" default-owner="postgres">
<role name="data_forest"
      superuser="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="formisadmin"
      superuser="true"
      createdb="true"
      createrole="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="formisuser"
      superuser="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="test"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<database name="data_forest" encoding="UTF8" lc-collate="Vietnamese_Vietnam.1258" lc-ctype="Vietnamese_Vietnam.1258">
	<role name="formisadmin"/>
	<tablespace name="pg_default"/>
</database>

<schema name="public" rect-visible="true" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<extension name="postgis" cur-version="2.2.3">
	<schema name="public"/>
	<comment><![CDATA[PostGIS geometry, geography, and raster spatial types and functions]]></comment>
</extension>

<extension name="uuid-ossp" cur-version="1.0">
	<schema name="public"/>
	<comment><![CDATA[generate universally unique identifiers (UUIDs)]]></comment>
</extension>

<usertype name="_formis_actor_type_form" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="forest_type">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="code">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="hgd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="cd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ubndx">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="bqlrph">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ltqd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ctln">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dntn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dnnn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="bqlrdd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dvvt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="khac">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="unit">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="ctnn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dn_nhanuoc">
		<type name="numeric" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_area_form" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="forest_type">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="code">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt_ln">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt_dd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dd_vqg">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dd_kbttn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dd_knc">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dd_bvcq">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt_ph">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ph_dn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ph_cg_cc">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ph_cs">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ph_bvmt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="sx">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="nqh">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="unit">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt_3lr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt_3lr_nqh">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt_dau_nam">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="rung_gl">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="rung_gn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="rung_tn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="rung_sxk">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_bqldd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_bqlph">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_dnnn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_dnld">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_hgd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_cd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_dvvt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_ubnd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_3lr_tck">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="thay_doi">
		<type name="numeric" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_config_report" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="code">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="name">
		<type name="character varying" length="200"/>
	</typeattrib>
	<typeattrib name="type">
		<type name="character varying" length="20"/>
	</typeattrib>
	<typeattrib name="forest_type_code_from">
		<type name="integer" length="0"/>
	</typeattrib>
	<typeattrib name="forest_type_code_to">
		<type name="integer" length="0"/>
	</typeattrib>
	<typeattrib name="p_forest_org_code">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="site_cond_code_from">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="site_cond_code_to">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="volume_per_ha_from">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="volume_per_ha_to">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="forest_type_special">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="unit">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="land_use_cert_code">
		<type name="character" length="20"/>
	</typeattrib>
	<typeattrib name="conflict_sit_code">
		<type name="numeric" length="1" precision="0"/>
	</typeattrib>
	<typeattrib name="tree_specie_abbr">
		<type name="character" length="50"/>
	</typeattrib>
	<typeattrib name="forest_use_sit_code">
		<type name="numeric" length="2" precision="0"/>
	</typeattrib>
	<typeattrib name="forest_use_sit_code_from">
		<type name="numeric" length="2" precision="0"/>
	</typeattrib>
	<typeattrib name="forest_use_sit_code_to">
		<type name="numeric" length="2" precision="0"/>
	</typeattrib>
	<typeattrib name="forest_func_sub_code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="actor_type_code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="tree_specie_code">
		<type name="character varying" length="100"/>
	</typeattrib>
	<typeattrib name="nar_for_org_code">
		<type name="numeric" length="2" precision="0"/>
	</typeattrib>
	<typeattrib name="special_product">
		<type name="numeric" length="2" precision="0"/>
	</typeattrib>
	<typeattrib name="plant_state_code">
		<type name="numeric" length="2" precision="0"/>
	</typeattrib>
	<typeattrib name="forest_org_code">
		<type name="character varying" length="100"/>
	</typeattrib>
	<typeattrib name="no_tree_specie_code">
		<type name="character varying" length="50"/>
	</typeattrib>
</usertype>

<usertype name="_formis_cover_area_form" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="area_name">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt_cr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="dt_n3lr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dt_tn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ng_rtn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ng_rt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="mdsd_dd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="mdsd_ph">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="mdsd_sx">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="n3lr_tn">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="n3lr_sx">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="new_plantation">
		<type name="double precision" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_forest_1vol" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="forest_type">
		<type name="character varying" length="300"/>
	</typeattrib>
	<typeattrib name="code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tru_luong_dau_ky">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="thay_doi_go">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="thay_doi_tre_nua">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_tru_luong">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_tru_luong_3lr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_tre_nua">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_tre_nua_3lr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="rung_dd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="rung_ph">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="rung_sx">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="nqh">
		<type name="numeric" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_forest_3" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="name">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="change_in_forest_function">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="change_in_forest_owner">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="change_in_area">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="new_plantation">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="harvesting">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="fire">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="disease">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="illegal_cutting">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="hydropower">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="industry">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="agriculture">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="construction">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="other_land_use">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="nature_regeneration">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="other_change_increase">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="other_change_reducing">
		<type name="double precision" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_forest_mon1" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="total_area">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="new_plantation">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_area_total">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_area_clear">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_area_selected">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_vol_total">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_vol_clear">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_vol_selected">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="bamboo_harvesting_area_total">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="bamboo_harvesting_area_clear">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="bamboo_harvesting_area_selected">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="bamboo_density">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="name">
		<type name="text" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_forest_mon2" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="name">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="total_area">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_area_total">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_area_clear">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_area_selected">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_vol_total">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_vol_clear">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="wood_harvesting_vol_selected">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="bamboo_harvesting_area_total">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="bamboo_harvesting_area_clear">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="bamboo_harvesting_area_selected">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="bamboo_density">
		<type name="double precision" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_forest_mon4" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="name">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="total_area">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="new_plantation">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="replanting">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="nature_regeneration">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="supplementary_planting">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="tending">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="thinning">
		<type name="double precision" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_forest_monitoring" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="code">
		<type name="character varying" length="10"/>
	</typeattrib>
	<typeattrib name="area_name">
		<type name="character varying" length="200"/>
	</typeattrib>
	<typeattrib name="trong_moi">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="kt_trang">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="chay">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="sau_benh">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="pha_rung">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="cdmdsd">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="kn_bv">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="nn_khac">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tong_dt">
		<type name="numeric" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_forest_monitoring_reason" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="area_name">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="new_plantation">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="harvesting">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="fire">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="disease">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="illegal_cut">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="hydropower">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="industry">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="agriculture_aquaculture">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="construction">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="other_land_use">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="natural_regeneration">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="other_increase">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="other_reducing">
		<type name="double precision" length="0"/>
	</typeattrib>
	<typeattrib name="total_area">
		<type name="double precision" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_form6_standard" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="tt">
		<type name="integer" length="0"/>
	</typeattrib>
	<typeattrib name="area_name">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="code">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="khaithacchon">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="khaithactrang">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="trongmoi">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tronglai">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="xuctien">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="trongbosung">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="chamsoc">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tiathua">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="chayrung">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="saubenhhai">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="lanchiem">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="khaithactraiphep">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="pharung">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="thuydien">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="khucongnghiep">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="nongnghiep">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="congtrinhcong">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="mucdichkhac">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tangdientich">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="giamdientich">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="tongcong">
		<type name="numeric" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_form8_standard" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="tt">
		<type name="integer" length="0"/>
	</typeattrib>
	<typeattrib name="churung">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="tenxa">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="tieukhu">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="khoanh">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="lorung">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="dientich">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ldlrdau">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="ldlrcuoi">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="lydo">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="thoigian">
		<type name="name" length="0"/>
	</typeattrib>
	<typeattrib name="ghichu">
		<type name="name" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_origin_function_form" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="code">
		<type name="character varying" length="100"/>
	</typeattrib>
	<typeattrib name="area_name">
		<type name="character varying" length="100"/>
	</typeattrib>
	<typeattrib name="ng_rtn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ng_rt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ng_ccr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dd_tn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dd_rt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dd_ccr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ph_tn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ph_rt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="ph_ccr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="sx_tn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="sx_rt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="sx_ccr">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="nqh_tn">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="nqh_rt">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="nqh_ccr">
		<type name="numeric" length="0"/>
	</typeattrib>
</usertype>

<usertype name="_formis_tree_form" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="tree_name">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="tong">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi1">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi2">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi3">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi4">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi5">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="mdsd">
		<type name="character varying" length="200"/>
	</typeattrib>
</usertype>

<usertype name="_formis_tree_form_standard" configuration="composite">
	<schema name="public"/>
	<role name="formisadmin"/>
	<typeattrib name="tree_name">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="tong">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi1">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi2">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi3">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi4">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="captuoi5">
		<type name="numeric" length="0"/>
	</typeattrib>
	<typeattrib name="dtchuatr">
		<type name="numeric" length="0"/>
	</typeattrib>
</usertype>

<sequence name="config_report_seq"
	 start="10000" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="formisadmin"/>
</sequence>

<sequence name="dd_field_id_seq"
	 start="10000" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="formisadmin"/>
</sequence>

<sequence name="dd_tab_id_seq"
	 start="10000" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="formisadmin"/>
</sequence>

<sequence name="dd_table_id_seq"
	 start="10000" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="formisadmin"/>
</sequence>

<sequence name="layer_styles_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="formisadmin"/>
</sequence>

<sequence name="report_group_id_seq"
	 start="10000" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="formisadmin"/>
</sequence>

<sequence name="report_group_reports_id_seq"
	 start="10000" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="public"/>
	<role name="formisadmin"/>
</sequence>

<schema name="symds" rect-visible="true" fill-color="#83af1f">
	<role name="formisuser"/>
</schema>

<table name="commune">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="60"/>
	<column name="commune_code" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the commune]]></comment>
	</column>
	<column name="district_code">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the district that the commune belongs to]]></comment>
	</column>
	<column name="name">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Name of the commune]]></comment>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
		<comment><![CDATA[The spatial boundary of the commune]]></comment>
	</column>
	<column name="area">
		<type name="double precision" length="0"/>
	</column>
	<constraint name="commune_pkey" type="pk-constr" table="public.commune">
		<columns names="commune_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="compartment">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="380" y="60"/>
	<column name="compt_code" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="area">
		<type name="double precision" length="0"/>
	</column>
	<column name="commune_code" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
	</column>
	<column name="geom_1">
		<type name="geometry" length="0"/>
	</column>
	<constraint name="compartment_pkey" type="pk-constr" table="public.compartment">
		<columns names="compt_code,commune_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="config_mymaps">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="760" y="60"/>
	<column name="user_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="config_style_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="year_filter" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="layer_name">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="config_mymaps_pkey" type="pk-constr" table="public.config_mymaps">
		<columns names="user_id,config_style_id,year_filter" ref-type="src-columns"/>
	</constraint>
</table>

<table name="config_operator">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1160" y="60"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="code">
		<type name="character varying" length="20"/>
	</column>
	<column name="operator_name">
		<type name="character varying" length="200"/>
	</column>
	<constraint name="config_operator_pkey" type="pk-constr" table="public.config_operator">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="config_query_advance">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1460" y="60"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="layer_name">
		<type name="character varying" length="50"/>
	</column>
	<column name="column_code">
		<type name="character varying" length="30"/>
	</column>
	<column name="column_name">
		<type name="character varying" length="100"/>
	</column>
	<column name="column_type">
		<type name="smallint" length="0"/>
		<comment><![CDATA[1=dropdownlist, 2 = number]]></comment>
	</column>
	<column name="table_relation">
		<type name="character varying" length="30"/>
	</column>
	<column name="column_id_relation">
		<type name="character varying" length="30"/>
	</column>
	<column name="column_name_relation">
		<type name="character varying" length="50"/>
	</column>
	<column name="column_order">
		<type name="integer" length="0"/>
	</column>
	<constraint name="config_query_advance_pkey" type="pk-constr" table="public.config_query_advance">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="config_report">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="280"/>
	<column name="code">
		<type name="character varying" length="20"/>
	</column>
	<column name="name">
		<type name="character varying" length="200"/>
	</column>
	<column name="type">
		<type name="character varying" length="20"/>
	</column>
	<column name="forest_type_code_from">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="forest_type_code_to">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="p_forest_org_code">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="site_cond_code_from">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="site_cond_code_to">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="volume_per_ha_from">
		<type name="numeric" length="7" precision="1"/>
	</column>
	<column name="volume_per_ha_to">
		<type name="numeric" length="7" precision="1"/>
	</column>
	<column name="forest_type_special">
		<type name="character varying" length="200"/>
	</column>
	<column name="row_order">
		<type name="integer" length="0"/>
	</column>
	<column name="unit" default-value="'m3'">
		<type name="character varying" length="20"/>
	</column>
	<column name="forest_func_sub_code">
		<type name="character varying" length="100"/>
	</column>
	<column name="land_use_cert_code">
		<type name="character varying" length="20"/>
	</column>
	<column name="conflict_sit_code">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="tree_specie_abbr">
		<type name="character varying" length="50"/>
	</column>
	<column name="id" not-null="true" sequence="public.config_report_seq">
		<type name="integer" length="0"/>
	</column>
	<column name="forest_use_sit_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="forest_use_sit_code_from">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="forest_use_sit_code_to">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="actor_type_code">
		<type name="character varying" length="100"/>
	</column>
	<column name="tree_specie_code">
		<type name="character varying" length="100"/>
	</column>
	<column name="forest_org_code">
		<type name="character varying" length="100"/>
	</column>
	<column name="nar_for_org_code">
		<type name="character varying" length="50"/>
	</column>
	<column name="special_product" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="plant_state_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="no_tree_spec_code">
		<type name="character varying" length="50"/>
	</column>
</table>

<table name="config_show">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="420" y="280"/>
	<column name="field_code" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="layer_code" not-null="true">
		<type name="character varying" length="50"/>
		<comment><![CDATA[TÃªn layer]]></comment>
	</column>
	<column name="status">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[1=Hiá»ƒn thá»‹ giÃ¡ trá»‹, 0 = KhÃ´ng hiá»ƒn thá»‹ giÃ¡ trá»‹]]></comment>
	</column>
	<column name="order_field">
		<type name="integer" length="0"/>
		<comment><![CDATA[Thá»© tá»± hiá»ƒn thá»‹]]></comment>
	</column>
	<constraint name="config_show_pkey" type="pk-constr" table="public.config_show">
		<columns names="field_code,layer_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="config_stored_query">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="740" y="280"/>
	<column name="query_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="query_name">
		<type name="character varying" length="500"/>
	</column>
	<column name="query_string">
		<type name="character varying" length="500"/>
	</column>
	<column name="query_order">
		<type name="integer" length="0"/>
	</column>
	<constraint name="config_stored_query_pkey" type="pk-constr" table="public.config_stored_query">
		<columns names="query_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="config_style">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1080" y="280"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="layer_name">
		<type name="character varying" length="30"/>
	</column>
	<column name="style_name">
		<type name="character varying" length="50"/>
	</column>
	<column name="style_qml">
		<type name="text" length="0"/>
	</column>
	<column name="style_sld">
		<type name="text" length="0"/>
	</column>
	<column name="desc">
		<type name="character varying" length="200"/>
	</column>
	<column name="num_order">
		<type name="integer" length="0"/>
	</column>
	<column name="sld_name">
		<type name="character varying" length="100"/>
	</column>
	<constraint name="config_style_pkey" type="pk-constr" table="public.config_style">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="config_validation">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1380" y="280"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="layer_name">
		<type name="character varying" length="50"/>
	</column>
	<column name="column_name">
		<type name="character varying" length="50"/>
	</column>
	<column name="regular_expression">
		<type name="character varying" length="200"/>
	</column>
	<column name="des">
		<type name="character varying" length="200"/>
	</column>
	<constraint name="config_validation_pkey" type="pk-constr" table="public.config_validation">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="conflict_situation">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="740"/>
	<column name="conflict_sit_code" not-null="true">
		<type name="numeric" length="3" precision="0"/>
		<comment><![CDATA[The code that indicates the litigious status]]></comment>
	</column>
	<column name="conflict_sit_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the litigious status]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="conflict_situation_pkey" type="pk-constr" table="public.conflict_situation">
		<columns names="conflict_sit_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="dd_field">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="420" y="740"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="dd_tab_id" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[All fields not included here will be put in the tab with the highest tab_order. One and the same field should be included in _one_ tab only.]]></comment>
	</column>
	<column name="field_name" not-null="true">
		<type name="character varying" length="256"/>
		<comment><![CDATA[Name of the field in the database]]></comment>
	</column>
	<column name="field_alias">
		<type name="character varying" length="256"/>
		<comment><![CDATA[Alias of the field to be used in the mask]]></comment>
	</column>
	<column name="field_skip" not-null="true" default-value="false">
		<type name="boolean" length="0"/>
		<comment><![CDATA[skip this field in the input and search mask, i.e. hide it from the user]]></comment>
	</column>
	<column name="field_search" not-null="true" default-value="true">
		<type name="boolean" length="0"/>
		<comment><![CDATA[include this field in the search mask, if skip is true the field is not shown in the search mask, no matter if search is true]]></comment>
	</column>
	<column name="field_order" not-null="true" default-value="0">
		<type name="integer" length="0"/>
		<comment><![CDATA[order of the fields in the mask]]></comment>
	</column>
	<column name="field_min">
		<type name="character varying" length="32"/>
		<comment><![CDATA[min value of the field (only for numeric and date fields). Use point as decimal seperator, format date as "yyyy-MM-dd", insert "today" to set the min date on the current date or "today +/- num_days" for a certain day relative to the current date.]]></comment>
	</column>
	<column name="field_max">
		<type name="character varying" length="32"/>
		<comment><![CDATA[max value of the field (only for numeric and date fields). Use point as decimal seperator, format date as "yyyy-MM-dd", insert "today" to set the max date on the current date or "today +/- num_days" for a certain day relative to the current date.]]></comment>
	</column>
	<column name="field_enabled" not-null="true" default-value="true">
		<type name="boolean" length="0"/>
		<comment><![CDATA[Enable or disable this field in the input mask]]></comment>
	</column>
</table>

<table name="dd_tab">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="780" y="740"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="dd_table_id" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[Table for which this tab is used]]></comment>
	</column>
	<column name="tab_alias">
		<type name="character varying" length="256"/>
		<comment><![CDATA[Label the tab with this string, leave empty if you want the data-driven tabs]]></comment>
	</column>
	<column name="tab_order" not-null="true" default-value="0">
		<type name="integer" length="0"/>
		<comment><![CDATA[Order of the tabs in the mask (if a mask contains more than one tabs)]]></comment>
	</column>
	<column name="tab_tooltip">
		<type name="character varying" length="256"/>
		<comment><![CDATA[tooltip to be shown for this tab]]></comment>
	</column>
</table>

<table name="dd_table">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1060" y="740"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="table_schema" not-null="true">
		<type name="character varying" length="256"/>
		<comment><![CDATA[name of the schema]]></comment>
	</column>
	<column name="table_name" not-null="true">
		<type name="character varying" length="256"/>
		<comment><![CDATA[name of the table]]></comment>
	</column>
	<column name="table_help">
		<type name="text" length="0"/>
		<comment><![CDATA[Help string to be shown if user clicks the help button, this string can be HTML formatted.]]></comment>
	</column>
	<column name="table_action" not-null="true" default-value="true">
		<type name="boolean" length="0"/>
		<comment><![CDATA[Create a layer action to show the mask]]></comment>
	</column>
</table>

<table name="department">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1420" y="740"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="parent_id">
		<type name="integer" length="0"/>
	</column>
	<column name="code">
		<type name="character varying" length="50"/>
	</column>
	<column name="name">
		<type name="character varying" length="100"/>
	</column>
	<column name="address">
		<type name="character varying" length="200"/>
	</column>
	<constraint name="pk_department" type="pk-constr" table="public.department">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="dept_location_per">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="960"/>
	<column name="department_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="location_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="level">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<constraint name="pk_dept_location_per" type="pk-constr" table="public.dept_location_per">
		<columns names="department_id,location_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="district">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="360" y="960"/>
	<column name="district_code" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the district]]></comment>
	</column>
	<column name="province_code">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the province that the district belongs to]]></comment>
	</column>
	<column name="name">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Name of the district]]></comment>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
		<comment><![CDATA[The spatial boundary of the district]]></comment>
	</column>
	<column name="area">
		<type name="double precision" length="0"/>
	</column>
	<constraint name="district_pkey" type="pk-constr" table="public.district">
		<columns names="district_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="eco_zone">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="700" y="960"/>
	<column name="eco_zone_code" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[The code of  the eco zone]]></comment>
	</column>
	<column name="eco_zone_def">
		<type name="character" length="50"/>
		<comment><![CDATA[Definition of the eco zone]]></comment>
	</column>
	<column name="source">
		<type name="character" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<constraint name="eco_zone_pk" type="pk-constr" table="public.eco_zone">
		<columns names="eco_zone_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="forest_actor">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1000" y="960"/>
	<column name="commune_code" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the object]]></comment>
	</column>
	<column name="actor_id" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the object]]></comment>
	</column>
	<column name="actor_type_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Code of the actor  type (looked up from Table ForestActorTypeCode)]]></comment>
	</column>
	<column name="actor_name">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Name of the object]]></comment>
	</column>
	<column name="actor_address">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Address of the object]]></comment>
	</column>
	<column name="additional_info">
		<type name="character varying" length="150"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="ts_created" default-value="now()">
		<type name="timestamp" length="0"/>
	</column>
	<column name="ts_modified">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="forest_use_object_pk" type="pk-constr" table="public.forest_actor">
		<columns names="commune_code,actor_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="forest_actor_type">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1500" y="960"/>
	<column name="actor_type_code" not-null="true">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code that indicates the forest use object ]]></comment>
	</column>
	<column name="abbreviation">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The abbreviation of the forest use object]]></comment>
	</column>
	<column name="actor_type_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the forest use object]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="actor_group_type">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[The code that indicates the forest use object ]]></comment>
	</column>
	<constraint name="use_object_code_pk" type="pk-constr" table="public.forest_actor_type">
		<columns names="actor_type_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="forest_function">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="1260"/>
	<column name="forest_func_sub_code" not-null="true">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Code of the forest function, sub-class]]></comment>
	</column>
	<column name="forest_func_main_code">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[The code that three type forest 1=PhÃ²ng há»™, 2 = Ä�áº·c dá»¥ng, 3=Sáº£n xuáº¥t]]></comment>
	</column>
	<column name="abbreviation">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The abbreviation of the purpose of use]]></comment>
	</column>
	<column name="forest_func_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the purpose of use]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="forest_function_pkey" type="pk-constr" table="public.forest_function">
		<columns names="forest_func_sub_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="forest_monitoring">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="460" y="1260"/>
	<column name="forest_monitoring_uuid" not-null="true" default-value="uuid_generate_v4()">
		<type name="uuid" length="0"/>
	</column>
	<column name="plot_uuid">
		<type name="uuid" length="0"/>
	</column>
	<column name="plot_history_uuid">
		<type name="uuid" length="0"/>
	</column>
	<column name="commune_code" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="compt_code" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="sub_compt_code" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="plot_code" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="change_type_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="date_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="area">
		<type name="numeric" length="10" precision="2"/>
	</column>
	<column name="volume">
		<type name="numeric" length="10" precision="2"/>
	</column>
	<column name="stems_no">
		<type name="numeric" length="9" precision="3"/>
	</column>
	<column name="description">
		<type name="character varying" length="200"/>
	</column>
	<column name="regeneration">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[1= XÃºc tiÃªÌ�n tÃ¡i sinh tÆ°Ì£ nhiÃªnâ€¨2=  TrÃ´Ì€ng bÃ´Ì‰ sung]]></comment>
	</column>
	<column name="other_silvicultural">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[1= Â ChaÌ†m sÃ³c â€¨2= TiÌ‰a thuÌ›a â€¨]]></comment>
	</column>
	<column name="method_plantation">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[1 =TrÃ´Ì€ng thuÃ¢Ì€n loÃ i ,â€¨2 Â =TrÃ´Ì€ng hÃ´Ìƒn loÃ i ]]></comment>
	</column>
	<column name="density_wood">
		<type name="numeric" length="10" precision="2"/>
		<comment><![CDATA[Mat do cay go]]></comment>
	</column>
	<column name="density_bamboo">
		<type name="numeric" length="10" precision="2"/>
	</column>
	<column name="stems_no_thin">
		<type name="numeric" length="10" precision="2"/>
	</column>
	<column name="stems_no_bamboo_thin">
		<type name="numeric" length="10" precision="2"/>
	</column>
	<column name="forest_type_code">
		<type name="integer" length="0"/>
		<comment><![CDATA[--]]></comment>
	</column>
	<column name="forest_func_sub_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="forest_org_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code of the forest origin]]></comment>
	</column>
	<column name="forest_use_sit_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="actor_type_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="actor_id">
		<type name="integer" length="0"/>
	</column>
	<column name="site_cond_code">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[Code of the site condition of the plot]]></comment>
	</column>
	<column name="p_forest_org_code">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="tree_spec_code">
		<type name="character varying" length="50"/>
	</column>
	<column name="nar_for_org_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="land_use_cert_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="conflict_sit_code">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="plant_state_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="forest_type_code_after">
		<type name="integer" length="0"/>
	</column>
	<column name="forest_func_sub_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="forest_org_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="forest_use_sit_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="actor_type_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="actor_id_after">
		<type name="integer" length="0"/>
	</column>
	<column name="site_cond_code_after">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="p_forest_org_code_after">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="tree_spec_code_after">
		<type name="character varying" length="50"/>
	</column>
	<column name="nar_for_org_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="land_use_cert_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="conflict_sit_code_after">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="plant_state_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="ts_created" default-value="now()">
		<type name="timestamp" length="0"/>
	</column>
	<column name="ts_modified">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="forest_monitoring_pkey" type="pk-constr" table="public.forest_monitoring">
		<columns names="forest_monitoring_uuid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="forest_origin">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="920" y="1260"/>
	<column name="forest_org_code" not-null="true">
		<type name="numeric" length="3" precision="0"/>
		<comment><![CDATA[The code of  the forest origin]]></comment>
	</column>
	<column name="forest_org_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the forest origin]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the forest origin]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="forest_origin_pkey" type="pk-constr" table="public.forest_origin">
		<columns names="forest_org_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="forest_type">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1280" y="1260"/>
	<column name="forest_type_code" not-null="true">
		<type name="numeric" length="3" precision="0"/>
		<comment><![CDATA[The code of  the forest/land type]]></comment>
	</column>
	<column name="abbreviation">
		<type name="character" length="10"/>
		<comment><![CDATA[Abbreviation of the forest/land type]]></comment>
	</column>
	<column name="forest_type_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the forest/land type]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="forest_type_pkey" type="pk-constr" table="public.forest_type">
		<columns names="forest_type_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="forest_use_situation">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1660" y="1260"/>
	<column name="forest_use_sit_code" not-null="true">
		<type name="numeric" length="3" precision="0"/>
		<comment><![CDATA[The code that indicates the mature status of the forest]]></comment>
	</column>
	<column name="forest_use_sit_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the mature status]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="forest_use_situation_pkey" type="pk-constr" table="public.forest_use_situation">
		<columns names="forest_use_sit_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="land_use_certificate">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="2180"/>
	<column name="land_use_cert_code" not-null="true">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[The code that indicates the use status of the plot]]></comment>
	</column>
	<column name="land_use_cert_def">
		<type name="character varying" length="50"/>
		<comment><![CDATA[Definition of the use status]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="land_use_certificate_pkey" type="pk-constr" table="public.land_use_certificate">
		<columns names="land_use_cert_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="lang_merge">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="440" y="2180"/>
	<column name="key" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="500"/>
	</column>
	<column name="value">
		<type name="character varying" length="500"/>
	</column>
	<constraint name="lang_pkey" type="pk-constr" table="public.lang_merge">
		<columns names="key,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="layer_styles">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="740" y="2180"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="f_table_catalog">
		<type name="character varying" length="0"/>
	</column>
	<column name="f_table_schema">
		<type name="character varying" length="0"/>
	</column>
	<column name="f_table_name">
		<type name="character varying" length="0"/>
	</column>
	<column name="f_geometry_column">
		<type name="character varying" length="0"/>
	</column>
	<column name="stylename">
		<type name="character varying" length="30"/>
	</column>
	<column name="styleqml">
		<type name="xml" length="0"/>
	</column>
	<column name="stylesld">
		<type name="xml" length="0"/>
	</column>
	<column name="useasdefault">
		<type name="boolean" length="0"/>
	</column>
	<column name="description">
		<type name="text" length="0"/>
	</column>
	<column name="owner">
		<type name="character varying" length="30"/>
	</column>
	<column name="ui">
		<type name="xml" length="0"/>
	</column>
	<column name="update_time" default-value="now()">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="layer_styles_pkey" type="pk-constr" table="public.layer_styles">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="location">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1060" y="2180"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="name">
		<type name="character varying" length="50"/>
	</column>
	<column name="level" not-null="true">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="parent_id">
		<type name="integer" length="0"/>
	</column>
	<constraint name="pk_location" type="pk-constr" table="public.location">
		<columns names="id,level" ref-type="src-columns"/>
	</constraint>
</table>

<table name="monitoring_change_type">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1340" y="2180"/>
	<column name="change_type_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="name">
		<type name="character varying" length="100"/>
	</column>
	<column name="monitoring_type_id">
		<type name="integer" length="0"/>
	</column>
	<column name="monitoring_type_code">
		<type name="integer" length="0"/>
	</column>
	<constraint name="change_type_pkey" type="pk-constr" table="public.monitoring_change_type">
		<columns names="change_type_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="monitoring_type">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="2480"/>
	<column name="monitoring_type_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="group_type_id">
		<type name="integer" length="0"/>
		<comment><![CDATA[0 = remove area, volumne; 1 = implement area volumn]]></comment>
	</column>
	<column name="name">
		<type name="character varying" length="50"/>
		<comment><![CDATA[name of monitoring type]]></comment>
	</column>
	<column name="description">
		<type name="character varying" length="200"/>
	</column>
	<constraint name="monitoring_type_pkey" type="pk-constr" table="public.monitoring_type">
		<columns names="monitoring_type_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="natural_forest_origin">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="400" y="2480"/>
	<column name="nar_for_org_code" not-null="true">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[Code of the natural forest origin]]></comment>
	</column>
	<column name="nar_for_org_def">
		<type name="character varying" length="50"/>
		<comment><![CDATA[Definition of the use status]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="natural_forest_origin_pkey" type="pk-constr" table="public.natural_forest_origin">
		<columns names="nar_for_org_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="p_forest_origin">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="780" y="2480"/>
	<column name="p_forest_org_code" not-null="true">
		<type name="numeric" length="3" precision="0"/>
		<comment><![CDATA[The code of  the forest origin]]></comment>
	</column>
	<column name="p_forest_org_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the forest origin]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the forest origin]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="p_forest_origin_pkey" type="pk-constr" table="public.p_forest_origin">
		<columns names="p_forest_org_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="permission">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1160" y="2480"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="code">
		<type name="character varying" length="30"/>
	</column>
	<column name="des">
		<type name="character varying" length="200"/>
	</column>
	<constraint name="pk_permission" type="pk-constr" table="public.permission">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="plantation_state">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1440" y="2480"/>
	<column name="plant_state_code" not-null="true">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[The code that indicates the planning status]]></comment>
	</column>
	<column name="plant_state_def">
		<type name="character varying" length="50"/>
		<comment><![CDATA[Definition of the type of planning status]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang">
		<type name="character varying" length="5"/>
	</column>
</table>

<table name="plot">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="2620"/>
	<column name="plot_uuid" not-null="true" default-value="uuid_generate_v4()">
		<type name="uuid" length="0"/>
	</column>
	<column name="commune_code" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the commune that the plot belongs to]]></comment>
	</column>
	<column name="compt_code" not-null="true">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The identifier of the compartment that the plot belongs to]]></comment>
	</column>
	<column name="sub_compt_code" not-null="true">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The identifier of the sub-compartment that the plot belongs to]]></comment>
	</column>
	<column name="plot_code" not-null="true">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The identifier of the plot]]></comment>
	</column>
	<column name="parcel_code">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the parcel that contains the plot]]></comment>
	</column>
	<column name="map_sheet">
		<type name="character varying" length="8"/>
		<comment><![CDATA[Number of base map sheet]]></comment>
	</column>
	<column name="village">
		<type name="character varying" length="50"/>
		<comment><![CDATA[The name of the place or village that the plot belongs to]]></comment>
	</column>
	<column name="area">
		<type name="numeric" length="9" precision="2"/>
		<comment><![CDATA[The area of the plot]]></comment>
	</column>
	<column name="forest_use_sit_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[MÃ£ sá»‘ tÃ¬nh tráº¡ng ngoÃ i quy hoáº¡ch (TK.Báº£ng  ForestUseSituation)]]></comment>
	</column>
	<column name="forest_func_sub_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Code of the purpose of use]]></comment>
	</column>
	<column name="site_cond_code">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[Code of the site condition of the plot]]></comment>
	</column>
	<column name="forest_type_code">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[Code of land/forest type]]></comment>
	</column>
	<column name="forest_org_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code of the forest origin]]></comment>
	</column>
	<column name="nar_for_org_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code that indicates the primary status of the plot]]></comment>
	</column>
	<column name="p_forest_org_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Code of the origin of the plantation forest]]></comment>
	</column>
	<column name="plant_state_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[MÃ£ tráº¡ng thÃ¡i trá»“ng (TK.Báº£ng  PlantationSate) ]]></comment>
	</column>
	<column name="tree_spec_code">
		<type name="character varying" length="100"/>
	</column>
	<column name="planting_year">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[Year of plantation of the plot]]></comment>
	</column>
	<column name="avg_year_canopy">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Averaged year to canopy]]></comment>
	</column>
	<column name="volume_per_ha">
		<type name="numeric" length="7" precision="1"/>
		<comment><![CDATA[The volume per ha of the plot (m3/ha)]]></comment>
	</column>
	<column name="volume_per_plot">
		<type name="numeric" length="9" precision="1"/>
		<comment><![CDATA[The volume of the plot (m3)]]></comment>
	</column>
	<column name="stem_per_ha">
		<type name="numeric" length="9" precision="3"/>
		<comment><![CDATA[The number of stems per ha of the plot (1000 stems/ha)]]></comment>
	</column>
	<column name="stem_per_plot" default-value="0">
		<type name="numeric" length="9" precision="3"/>
		<comment><![CDATA[The number of  the stems of the plot (1000 stems)]]></comment>
	</column>
	<column name="actor_id">
		<type name="integer" length="0"/>
	</column>
	<column name="actor_type_code">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="land_use_cert_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Code of usage status]]></comment>
	</column>
	<column name="land_use_terune">
		<type name="numeric" length="5" precision="0"/>
		<comment><![CDATA[Year of land use tenure]]></comment>
	</column>
	<column name="conflict_sit_code">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[Code of litigious status of the plot]]></comment>
	</column>
	<column name="actor_id_conflict">
		<type name="integer" length="0"/>
	</column>
	<column name="prot_contr_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code of the assignment status]]></comment>
	</column>
	<column name="actor_id_prot">
		<type name="integer" length="0"/>
		<comment><![CDATA[Ma nguoi nhan khoan]]></comment>
	</column>
	<column name="old_plot_code">
		<type name="character varying" length="6"/>
		<comment><![CDATA[The code of the old plot when the inventory was being carried out]]></comment>
	</column>
	<column name="pos_status_code">
		<type name="integer" length="0"/>
		<comment><![CDATA[Relative location of the plot compared to actual position]]></comment>
	</column>
	<column name="desc">
		<type name="character varying" length="200"/>
		<comment><![CDATA[Ghi chu]]></comment>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
		<comment><![CDATA[The spatial boundary of the plot]]></comment>
	</column>
	<column name="change_type_id">
		<type name="integer" length="0"/>
		<comment><![CDATA[Theo dÃµi diá»…n biáº¿n - Loáº¡i diá»…n biáº¿n]]></comment>
	</column>
	<column name="date_time">
		<type name="timestamp" length="0"/>
		<comment><![CDATA[Theo dÃµi diá»…n biáº¿n, thá»�i gian tÃ¡c Ä‘á»™ng]]></comment>
	</column>
	<column name="area_affected">
		<type name="numeric" length="10" precision="2"/>
		<comment><![CDATA[Theo dÃµi diá»…n biáº¿n]]></comment>
	</column>
	<column name="volume_affected">
		<type name="numeric" length="10" precision="2"/>
		<comment><![CDATA[Theo dÃµi diá»…n biáº¿n]]></comment>
	</column>
	<column name="stems_no_affected">
		<type name="numeric" length="9" precision="3"/>
		<comment><![CDATA[Theo dÃµi diá»…n biáº¿n - Sá»‘ cÃ¢y]]></comment>
	</column>
	<column name="method_plantation">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[1 =TrÃ´Ì€ng thuÃ¢Ì€n loÃ i ,â€¨2 Â =TrÃ´Ì€ng hÃ´Ìƒn loÃ i ]]></comment>
	</column>
	<column name="density_wood">
		<type name="numeric" length="10" precision="2"/>
		<comment><![CDATA[Mat do cay go]]></comment>
	</column>
	<column name="density_bamboo">
		<type name="numeric" length="10" precision="2"/>
	</column>
	<column name="stems_no_thin">
		<type name="numeric" length="10" precision="2"/>
	</column>
	<column name="stems_no_bamboo_thin">
		<type name="numeric" length="10" precision="2"/>
	</column>
	<column name="desc_monitor">
		<type name="character varying" length="200"/>
	</column>
	<column name="change_type_id_last">
		<type name="integer" length="0"/>
		<comment><![CDATA[-Luu gia tri cuoi cung cua change_type_id]]></comment>
	</column>
	<column name="ts_created" default-value="now()">
		<type name="timestamp" length="0"/>
	</column>
	<column name="ts_modified">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="plot_pkey" type="pk-constr" table="public.plot">
		<columns names="plot_uuid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="plot_history">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="500" y="2620"/>
	<column name="plot_history_uuid" not-null="true" default-value="uuid_generate_v4()">
		<type name="uuid" length="0"/>
	</column>
	<column name="plot_uuid">
		<type name="uuid" length="0"/>
	</column>
	<column name="plot_code" not-null="true">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The identifier of the plot]]></comment>
	</column>
	<column name="sub_compt_code" not-null="true">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The identifier of the sub-compartment that the plot belongs to]]></comment>
	</column>
	<column name="compt_code" not-null="true">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The identifier of the compartment that the plot belongs to]]></comment>
	</column>
	<column name="commune_code" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the commune that the plot belongs to]]></comment>
	</column>
	<column name="parcel_code" default-value="(-1)">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the parcel that contains the plot]]></comment>
	</column>
	<column name="map_sheet">
		<type name="character varying" length="8"/>
		<comment><![CDATA[Number of base map sheet]]></comment>
	</column>
	<column name="village">
		<type name="character varying" length="50"/>
		<comment><![CDATA[The name of the place or village that the plot belongs to]]></comment>
	</column>
	<column name="area">
		<type name="numeric" length="9" precision="2"/>
		<comment><![CDATA[The area of the plot]]></comment>
	</column>
	<column name="forest_org_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code of the forest origin]]></comment>
	</column>
	<column name="forest_type_code">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[Code of land/forest type]]></comment>
	</column>
	<column name="planting_year">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[Year of plantation of the plot]]></comment>
	</column>
	<column name="avg_year_canopy">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Averaged year to canopy]]></comment>
	</column>
	<column name="p_forest_org_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Code of the origin of the plantation forest]]></comment>
	</column>
	<column name="plant_state_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[MÃ£ tráº¡ng thÃ¡i trá»“ng (TK.Báº£ng  PlantationSate) ]]></comment>
	</column>
	<column name="volume_per_ha">
		<type name="numeric" length="7" precision="1"/>
		<comment><![CDATA[The volume per ha of the plot (m3/ha)]]></comment>
	</column>
	<column name="stem_per_ha">
		<type name="numeric" length="9" precision="3"/>
		<comment><![CDATA[The number of stems per ha of the plot (1000 stems/ha)]]></comment>
	</column>
	<column name="volume_per_plot">
		<type name="numeric" length="9" precision="1"/>
		<comment><![CDATA[The volume of the plot (m3)]]></comment>
	</column>
	<column name="stem_per_plot" default-value="0">
		<type name="numeric" length="9" precision="3"/>
		<comment><![CDATA[The number of  the stems of the plot (1000 stems)]]></comment>
	</column>
	<column name="site_cond_code">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[Code of the site condition of the plot]]></comment>
	</column>
	<column name="forest_func_sub_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Code of the purpose of use]]></comment>
	</column>
	<column name="forest_func_sub_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="conflict_sit_code">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[Code of litigious status of the plot]]></comment>
	</column>
	<column name="land_use_cert_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Code of usage status]]></comment>
	</column>
	<column name="land_use_terune">
		<type name="numeric" length="5" precision="0"/>
		<comment><![CDATA[Year of land use tenure]]></comment>
	</column>
	<column name="prot_contr_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code of the assignment status]]></comment>
	</column>
	<column name="forest_use_sit_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[MÃ£ sá»‘ tÃ¬nh tráº¡ng ngoÃ i quy hoáº¡ch (TK.Báº£ng  ForestUseSituation)]]></comment>
	</column>
	<column name="forest_use_sit_code_after">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="nar_for_org_code">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code that indicates the primary status of the plot]]></comment>
	</column>
	<column name="old_plot_code">
		<type name="character varying" length="6"/>
		<comment><![CDATA[The code of the old plot when the inventory was being carried out]]></comment>
	</column>
	<column name="pos_status_code">
		<type name="integer" length="0"/>
		<comment><![CDATA[Relative location of the plot compared to actual position]]></comment>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
		<comment><![CDATA[The spatial boundary of the plot]]></comment>
	</column>
	<column name="personmodify">
		<type name="integer" length="0"/>
	</column>
	<column name="datemodify">
		<type name="timestamp" length="0"/>
	</column>
	<column name="dateapproval">
		<type name="timestamp" length="0"/>
	</column>
	<column name="actor_type_code">
		<type name="numeric" length="0"/>
	</column>
	<column name="actor_id">
		<type name="integer" length="0"/>
	</column>
	<column name="actor_id_conflict">
		<type name="integer" length="0"/>
	</column>
	<column name="actor_id_prot">
		<type name="integer" length="0"/>
	</column>
	<column name="desc">
		<type name="character varying" length="200"/>
	</column>
	<column name="tree_spec_code">
		<type name="character varying" length="50"/>
	</column>
	<column name="change_type_id">
		<type name="integer" length="0"/>
	</column>
	<column name="change_type_id_last">
		<type name="integer" length="0"/>
	</column>
	<column name="year_approval">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="last">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="ts_created" default-value="now()">
		<type name="timestamp" length="0"/>
	</column>
	<column name="ts_modified">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="plot_history_pkey" type="pk-constr" table="public.plot_history">
		<columns names="plot_history_uuid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="plot_position_status">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1120" y="2620"/>
	<column name="pos_status_code" not-null="true">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[The code that indicates the plot position status of the plot]]></comment>
	</column>
	<column name="pos_status_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the plot position status]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="plot_position_status_pkey" type="pk-constr" table="public.plot_position_status">
		<columns names="pos_status_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="plot_tree_specie">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1480" y="2620"/>
	<column name="commune_code" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[Code of the commune that the inventory plot belongs to]]></comment>
	</column>
	<column name="compt_code" not-null="true">
		<type name="character varying" length="7"/>
		<comment><![CDATA[Code of the compartment that the inventory plot belongs to]]></comment>
	</column>
	<column name="sub_compt_code" not-null="true">
		<type name="character varying" length="7"/>
		<comment><![CDATA[Code of the sub-compartment that the inventory plot belongs to]]></comment>
	</column>
	<column name="plot_code" not-null="true">
		<type name="character varying" length="7"/>
		<comment><![CDATA[Inventory plot number]]></comment>
	</column>
	<column name="tree_spec_code" not-null="true">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[Code of the tree species]]></comment>
	</column>
	<constraint name="plot_tree_specie_pkey" type="pk-constr" table="public.plot_tree_specie">
		<columns names="commune_code,compt_code,sub_compt_code,plot_code,tree_spec_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="protection_contract">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="2100" y="2620"/>
	<column name="prot_contr_code" not-null="true">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[The code that indicates the use status of the plot]]></comment>
	</column>
	<column name="prot_contr_def">
		<type name="character varying" length="50"/>
		<comment><![CDATA[Definition of the use status]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<constraint name="protection_contract_pkey" type="pk-constr" table="public.protection_contract">
		<columns names="prot_contr_code,lang" ref-type="src-columns"/>
	</constraint>
</table>

<table name="province">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="3680"/>
	<column name="province_code" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the province]]></comment>
	</column>
	<column name="eco_zone_code">
		<type name="integer" length="0"/>
		<comment><![CDATA[The identifier of the eco zone that the province belongs to]]></comment>
	</column>
	<column name="name">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Name of the province]]></comment>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
		<comment><![CDATA[The spatial boundary of the province]]></comment>
	</column>
	<column name="area">
		<type name="double precision" length="0"/>
	</column>
	<column name="region_code">
		<type name="numeric" length="1" precision="0"/>
		<comment><![CDATA[Code of the region that the province belongs to]]></comment>
	</column>
	<column name="srid">
		<type name="integer" length="0"/>
		<comment><![CDATA[He quy chieu cua tinh (lien he voi bang spatial_ref_sys)]]></comment>
	</column>
	<constraint name="province_pk" type="pk-constr" table="public.province">
		<columns names="province_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="report_group">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="400" y="3680"/>
	<column name="name">
		<type name="character varying" length="200"/>
	</column>
	<column name="order" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="createdate" default-value="('now'::text)::date">
		<type name="date" length="0"/>
	</column>
	<column name="group_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="layer_id">
		<type name="character varying" length="100"/>
	</column>
	<constraint name="report_group_primary_key" type="pk-constr" table="public.report_group">
		<columns names="group_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="report_group_reports">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="740" y="3680"/>
	<column name="group_id">
		<type name="integer" length="0"/>
	</column>
	<column name="layer_id">
		<type name="character varying" length="100"/>
	</column>
	<column name="report_code">
		<type name="character varying" length="100"/>
	</column>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="order" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<constraint name="report_group_reports_primary" type="pk-constr" table="public.report_group_reports">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="report_layer">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1080" y="3680"/>
	<column name="layer_id" not-null="true">
		<type name="character varying" length="20"/>
	</column>
	<column name="report_code" not-null="true">
		<type name="character varying" length="30"/>
	</column>
	<column name="report_name">
		<type name="character varying" length="500"/>
	</column>
	<column name="report_abb">
		<type name="character varying" length="50"/>
	</column>
	<constraint name="pk_report_layer" type="pk-constr" table="public.report_layer">
		<columns names="layer_id,report_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="report_period">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1420" y="3680"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[Primary key]]></comment>
	</column>
	<column name="report_type">
		<type name="integer" length="0"/>
	</column>
	<column name="last_run">
		<type name="date" length="0"/>
	</column>
	<column name="next_run">
		<type name="date" length="0"/>
	</column>
	<constraint name="report_period_pkey" type="pk-constr" table="public.report_period">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="role">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="3920"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="description">
		<type name="character varying" length="100"/>
	</column>
	<column name="code">
		<type name="character varying" length="100"/>
	</column>
	<constraint name="pk_role" type="pk-constr" table="public.role">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="role_permission">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="340" y="3920"/>
	<column name="role_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="permission_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<constraint name="role_permission_pkey" type="pk-constr" table="public.role_permission">
		<columns names="role_id,permission_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="site_condition">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="660" y="3920"/>
	<column name="site_cond_code" not-null="true">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[The code that indicates site condition of the plot]]></comment>
	</column>
	<column name="abbreviation">
		<type name="character varying" length="10"/>
		<comment><![CDATA[The abbreviation of the soil condition]]></comment>
	</column>
	<column name="site_cond_def">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Definition of the soil condition]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="lang">
		<type name="character varying" length="10"/>
	</column>
</table>

<table name="status_report">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="980" y="3920"/>
	<column name="loc_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="level" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[- Cap do, 1 = tinh, 2 = huyen, 3 = xa]]></comment>
	</column>
	<column name="status">
		<type name="integer" length="0"/>
		<comment><![CDATA[0 = Trinh duyet (dang doi nop bao cao) => 1 = dang cho duyen=>2 = Da phe duyet, 3 = tu choi]]></comment>
	</column>
	<column name="type_report" not-null="true">
		<type name="integer" length="0"/>
		<comment><![CDATA[0 = bao cao thang, 1 = Bao cao quy, 2 = Bao cao dinh ky  ( 6 thang)]]></comment>
	</column>
	<column name="date_time" not-null="true">
		<type name="date" length="0"/>
		<comment><![CDATA[- Ngay thang tao bao cao (server)]]></comment>
	</column>
	<column name="name">
		<type name="character varying" length="200"/>
		<comment><![CDATA[- Ten bao cao (vi du bao cao thang 1/2017)]]></comment>
	</column>
	<column name="description">
		<type name="character varying" length="1000"/>
		<comment><![CDATA[- Mo ta ]]></comment>
	</column>
	<column name="approve_user_id">
		<type name="integer" length="0"/>
		<comment><![CDATA[- Nguoi phe duyet bao cao]]></comment>
	</column>
	<column name="create_user_id">
		<type name="integer" length="0"/>
		<comment><![CDATA[- Nguoi tao]]></comment>
	</column>
	<column name="id" not-null="true">
		<type name="character varying" length="200"/>
	</column>
	<constraint name="status_report_pkey" type="pk-constr" table="public.status_report">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="status_config_sql">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1340" y="3920"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="name">
		<type name="character varying" length="200"/>
	</column>
	<column name="sql_text">
		<type name="text" length="0"/>
	</column>
	<column name="level_parameter">
		<type name="integer" length="0"/>
	</column>
	<constraint name="status_config_sql_pkey" type="pk-constr" table="public.status_config_sql">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="status_report_status">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="4160"/>
	<column name="status" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="name">
		<type name="character varying" length="100"/>
	</column>
	<constraint name="status_report_status_pkey" type="pk-constr" table="public.status_report_status">
		<columns names="status" ref-type="src-columns"/>
	</constraint>
</table>

<table name="status_report_type">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="380" y="4160"/>
	<column name="type_report" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="name">
		<type name="character varying" length="100"/>
	</column>
	<constraint name="status_report_type_pkey" type="pk-constr" table="public.status_report_type">
		<columns names="type_report" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sub_compartment">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="720" y="4160"/>
	<column name="sub_compt_code">
		<type name="character varying" length="10"/>
	</column>
	<column name="compt_code">
		<type name="character varying" length="10"/>
	</column>
	<column name="area">
		<type name="double precision" length="0"/>
	</column>
	<column name="commune_code">
		<type name="integer" length="0"/>
	</column>
	<column name="geom">
		<type name="geometry" length="0"/>
	</column>
</table>

<table name="tree_specie">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1020" y="4160"/>
	<column name="tree_spec_code" not-null="true">
		<type name="numeric" length="4" precision="0"/>
		<comment><![CDATA[The code of  the tree specie]]></comment>
	</column>
	<column name="tree_spec_verna">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Vernacular name of the tree specie]]></comment>
	</column>
	<column name="tree_spec_abbr">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Abbreviation of the tree specie]]></comment>
	</column>
	<column name="tree_spec_latin">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Scientific name of the tree specie]]></comment>
	</column>
	<column name="geo_distribution">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Geographic distribution of the tree specie]]></comment>
	</column>
	<column name="age_class">
		<type name="numeric" length="2" precision="0"/>
		<comment><![CDATA[Number of year for age class of the tree specie]]></comment>
	</column>
	<column name="source">
		<type name="character varying" length="100"/>
		<comment><![CDATA[The source of the definition]]></comment>
	</column>
	<column name="special_product" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<constraint name="tree_specie_pk" type="pk-constr" table="public.tree_specie">
		<columns names="tree_spec_code" ref-type="src-columns"/>
	</constraint>
</table>

<table name="user_per_loc">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1340" y="4160"/>
	<column name="user_id">
		<type name="integer" length="0"/>
	</column>
	<column name="permision_id">
		<type name="integer" length="0"/>
	</column>
	<column name="location_id">
		<type name="integer" length="0"/>
	</column>
	<column name="level">
		<type name="numeric" length="1" precision="0"/>
	</column>
</table>

<table name="user_role">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="4380"/>
	<column name="id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="role_id">
		<type name="integer" length="0"/>
	</column>
	<column name="user_id">
		<type name="integer" length="0"/>
	</column>
	<constraint name="pk_user_role" type="pk-constr" table="public.user_role">
		<columns names="id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="user_role_loc">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="360" y="4380"/>
	<column name="user_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="role_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="location_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="level" not-null="true">
		<type name="numeric" length="1" precision="0"/>
	</column>
	<column name="actor_id">
		<type name="character varying" length="200"/>
	</column>
	<constraint name="user_role_loc_pkey" type="pk-constr" table="public.user_role_loc">
		<columns names="user_id,role_id,location_id,level" ref-type="src-columns"/>
	</constraint>
</table>

<table name="users">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="640" y="4380"/>
	<column name="user_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="user_name">
		<type name="character varying" length="30"/>
	</column>
	<column name="full_name">
		<type name="character varying" length="100"/>
	</column>
	<column name="tel">
		<type name="character varying" length="20"/>
	</column>
	<column name="email">
		<type name="character varying" length="50"/>
	</column>
	<column name="created_date">
		<type name="date" length="0"/>
	</column>
	<column name="modify_date">
		<type name="date" length="0"/>
	</column>
	<column name="address">
		<type name="character varying" length="200"/>
	</column>
	<column name="password">
		<type name="character varying" length="200"/>
	</column>
	<column name="status">
		<type name="integer" length="0"/>
	</column>
	<column name="department_id">
		<type name="integer" length="0"/>
	</column>
	<constraint name="pk_users" type="pk-constr" table="public.users">
		<columns names="user_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="frms_version">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1000" y="4380"/>
	<column name="datamodel_version">
		<type name="integer" length="0"/>
	</column>
	<column name="client_version">
		<type name="character varying" length="16"/>
	</column>
</table>

<function name="_frms_plot_history_before_insert"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN NEW.year_approval := date_part('year', NEW.dateapproval); RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_plot_history_before_update_dateapproval"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN NEW.year_approval := date_part('year', NEW.dateapproval); RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_plot_after_update_forest_owner"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN UPDATE plot SET actor_type_code = (SELECT actor_type_code FROM forest_actor WHERE commune_code= NEW.commune_code AND actor_id = NEW.actor_id) WHERE plot_uuid = NEW.plot_uuid AND EXISTS (SELECT actor_type_code FROM forest_actor WHERE commune_code= NEW.commune_code AND actor_id = NEW.actor_id); RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_plot_before_insert"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_forest_monitoring_after_delete"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ DECLARE BEGIN UPDATE plot SET change_type_id = null, date_time = null, area_affected = null, volume_affected = null, stems_no_affected = null, method_plantation = null, density_wood = null, density_bamboo = null, stems_no_thin = null, stems_no_bamboo_thin = null, desc_monitor = null, change_type_id_last = null WHERE plot.commune_code = OLD.commune_code AND plot.compt_code = OLD.compt_code AND  plot.sub_compt_code = OLD.sub_compt_code AND plot.plot_code = OLD.plot_code; DELETE FROM plot_history WHERE plot_history.plot_history_uuid = OLD.plot_history_uuid; RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_plot_before_update"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN NEW.date_time := LOCALTIMESTAMP(0); NEW.ts_modified := LOCALTIMESTAMP; RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_plot_history_before_update"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN NEW.ts_modified := LOCALTIMESTAMP; RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_forest_actor_before_update"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN NEW.ts_modified := LOCALTIMESTAMP; RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_forest_monitoring_before_update"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN NEW.ts_modified := LOCALTIMESTAMP; RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_forest_actor_after_update_actor_type_code"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN UPDATE plot SET actor_type_code = NEW.actor_type_code WHERE commune_code= NEW.commune_code AND actor_id = NEW.actor_id; RETURN NEW; END; ]]></definition>
</function>

<function name="_formis_insert_plot_history"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="uuid" length="1"/>
	</return-type>
	<parameter name="plot_uuid_param">
		<type name="uuid" length="0"/>
	</parameter>
	<parameter name="dateapproval_param">
		<type name="timestamp" length="0"/>
	</parameter>
	<parameter name="change_type_id_param">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="forest_use_sit_code_param">
		<type name="numeric" length="0"/>
	</parameter>
	<parameter name="forest_use_sit_code_after_param">
		<type name="numeric" length="0"/>
	</parameter>
	<parameter name="forest_func_sub_code_param">
		<type name="numeric" length="0"/>
	</parameter>
	<parameter name="forest_func_sub_code_after_param">
		<type name="numeric" length="0"/>
	</parameter>
	<definition><![CDATA[ DECLARE new_history_uuid uuid; BEGIN INSERT INTO plot_history( plot_uuid, plot_code, sub_compt_code, compt_code, commune_code, parcel_code, map_sheet, actor_id, actor_id_conflict, actor_id_prot, actor_type_code, tree_spec_code, "desc", village, area, forest_org_code, forest_type_code, planting_year, avg_year_canopy, p_forest_org_code, plant_state_code, volume_per_ha, stem_per_ha, volume_per_plot, stem_per_plot, site_cond_code, conflict_sit_code, land_use_cert_code, land_use_terune, prot_contr_code, nar_for_org_code, old_plot_code, pos_status_code, geom, datemodify, change_type_id, forest_use_sit_code, forest_use_sit_code_after, forest_func_sub_code, forest_func_sub_code_after, dateapproval) SELECT plot_uuid, plot_code, sub_compt_code, compt_code, commune_code, parcel_code, map_sheet, actor_id, actor_id_conflict, actor_id_prot, actor_type_code, tree_spec_code, "desc", village, area, forest_org_code, forest_type_code, planting_year, avg_year_canopy, p_forest_org_code, plant_state_code, volume_per_ha, stem_per_ha, volume_per_plot, stem_per_plot, site_cond_code, conflict_sit_code, land_use_cert_code, land_use_terune, prot_contr_code, nar_for_org_code, old_plot_code, pos_status_code, geom, date_time, change_type_id_param, forest_use_sit_code_param, forest_use_sit_code_after_param, forest_func_sub_code_param, forest_func_sub_code_after_param, dateapproval_param FROM plot WHERE plot_uuid = plot_uuid_param RETURNING plot_history_uuid INTO new_history_uuid; RETURN new_history_uuid; END ]]></definition>
</function>

<function name="_formis_insert_plot_history"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="1"/>
	</return-type>
	<parameter name="plot_uuid_param">
		<type name="uuid" length="0"/>
	</parameter>
	<parameter name="dateapproval_param">
		<type name="timestamp" length="0"/>
	</parameter>
	<definition><![CDATA[ BEGIN INSERT INTO plot_history( plot_uuid, plot_code, sub_compt_code, compt_code, commune_code, parcel_code, map_sheet, actor_id, actor_id_conflict, actor_id_prot, actor_type_code, tree_spec_code, "desc", village, area, forest_org_code, forest_type_code, planting_year, avg_year_canopy, p_forest_org_code, plant_state_code, volume_per_ha, stem_per_ha, volume_per_plot, stem_per_plot, site_cond_code, forest_func_sub_code, conflict_sit_code, land_use_cert_code, land_use_terune, prot_contr_code, forest_use_sit_code, nar_for_org_code, old_plot_code, pos_status_code, forest_func_sub_code_after, forest_use_sit_code_after, geom, datemodify, dateapproval) SELECT plot_uuid, plot_code, sub_compt_code, compt_code, commune_code, parcel_code, map_sheet, actor_id, actor_id_conflict, actor_id_prot, actor_type_code, tree_spec_code, "desc", village, area, forest_org_code, forest_type_code, planting_year, avg_year_canopy, p_forest_org_code, plant_state_code, volume_per_ha, stem_per_ha, volume_per_plot, stem_per_plot, site_cond_code, forest_func_sub_code, conflict_sit_code, land_use_cert_code, land_use_terune, prot_contr_code, forest_use_sit_code, nar_for_org_code, old_plot_code, pos_status_code, forest_func_sub_code, forest_use_sit_code, geom, date_time, dateapproval_param FROM plot WHERE plot_uuid = plot_uuid_param; END ]]></definition>
</function>

<function name="_formis_insert_plot_history"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="1"/>
	</return-type>
	<parameter name="plot_uuid_param">
		<type name="uuid" length="0"/>
	</parameter>
	<definition><![CDATA[ BEGIN PERFORM _formis_insert_plot_history(plot_uuid, date_time) FROM plot WHERE plot_uuid = plot_uuid_param; END ]]></definition>
</function>

<function name="_frms_forest_monitoring_before_insert"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ DECLARE new_history_uuid uuid; BEGIN SELECT _formis_insert_plot_history( NEW.plot_uuid, NEW.date_time, NEW.change_type_id, NEW.forest_use_sit_code, NEW.forest_use_sit_code_after, NEW.forest_func_sub_code, NEW.forest_func_sub_code_after) INTO new_history_uuid; NEW.plot_history_uuid := new_history_uuid; RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_forest_monitoring_after_update"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN UPDATE plot_history SET dateapproval = NEW.date_time, change_type_id = NEW.change_type_id, actor_id = NEW.actor_id_after, actor_type_code = NEW.actor_type_code_after, land_use_cert_code = NEW.land_use_cert_code_after, conflict_sit_code = NEW.conflict_sit_code_after, forest_use_sit_code_after = NEW.forest_use_sit_code_after, forest_func_sub_code_after = NEW.forest_func_sub_code_after, forest_org_code = NEW.forest_org_code_after, p_forest_org_code = NEW.p_forest_org_code_after, forest_type_code = NEW.forest_type_code_after, site_cond_code = NEW.site_cond_code_after, nar_for_org_code = NEW.nar_for_org_code_after, plant_state_code = NEW.plant_state_code_after, tree_spec_code = NEW.tree_spec_code_after WHERE plot_history_uuid = NEW.plot_history_uuid; RETURN NEW; END; ]]></definition>
</function>

<function name="_frms_plot_after_update_admin_fields"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[ BEGIN IF  NEW.area IS DISTINCT FROM OLD.area OR NEW.village IS DISTINCT FROM OLD.village OR NEW.map_sheet IS DISTINCT FROM OLD.map_sheet OR NEW.parcel_code IS DISTINCT FROM OLD.parcel_code OR NEW.plot_code IS DISTINCT FROM OLD.plot_code OR NEW."desc" IS DISTINCT FROM OLD."desc" OR NOT ST_EQUALS(NEW.geom, OLD.geom) THEN PERFORM _formis_insert_plot_history(NEW.plot_uuid); IF (NEW.commune_code = OLD.commune_code) AND (NEW.compt_code = OLD.compt_code) AND (NEW.sub_compt_code = OLD.sub_compt_code) AND (NEW.plot_code != OLD.plot_code) THEN UPDATE plot_history h SET plot_code = NEW.plot_code WHERE h.plot_uuid = OLD.plot_uuid; UPDATE forest_monitoring m SET plot_code = NEW.plot_code WHERE m.plot_uuid = OLD.plot_uuid; END IF; END IF; RETURN NEW; END; ]]></definition>
</function>

<trigger name="frmstrigger_forest_monitoring_before_insert" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.forest_monitoring">
		<function signature="public._frms_forest_monitoring_before_insert()"/>
</trigger>

<trigger name="frmstrigger_forest_monitoring_after_update" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.forest_monitoring">
		<function signature="public._frms_forest_monitoring_after_update()"/>
</trigger>

<trigger name="frmstrigger_plot_history_before_insert" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.plot_history">
		<function signature="public._frms_plot_history_before_insert()"/>
</trigger>

<trigger name="frmstrigger_plot_history_before_update_dateapproval" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.plot_history">
		<function signature="public._frms_plot_history_before_update_dateapproval()"/>
</trigger>

<trigger name="frmstrigger_plot_after_update_forest_owner" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.plot">
		<function signature="public._frms_plot_after_update_forest_owner()"/>
</trigger>

<trigger name="frmstrigger_plot_before_insert" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.plot">
		<function signature="public._frms_plot_before_insert()"/>
</trigger>

<trigger name="frmstrigger_forest_monitoring_after_delete" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="public.forest_monitoring">
		<function signature="public._frms_forest_monitoring_after_delete()"/>
</trigger>

<trigger name="frmstrigger_forest_actor_after_update_actor_type_code" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.forest_actor">
		<function signature="public._frms_forest_actor_after_update_actor_type_code()"/>
</trigger>

<trigger name="frmstrigger_plot_before_update" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="public.plot">
		<function signature="public._frms_plot_before_update()"/>
</trigger>

<trigger name="frmstrigger_plot_after_update_admin_fields" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.plot">
		<function signature="public._frms_plot_after_update_admin_fields()"/>
</trigger>

<trigger name="frmstrigger_forest_actor_before_update" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="public.forest_actor">
		<function signature="public._frms_forest_actor_before_update()"/>
</trigger>

<trigger name="frmstrigger_plot_history_before_update" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="public.plot_history">
		<function signature="public._frms_plot_history_before_update()"/>
</trigger>

<trigger name="frmstrigger_forest_monitoring_before_update" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="public.forest_monitoring">
		<function signature="public._frms_forest_monitoring_before_update()"/>
</trigger>

<function name="_formis_revert_plot_history"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="1"/>
	</return-type>
	<parameter name="history_uuid">
		<type name="uuid" length="0"/>
	</parameter>
	<definition><![CDATA[ DECLARE plot_uuid_current uuid; dateapproval_current timestamp without time zone; BEGIN  select h.dateapproval, h.plot_uuid into dateapproval_current, plot_uuid_current from plot_history h where h.plot_history_uuid = history_uuid;  delete from forest_monitoring fm where fm.plot_uuid = plot_uuid_current and fm.date_time > dateapproval_current;  delete from plot_history ph where ph.plot_uuid = plot_uuid_current and ph.dateapproval > dateapproval_current;  if not exists (select 1 from plot p where p.plot_uuid = plot_uuid_current) then insert into plot ( plot_uuid, plot_code, sub_compt_code, compt_code, commune_code) select h.plot_uuid, h.plot_code, h.sub_compt_code, h.compt_code, h.commune_code from plot_history h where h.plot_history_uuid = history_uuid; end if;  alter table plot disable trigger frmstrigger_plot_after_update_admin_fields; update plot p set ( plot_code, sub_compt_code, compt_code, commune_code, parcel_code, map_sheet, village, area, forest_org_code, forest_type_code, planting_year, avg_year_canopy, p_forest_org_code, plant_state_code, volume_per_ha, stem_per_ha, volume_per_plot, stem_per_plot, site_cond_code, forest_func_sub_code, conflict_sit_code, land_use_cert_code, land_use_terune, prot_contr_code, forest_use_sit_code, nar_for_org_code, old_plot_code, pos_status_code, geom, change_type_id, change_type_id_last, date_time, actor_id,actor_id_conflict,actor_id_prot,actor_type_code,tree_spec_code ) = ( h.plot_code, h.sub_compt_code, h.compt_code, h.commune_code, h.parcel_code, h.map_sheet, h.village, h.area, h.forest_org_code, h.forest_type_code, h.planting_year, h.avg_year_canopy, h.p_forest_org_code, h.plant_state_code, h.volume_per_ha, h.stem_per_ha, h.volume_per_plot, h.stem_per_plot, h.site_cond_code, h.forest_func_sub_code_after, h.conflict_sit_code, h.land_use_cert_code, h.land_use_terune, h.prot_contr_code, h.forest_use_sit_code_after, h.nar_for_org_code, h.old_plot_code, h.pos_status_code, h.geom, (select fm.change_type_id from forest_monitoring fm, plot_history ph where fm.plot_uuid = p.plot_uuid and ph.plot_history_uuid = fm.plot_history_uuid order by ph.datemodify desc limit 1), h.change_type_id_last, null, h.actor_id,h.actor_id_conflict,h.actor_id_prot,h.actor_type_code,h.tree_spec_code ) from plot_history h where p.plot_uuid = plot_uuid_current and h.plot_history_uuid = history_uuid; alter table plot enable trigger frmstrigger_plot_after_update_admin_fields; delete from plot where ((commune_code,compt_code,sub_compt_code,plot_code)) in ( SELECT DISTINCT T2.commune_code commune_code2, T2.compt_code compt_code2, T2.sub_compt_code sub_compt_code2, T2.plot_code plot_code2 FROM (SELECT * FROM plot WHERE plot_uuid = ( select h1.plot_uuid from plot_history h1 where h1.plot_history_uuid=history_uuid)) T1 LEFT JOIN (SELECT * FROM plot WHERE commune_code in ( select h1.commune_code from plot_history h1 where h1.plot_history_uuid=history_uuid)) T2 ON ST_Overlaps(T1.geom, T2.geom) = 't' WHERE T1.plot_code != T2.plot_code and T1.compt_code = t2.compt_code and T1.sub_compt_code = T2.sub_compt_code AND ST_IsValid(T1.geom) AND ST_IsValid(T2.geom) AND (ST_Area(ST_Intersection(T1.geom,T2.geom))/ST_Area(T2.geom)>0.5)); END; ]]></definition>
</function>

<function name="_formis_cover_area"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_cover_area_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql            	text; sql_execute    	text; sql_distinct  	 text; result         	_formis_cover_area_form; area_name      	name; tong_dt_cr     	FLOAT; tong_dt        	FLOAT; dt_n3lr        	FLOAT; dt_tn          	FLOAT; ng_rtn         	FLOAT; ng_rt          	FLOAT; mdsd_dd        	FLOAT; mdsd_ph        	FLOAT; mdsd_sx        	FLOAT; dochephu       	FLOAT; rec            	record; rec2           	record; n3lr_tn			FLOAT; -- rung tu nhien ngoai 3 loai rung
 n3lr_sx			FLOAT; -- rung san xuat ngoai 3 loai rung
 new_plantation	FLOAT;-- rung trong moi chua co tru luong
 BEGIN DROP TABLE IF EXISTS calculate_table;  sql := '	CREATE TEMPORARY TABLE calculate_table AS SELECT SUM(T1.area) area, T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code,T1.site_cond_code,T1.forest_org_code,';  IF depart_level = 3 THEN            -- commune level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || 'T1.compt_code as code	FROM plot T1 '; sql := sql || ' WHERE  T1.commune_code=' || depart_id || ''; ELSE sql:=sql||' T1.compt_code as code	FROM plot_history T1 ';  sql := sql || '	INNER JOIN ( SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history WHERE commune_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_code,sub_compt_code,compt_code,commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';  sql := sql || ' WHERE  T1.commune_code=' || depart_id || ''; END IF;  sql_distinct:='select distinct(compt_code) as code, compt_code as name, 0 as area from plot where commune_code='  ||depart_id || ' order by compt_code'; ELSIF depart_level = 2 THEN                                                   -- district level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || 'T1.commune_code as code	FROM plot T1 '; sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql := sql || ' WHERE  T4.district_code=' || depart_id; ELSE sql:=sql||' T1.commune_code as code	FROM plot_history T1 '; sql := sql || '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code	WHERE commune.district_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' 	GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' WHERE T4.district_code=' || depart_id || ''; END IF;  sql_distinct:='select commune_code as code, name as name,area from commune where district_code = '||depart_id ||' order by name'; ELSIF depart_level = 1 THEN                                                   -- province level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:=sql||' T4.district_code as code	FROM plot T1 '; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id; ELSE sql:=sql||' T4.district_code as code	FROM plot_history T1 '; sql := sql || '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code INNER JOIN district ON commune.district_code=district.district_code WHERE district.province_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE  T5.province_code=' || depart_id || ''; END IF;  sql_distinct:='select district_code as code, name as name,area from district where province_code = '||depart_id ||' order by name'; ELSE  sql := sql || '	INNER JOIN (	SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history' || 'WHERE  (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_code,sub_compt_code,compt_code,commune_code ) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';  END IF;  sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.forest_org_code,code'; RAISE NOTICE 'sql: %', sql; EXECUTE sql;  FOR rec IN EXECUTE sql_distinct LOOP result.area_name = rec.name; result.dt_tn = rec.area; tong_dt_cr 		:= 0; tong_dt 		:= 0; dt_n3lr 		:= 0; ng_rtn 			:= 0; ng_rt 			:= 0; mdsd_dd 		:=0; mdsd_ph 		:=0; mdsd_sx 		:=0; n3lr_tn			:=0; n3lr_sx			:=0; new_plantation	:=0; FOR rec2 IN SELECT * FROM calculate_table LOOP IF rec2.code = rec.code THEN IF (rec2.forest_type_code >= 1 AND rec2.forest_type_code <= 59) OR (rec2.forest_type_code >= 94 AND rec2.forest_type_code <= 98) THEN IF rec2.forest_use_sit_code = 0 THEN IF 	rec2.forest_org_code = 1 THEN ng_rtn := ng_rtn + rec2.area; -- rung tu nhien
 IF rec2.forest_func_sub_code >= 1 and rec2.forest_func_sub_code <= 4 THEN mdsd_ph := mdsd_ph + rec2.area; -- rung phong ho
 ELSIF rec2.forest_func_sub_code >= 5 and rec2.forest_func_sub_code <= 8 THEN mdsd_dd := mdsd_dd + rec2.area;-- rung dac dung
 ELSIF rec2.forest_func_sub_code >= 9 and rec2.forest_func_sub_code <= 12 THEN mdsd_sx := mdsd_sx + rec2.area;-- rung san xuat
 END IF; ELSIF 	rec2.forest_org_code=2 THEN IF rec2.forest_func_sub_code >= 1 and rec2.forest_func_sub_code <= 4 THEN mdsd_ph := mdsd_ph + rec2.area; -- rung phong ho
 ELSIF rec2.forest_func_sub_code >= 5 and rec2.forest_func_sub_code <= 8 THEN mdsd_dd := mdsd_dd + rec2.area;-- rung dac dung
 ELSIF rec2.forest_func_sub_code >= 9 and rec2.forest_func_sub_code <= 12 THEN mdsd_sx := mdsd_sx + rec2.area;-- rung san xuat
 END IF; ELSIF 	rec2.forest_org_code=3 THEN  END IF; ELSIF rec2.forest_use_sit_code = 1 THEN IF 		rec2.forest_org_code=1 THEN n3lr_tn:= n3lr_tn + rec2.area; ELSIF 	rec2.forest_org_code=2 THEN n3lr_sx:= n3lr_sx + rec2.area; ELSIF 	rec2.forest_org_code=3 THEN  END IF; END IF; ELSIF rec2.forest_type_code >= 60 AND rec2.forest_type_code <= 71 	THEN IF rec2.forest_use_sit_code = 0 THEN  IF 		rec2.forest_org_code=1 THEN IF rec2.forest_func_sub_code >= 1 and rec2.forest_func_sub_code <= 4 THEN mdsd_ph := mdsd_ph + rec2.area; -- rung phong ho
 ELSIF rec2.forest_func_sub_code >= 5 and rec2.forest_func_sub_code <= 8 THEN mdsd_dd := mdsd_dd + rec2.area;-- rung dac dung
 ELSIF rec2.forest_func_sub_code >= 9 and rec2.forest_func_sub_code <= 12 THEN mdsd_sx := mdsd_sx + rec2.area;-- rung san xuat
 END IF; ELSIF 	rec2.forest_org_code=2 THEN ng_rt := ng_rt + rec2.area;-- rung trong
 IF rec2.forest_func_sub_code >= 1 and rec2.forest_func_sub_code <= 4 THEN mdsd_ph := mdsd_ph + rec2.area; -- rung phong ho
 ELSIF rec2.forest_func_sub_code >= 5 and rec2.forest_func_sub_code <= 8 THEN mdsd_dd := mdsd_dd + rec2.area;-- rung dac dung
 ELSIF rec2.forest_func_sub_code >= 9 and rec2.forest_func_sub_code <= 12 THEN mdsd_sx := mdsd_sx + rec2.area;-- rung san xuat
 END IF; ELSIF 	rec2.forest_org_code=3 THEN  END IF; ELSIF rec2.forest_use_sit_code = 1 THEN IF 		rec2.forest_org_code=1 THEN n3lr_tn:= n3lr_tn + rec2.area; ELSIF 	rec2.forest_org_code=2 THEN n3lr_sx:= n3lr_sx + rec2.area; ELSIF 	rec2.forest_org_code=3 THEN  END IF; END IF; ELSIF rec2.forest_type_code >= 72 AND rec2.forest_type_code <= 77	THEN IF 		rec2.forest_org_code=3  and rec2.forest_use_sit_code in (0,1) THEN new_plantation:=new_plantation+rec2.area;--rung trong chua co tru luong
 END IF;  END IF; END IF; END LOOP; tong_dt := ng_rtn + ng_rt; dt_n3lr:=n3lr_tn+n3lr_sx; tong_dt_cr := tong_dt + dt_n3lr +new_plantation; IF depart_level = 3 then dochephu = 0; ELSE dochephu = tong_dt_cr * 100 / dt_tn; END IF; result.tong_dt_cr = tong_dt_cr; result.tong_dt = tong_dt; result.dt_n3lr = dt_n3lr; result.ng_rtn = ng_rtn; result.ng_rt = ng_rt; result.mdsd_dd = mdsd_dd; result.mdsd_ph = mdsd_ph; result.mdsd_sx = mdsd_sx; result.n3lr_tn = n3lr_tn; result.n3lr_sx = n3lr_sx; result.new_plantation = new_plantation; RETURN NEXT result; END LOOP; RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_actor_type"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_actor_type_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql text; sql_query text; result  _formis_actor_type_form; rec _formis_config_report; rec_result record; hgd numeric; cd numeric; ubndx numeric; bqlrph numeric; ltqd numeric; ctln numeric; dn_nhanuoc numeric; dntn numeric; dnnn numeric; bqlrdd numeric; dvvt numeric; khac numeric; tong_dt numeric; BEGIN DROP TABLE IF EXISTS calculate_table; sql:= '	CREATE TEMPORARY TABLE calculate_table AS SELECT'; IF report_type = '2a' OR report_type ='2' THEN sql := sql || '	 SUM(T1.area) area'; ELSIF report_type = '2a_vol' OR report_type ='2_vol' THEN sql := sql || '	 SUM(T1.volume_per_plot) area' ; END IF; IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || ' ,T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.volume_per_ha,T1.site_cond_code, T7.actor_type_code, T1.forest_org_code,T1.nar_for_org_code,'; sql:= sql || ' ( SELECT array_to_string(array_agg(ts.tree_spec_code), ''' || '+' || '''' || ') AS array_to_string FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code) AS tree_spec_code,' ; sql:= sql || ' ( SELECT ts.special_product FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code limit 1) AS special_product, T1.plant_state_code FROM plot T1 ';  ELSE sql:= sql || ',T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.volume_per_ha,T1.site_cond_code, T1.actor_type_code,T1.forest_org_code, T1.tree_spec_code, T1.nar_for_org_code, T9.special_product,T1.plant_state_code FROM plot_history T1 '; END IF;   IF depart_level = 3	THEN -- commune level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN  sql := sql || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql := sql|| ' WHERE T1.commune_code=' || depart_id || ' and T1.actor_id is not null '; ELSE sql :=sql || ' INNER JOIN (SELECT MAX(datemodify) datemodify, plot_uuid FROM plot_history WHERE commune_code=' || 	depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || '    GROUP BY plot_uuid) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify = T2.datemodify'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text';  sql :=sql || ' WHERE  T1.commune_code=' || depart_id || ''; END IF; ELSIF depart_level = 2	THEN	-- district level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql := sql || ' WHERE  T4.district_code=' || depart_id; ELSE sql :=sql || ' INNER JOIN (SELECT MAX(datemodify) datemodify, plot_uuid FROM plot_history INNER JOIN commune ON plot_history.commune_code = commune.commune_code WHERE commune.district_code=' || 	depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_uuid, plot_history.commune_code) T2 ON T1.plot_uuid=T2.plot_uuid AND T1.datemodify = T2.datemodify'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql :=sql	|| ' 	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql :=sql	|| ' 	WHERE  T4.district_code=' || depart_id || ''; END IF; ELSIF depart_level = 1	THEN -- province level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id;  ELSE sql :=sql || ' INNER JOIN (SELECT MAX(datemodify) datemodify,plot_history.plot_uuid FROM plot_history INNER JOIN commune ON plot_history.commune_code = commune.commune_code INNER JOIN district ON commune.district_code = district.district_code WHERE district.province_code=' || 	depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_uuid, plot_history.commune_code) T2 ON T1.plot_uuid=T2.plot_uuid AND T1.datemodify=T2.datemodify';  sql :=sql	|| '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql :=sql	|| ' 	WHERE  T5.province_code=' || 	depart_id || 	''; END IF; ELSE IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'sql: %',sql; ELSE sql :=sql || ' INNER JOIN (SELECT  MAX(datemodify) datemodify,plot_uuid FROM plot_history ' || 'WHERE  (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || 'GROUP BY plot_uuid ) T2 ON T1.plot_uuid=T2.plot_uuid AND T1.datemodify=T2.datemodify'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; END IF;  END IF; IF report_type = '2a' OR report_type = '2a_vol' THEN sql :=sql	|| ' AND T1.forest_use_sit_code = 0'; END IF; IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' GROUP BY T1.commune_code, T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.volume_per_ha, tree_spec_code, special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code, T7.actor_type_code' ; ELSE sql := sql || ' GROUP BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.volume_per_ha, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code, T1.actor_type_code'; END IF; RAISE NOTICE 'sql: %',sql; EXECUTE sql; FOR rec IN SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = 'forest_type' ORDER BY row_order LOOP result.unit = rec.unit; result.forest_type = rec.name; result.code = rec.code; hgd :=0; cd :=0; ubndx :=0; bqlrph :=0; ltqd :=0; ctln :=0; dntn :=0; dnnn :=0; khac:=0; bqlrdd :=0; dvvt :=0; tong_dt :=0; dn_nhanuoc:=0; FOR rec_result in select * from _formis_cal_forest2(rec,'actor_type_code') as (actor_type_code  numeric, area numeric) LOOP IF rec_result.actor_type_code = 1 then hgd:=rec_result.area; tong_dt:=tong_dt+rec_result.area; ELSIF rec_result.actor_type_code = 2 then tong_dt:=tong_dt+rec_result.area; cd:=rec_result.area; ELSIF rec_result.actor_type_code = 3 then tong_dt:=tong_dt+rec_result.area; ubndx:=rec_result.area; ELSIF rec_result.actor_type_code = 4 then tong_dt:=tong_dt+rec_result.area; bqlrph:=rec_result.area; ELSIF rec_result.actor_type_code = 5 then tong_dt:=tong_dt+rec_result.area; ltqd:=rec_result.area; ELSIF rec_result.actor_type_code = 6 then tong_dt:=tong_dt+rec_result.area; ctln:=rec_result.area; ELSIF rec_result.actor_type_code = 7 then tong_dt:=tong_dt+rec_result.area; dntn:=rec_result.area; ELSIF rec_result.actor_type_code = 8 then tong_dt:=tong_dt+rec_result.area; dnnn:=rec_result.area; ELSIF rec_result.actor_type_code = 9 then tong_dt:=tong_dt+rec_result.area; khac:=rec_result.area; ELSIF rec_result.actor_type_code = 10 then tong_dt:=tong_dt+rec_result.area; bqlrdd:=rec_result.area; ELSIF rec_result.actor_type_code = 11 then tong_dt:=tong_dt+rec_result.area; dvvt:=rec_result.area; ELSE END IF;  END LOOP; result.hgd= hgd; result.cd= cd; result.ubndx = ubndx; result.bqlrph= bqlrph; result.ltqd = ltqd; result.ctln = ctln; result.dntn = dntn; result.dnnn = dnnn; result.khac = khac; result.bqlrdd = bqlrdd; result.dvvt= dvvt; dn_nhanuoc=ltqd+ctln; result.dn_nhanuoc=dn_nhanuoc; result.tong_dt = tong_dt; return next result; END LOOP; return; END;  ]]></definition>
</function>

<function name="_formis_forest_func"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_area_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE cn                name; sql               text; sql2               text; result            _formis_area_form; rec               _formis_config_report; rec_result        record; rec_monitoring    record; tong_dt           numeric;                                -- Tong dien tich
 tong_dt_ln        numeric;                      -- Dien tich dat lam nghiep
 tong_dt_dd        numeric;                            -- Dien tich dac dung
 dd_vqg            numeric;                       -- Dien tich vuon quoc gia
 dd_kbttn          numeric;             -- Dien tich khu bao ton thien nhien
 dd_knc            numeric;             -- Dien tich khu nghien cuu khoa hoc
 dd_bvcq           numeric;                -- Dien tich khu bao ve canh quan
 tong_dt_ph        numeric;                            -- Dien tich phong ho
 ph_dn             numeric;                            -- Phong ho dau nguon
 ph_cg_cc          numeric;                   -- Phong ho chan gio, chan cat
 ph_cs             numeric;                            -- Phong ho chan song
 ph_bvmt           numeric;                    -- Phong ho bao ve moi truong
 sx                numeric;                                      -- San xuat
 nqh               numeric;                               -- Ngoai quy hoach
 tong_dt_3lr       numeric;                    -- Tong dien tich 3 loai rung
 tong_dt_3lr_nqh   numeric;  -- Tong dien tich 3 loai rung + ngoai quy hoach
 tong_dt_dau_nam   numeric;                        -- Tong dien tich dau nam
 rung_gl           numeric;                                   -- Rung go lon
 rung_gn           numeric;                                    --Rung go nho
 rung_tn           numeric;                                   -- Rung go nho
 rung_sxk          numeric;                            -- Rung san xuat khac
 change            numeric;                             -- Thay doi trong ky
 BEGIN DROP TABLE IF EXISTS calculate_table; DROP TABLE IF EXISTS calculate_table_history; sql := '	CREATE TEMPORARY TABLE calculate_table AS SELECT '; IF    report_type = '1a' OR report_type = '1b' OR report_type = '1c' OR report_type = '1' THEN sql := sql || ' SUM(T1.area) area' ; ELSIF    report_type = '1a_vol' OR report_type = '1b_vol' OR report_type = '1c_vol' OR report_type = '1_vol' THEN sql := sql || ' SUM(T1.volume_per_plot) area' ; END IF;    IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || ' ,T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.volume_per_ha,T1.site_cond_code,'; sql:= sql || ' ( SELECT array_to_string(array_agg(ts.tree_spec_code), ''' || '+' || '''' || ') AS array_to_string FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code) AS tree_spec_code,' ; sql:= sql || 'T1.forest_org_code,T1.nar_for_org_code, ( SELECT ts.special_product FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code limit 1) AS special_product, T1.plant_state_code FROM plot T1 ';  ELSE sql:= sql || ',T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.volume_per_ha,T1.site_cond_code,T1.tree_spec_code, T1.forest_org_code,T1.nar_for_org_code,T9.special_product,T1.plant_state_code'; sql:= sql || ' FROM plot_history T1 '; END IF;  IF depart_level = 3 THEN                                                    -- commune level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' WHERE T1.commune_code=' || depart_id; ELSE sql := sql || '	INNER JOIN ( SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history WHERE commune_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_code,sub_compt_code,compt_code,commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';  sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql := sql || ' WHERE T1.commune_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1)'; END IF;  ELSIF depart_level = 2 THEN IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql := sql || ' WHERE  T4.district_code=' || depart_id; ELSE sql := sql || '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code	WHERE commune.district_code=' || depart_id  || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))'  || ' GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';   sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql := sql || ' WHERE  T4.district_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1)'; END IF;  ELSIF depart_level = 1 THEN                                                   -- province level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'sql: %',sql; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id; ELSE sql := sql || '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code INNER JOIN district ON commune.district_code=district.district_code WHERE district.province_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text';  sql := sql || ' WHERE T5.province_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1)'; END IF;  ELSE IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'sql: %',sql; ELSE sql := sql || '	INNER JOIN (	SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history ' || 'WHERE  (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || 'GROUP BY plot_code,sub_compt_code,compt_code,commune_code ) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql:= sql || ' WHERE T1.forest_use_sit_code in (0,1)';  END IF;   END IF;  IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.volume_per_ha, tree_spec_code, special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code '; ELSE sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.volume_per_ha, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code '; END IF; RAISE NOTICE 'sql: %',sql; EXECUTE sql;  sql2 := '	CREATE TEMPORARY TABLE calculate_table_history AS SELECT '; IF    report_type = '1a' OR report_type = '1b' OR report_type = '1c' OR report_type = '1' THEN sql2 := sql2 || ' SUM(T1.area) area' ; ELSIF    report_type = '1a_vol' OR report_type = '1b_vol' OR report_type = '1c_vol' OR report_type = '1_vol' THEN sql2 := sql2 || ' SUM(T1.volume_per_plot) area' ; END IF;    IF CURRENT_DATE <= to_date (start_date, 'dd/MM/yyyy') THEN sql2:= sql2 || ' ,T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.volume_per_ha,T1.site_cond_code,'; sql2:= sql2 || ' ( SELECT array_to_string(array_agg(ts.tree_spec_code), ''' || '+' || '''' || ') AS array_to_string FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code) AS tree_spec_code,' ; sql2:= sql2 || 'T1.forest_org_code,T1.nar_for_org_code, ( SELECT ts.special_product FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code limit 1) AS special_product, T1.plant_state_code FROM plot T1 ';  ELSE sql2:= sql2 || ',T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.volume_per_ha,T1.site_cond_code,T1.tree_spec_code, T1.forest_org_code,T1.nar_for_org_code,T9.special_product,T1.plant_state_code'; sql2:= sql2 || ' FROM plot_history T1 '; END IF;  IF depart_level = 3 THEN                                                    -- commune level
 IF CURRENT_DATE <= to_date (start_date, 'dd/MM/yyyy') THEN sql2 := sql2 || ' WHERE T1.commune_code=' || depart_id; ELSE sql2 := sql2 || '	INNER JOIN ( SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history WHERE commune_code=' || depart_id || ' AND (dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_code,sub_compt_code,compt_code,commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';  sql2 := sql2 || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql2 := sql2 || ' WHERE T1.commune_code=' || depart_id; sql2:= sql2 || ' AND T1.forest_use_sit_code in (0,1)'; END IF;  ELSIF depart_level = 2 THEN IF CURRENT_DATE <= to_date (start_date, 'dd/MM/yyyy') THEN sql2 := sql2 || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql2 := sql2 || ' WHERE  T4.district_code=' || depart_id; ELSE sql2 := sql2 || '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code	WHERE commune.district_code=' || depart_id  || ' AND (dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))'  || ' GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';   sql2 := sql2 || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql2 := sql2 || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql2 := sql2 || ' WHERE  T4.district_code=' || depart_id; sql2:= sql2 || ' AND T1.forest_use_sit_code in (0,1)'; END IF;  ELSIF depart_level = 1 THEN                                                   -- province level
 IF CURRENT_DATE <= to_date (start_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'sql2: %',sql2; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id; ELSE sql2 := sql2 || '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code INNER JOIN district ON commune.district_code=district.district_code WHERE district.province_code=' || depart_id || ' AND (dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; sql2 := sql2 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql2 := sql2 || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text';  sql2 := sql2 || ' WHERE T5.province_code=' || depart_id; sql2:= sql2 || ' AND T1.forest_use_sit_code in (0,1)'; END IF;  ELSE IF CURRENT_DATE <= to_date (start_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'sql2: %',sql2; ELSE sql2 := sql2 || '	INNER JOIN (	SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history ' || 'WHERE  (dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || 'GROUP BY plot_code,sub_compt_code,compt_code,commune_code ) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; sql2 := sql2 || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql2:= sql2 || ' WHERE T1.forest_use_sit_code in (0,1)';  END IF;   END IF; IF CURRENT_DATE <= to_date (start_date, 'dd/MM/yyyy') THEN sql2 := sql2 || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.volume_per_ha, tree_spec_code, special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code '; ELSE sql2 := sql2 || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.volume_per_ha, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code '; END IF; RAISE NOTICE 'sql2: %',sql2; EXECUTE sql2;     FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = 'forest_type' ORDER BY row_order LOOP result.unit = rec.unit; result.forest_type = rec.name; result.code = rec.code; sx := 0; tong_dt := 0; tong_dt_ln := 0; tong_dt_dd := 0; dd_vqg := 0; dd_kbttn := 0; dd_knc := 0; dd_bvcq := 0; tong_dt_ph := 0; ph_dn := 0; ph_cg_cc := 0; ph_cs := 0; ph_bvmt := 0; sx := 0; nqh := 0; tong_dt_3lr := 0; tong_dt_3lr_nqh := 0; tong_dt_dau_nam := 0; rung_gl := 0; rung_gn := 0; rung_tn := 0; rung_sxk := 0; change := 0; RAISE NOTICE 'tree_specie_code : %,rec.code: %', rec.tree_specie_code, rec.code;  IF report_type = '1' THEN FOR rec_result IN SELECT * FROM _formis_cal_forest(rec,'forest_func_sub_code') AS (forest_func_sub_code  numeric, area numeric) LOOP IF rec_result.forest_func_sub_code = 1 THEN tong_dt:=tong_dt+rec_result.area; ph_dn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 2 THEN tong_dt:=tong_dt+rec_result.area; ph_cs:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 3 THEN tong_dt:=tong_dt+rec_result.area; ph_cg_cc:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 4 THEN tong_dt:=tong_dt+rec_result.area; ph_bvmt:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 5 THEN tong_dt:=tong_dt+rec_result.area; dd_vqg:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 6 THEN tong_dt:=tong_dt+rec_result.area; dd_kbttn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 7 THEN tong_dt:=tong_dt+rec_result.area; dd_knc:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 8 THEN tong_dt:=tong_dt+rec_result.area; dd_bvcq:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 9 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_gl:=rung_gl+rec_result.area; ELSIF rec_result.forest_func_sub_code = 10 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_gn:=rung_gn+rec_result.area; ELSIF rec_result.forest_func_sub_code = 11 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_tn:=rung_tn+rec_result.area; ELSIF rec_result.forest_func_sub_code = 12 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_sxk:=rung_sxk+rec_result.area; ELSE nqh:=nqh + rec_result.area;  END IF;  END LOOP; /* FOR rec_monitoring IN SELECT * FROM _formis_cal_monitoring_forest(rec,start_date,end_date,depart_id,depart_level ) AS (change_type_id  INT, area numeric) LOOP IF rec_monitoring.change_type_id in (6,21,41) THEN change:=change+rec_monitoring.area; ELSIF  rec_monitoring.change_type_id in (1,2,8,9,10,11,12,13,14,15,16,17,42) THEN --rec_monitoring.monitoring_type_code>=1 AND rec_monitoring.monitoring_type_code<=5 THEN
 change:=change-rec_monitoring.area; END IF; END LOOP; */  result.dd_vqg = dd_vqg; result.dd_kbttn = dd_kbttn; result.dd_knc = dd_knc; result.dd_bvcq = dd_bvcq; result.ph_dn = ph_dn; result.ph_cg_cc = ph_cg_cc; result.ph_cs = ph_cs; result.ph_bvmt = ph_bvmt; tong_dt_ph := ph_dn + ph_cg_cc + ph_cs + ph_bvmt; result.tong_dt_ph = tong_dt_ph; result.sx = sx; result.nqh = nqh;  tong_dt_dd = dd_vqg + dd_kbttn + dd_knc + dd_bvcq; result.tong_dt_dd = tong_dt_dd; tong_dt_ln = tong_dt_dd + sx + tong_dt_ph; result.tong_dt_ln = tong_dt_ln;  result.tong_dt = tong_dt; tong_dt_3lr = tong_dt_dd + tong_dt_ph + sx;  result.tong_dt_3lr = tong_dt_3lr; if rec.code in ('2000','2010','2020','2030','2050','2060') THEN tong_dt_3lr_nqh := tong_dt_3lr; result.tong_dt_dau_nam = _formis_cal_forest_begin_period(rec,true); ELSE result.tong_dt_dau_nam = _formis_cal_forest_begin_period(rec,false); tong_dt_3lr_nqh := tong_dt_3lr + nqh; END IF;  result.tong_dt_3lr_nqh = tong_dt_3lr_nqh; change = result.tong_dt_3lr_nqh - result.tong_dt_dau_nam; result.thay_doi = change; RAISE NOTICE 'CHANGE: %', change; RETURN NEXT result; ELSE FOR rec_result IN SELECT * FROM _formis_cal_forest(rec,'forest_func_sub_code') AS (forest_func_sub_code  numeric, area numeric) LOOP IF rec_result.forest_func_sub_code = 1 THEN ph_dn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 2 THEN ph_cs:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 3 THEN ph_cg_cc:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 4 THEN ph_bvmt:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 5 THEN dd_vqg:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 6 THEN dd_kbttn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 7 THEN dd_knc:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 8 THEN dd_bvcq:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 9 THEN sx:=sx+rec_result.area; rung_gl:=rung_gl+rec_result.area; ELSIF rec_result.forest_func_sub_code = 10 THEN sx:=sx+rec_result.area; rung_gn:=rung_gn+rec_result.area; ELSIF rec_result.forest_func_sub_code = 11 THEN sx:=sx+rec_result.area; rung_tn:=rung_tn+rec_result.area; ELSIF rec_result.forest_func_sub_code = 12 THEN sx:=sx+rec_result.area; rung_sxk:=rung_sxk+rec_result.area; ELSE nqh:=nqh + rec_result.area; END IF; END LOOP; result.dd_vqg = dd_vqg; result.dd_kbttn = dd_kbttn; result.dd_knc = dd_knc; result.dd_bvcq = dd_bvcq; result.ph_dn = ph_dn; result.ph_cg_cc = ph_cg_cc; result.ph_cs = ph_cs; result.ph_bvmt = ph_bvmt; tong_dt_ph := ph_dn + ph_cg_cc + ph_cs + ph_bvmt; result.tong_dt_ph = tong_dt_ph; result.sx = sx; result.nqh = nqh; tong_dt_dd = dd_vqg + dd_kbttn + dd_knc + dd_bvcq; result.tong_dt_dd = tong_dt_dd; tong_dt_ln = tong_dt_dd + sx + tong_dt_ph; result.tong_dt_ln = tong_dt_ln; tong_dt_3lr = tong_dt_dd + tong_dt_ph + sx; result.tong_dt_3lr = tong_dt_3lr; if rec.code in ('2000','2010','2020','2030','2050','2060') THEN tong_dt_3lr_nqh := tong_dt_3lr; tong_dt = tong_dt_ln; ELSE tong_dt_3lr_nqh := tong_dt_3lr + nqh; tong_dt = tong_dt_ln + nqh; END IF; result.tong_dt = tong_dt; result.tong_dt_3lr_nqh = tong_dt_3lr_nqh; result.rung_gl = rung_gl; result.rung_gn = rung_gn; result.rung_tn = rung_tn; result.rung_sxk = rung_sxk; RETURN NEXT result; END IF; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_owners"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_actor_type_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql          text; sql_query    text; result       _formis_actor_type_form; rec          _formis_config_report; rec_result   record; hgd          numeric; cd           numeric; ubndx        numeric; bqlrph       numeric; ltqd         numeric; ctln         numeric; dn_nhanuoc   numeric; dntn         numeric; dnnn         numeric; bqlrdd       numeric; dvvt         numeric; khac         numeric; tong_dt      numeric; BEGIN DROP TABLE IF EXISTS calculate_table; sql:= '	CREATE TEMPORARY TABLE calculate_table AS SELECT';  sql := sql || '	 SUM(T1.area) area';  IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || ' ,T1.actor_type_code, T1.land_use_cert_code, T1.forest_type_code,T1.conflict_sit_code,T1.forest_org_code,T1.forest_use_sit_code FROM plot T1 ';  ELSE sql:= sql || ',T1.actor_type_code, T1.land_use_cert_code, T1.forest_type_code,T1.conflict_sit_code,T1.forest_org_code,T1.forest_use_sit_code FROM plot_history T1 '; END IF;   IF depart_level = 3	THEN -- commune level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN  sql := sql || ' WHERE T1.commune_code=' || depart_id; ELSE sql :=sql	|| '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history WHERE commune_code=' || 	depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' 	GROUP BY plot_code,sub_compt_code,compt_code,commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';   sql :=sql	|| ' 	WHERE  T1.commune_code=' || depart_id || ''; END IF; ELSIF depart_level = 2	THEN	-- district level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql := sql || ' WHERE  T4.district_code=' || depart_id; ELSE sql :=sql	|| '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code	WHERE commune.district_code=' || 	depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' 	GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';  sql :=sql	|| ' 	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql :=sql	|| ' 	WHERE  T4.district_code=' || depart_id || ''; END IF; ELSIF depart_level = 1	THEN -- province level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id;  ELSE sql :=sql	|| '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code INNER JOIN district ON commune.district_code=district.district_code WHERE district.province_code=' || 	depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' 	GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';  sql :=sql	|| '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code';  sql :=sql	|| ' 	WHERE  T5.province_code=' || 	depart_id || 	''; END IF; ELSE IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'sql: %',sql; ELSE sql :=sql	|| '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history ' || 'WHERE  (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || 'GROUP BY plot_code,sub_compt_code,compt_code,commune_code ) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; END IF;  END IF;  sql :=sql	|| ' AND T1.forest_use_sit_code = 0';  IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' GROUP  BY T1.actor_type_code, T1.land_use_cert_code, T1.forest_type_code, T1.conflict_sit_code, T1.forest_org_code, T1.forest_use_sit_code' ; ELSE sql := sql 	|| ' 	GROUP  BY T1.actor_type_code, T1.land_use_cert_code, T1.forest_type_code, T1.conflict_sit_code,T1.forest_org_code,T1.forest_use_sit_code';  END IF; EXECUTE sql; RAISE NOTICE 'sql: %',sql;   FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = '5a' ORDER BY row_order LOOP result.unit = rec.unit; result.forest_type = rec.name; result.code = rec.code; RAISE NOTICE 'sql_query: %', rec.code; hgd := 0; cd := 0; ubndx := 0; bqlrph := 0; ltqd := 0; ctln := 0; dntn := 0; dnnn := 0; khac := 0; bqlrdd := 0; dvvt := 0; tong_dt := 0; dn_nhanuoc := 0; FOR rec_result IN SELECT * FROM _formis_cal_forest(rec,'actor_type_code') AS (forest_func_sub_code  numeric, area numeric) LOOP IF rec_result.forest_func_sub_code = 1 THEN hgd:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 2 THEN cd:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 3 THEN ubndx:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 4 THEN bqlrph:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 5 THEN ltqd:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 6 THEN ctln:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 7 THEN dntn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 8 THEN dnnn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 9 THEN khac:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 10 THEN bqlrdd:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 11 THEN dvvt:=rec_result.area; ELSE  END IF; END LOOP; result.hgd = hgd; result.cd = cd; result.ubndx = ubndx; result.bqlrph = bqlrph; result.ltqd = ltqd; result.ctln = ctln; result.dntn = dntn; result.dnnn = dnnn; result.khac = khac; result.bqlrdd = bqlrdd; result.dvvt = dvvt; dn_nhanuoc = ltqd + ctln; result.dn_nhanuoc = dn_nhanuoc; tong_dt = hgd + cd + ubndx + bqlrph + ltqd + ctln + dntn + dnnn + khac + bqlrdd + dvvt; result.tong_dt = tong_dt; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_get_tree_spec_abbr"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="IMMUTABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<parameter name="tree_spec_code">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[ SELECT string_agg( (SELECT ts.tree_spec_verna FROM tree_specie ts WHERE pts.tree_spec_code = ts.tree_spec_code::text), '+') FROM (SELECT regexp_split_to_table(tree_spec_code, '\+') AS tree_spec_code) pts ]]></definition>
</function>

<function name="_formis_get_tree_spec_code_by_abbr"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="IMMUTABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<parameter name="abbr">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[ DECLARE sql            text; rec text; result text; tmp text; count integer; BEGIN sql := 'select regexp_split_to_table( ''' || abbr || ''' ,E''' || '\\+' || ''')' ; result := ''; count := 0; FOR rec IN  execute sql LOOP sql := 'select tree_spec_code from tree_specie where lower(tree_spec_abbr) = lower(''' || rec || ''') order by tree_spec_code desc limit 1'; execute sql into tmp; if (count = 0) then result := tmp; else if tmp is null then tmp := '1000' ; end if; result := concat(result,'+',tmp); end if; count := count + 1; END LOOP; return result; END; ]]></definition>
</function>

<function name="_formis_get_tree_age_class"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="IMMUTABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric" length="1"/>
	</return-type>
	<parameter name="tree_spec_code">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[ DECLARE sql            text; result numeric; BEGIN sql := 'select ts.age_class from tree_specie ts, (select regexp_split_to_table( ''' || tree_spec_code || ''' ,E''' || '\\+' || ''') as tree_spec_code limit 1) pts WHERE pts.tree_spec_code::text = ts.tree_spec_code::text' ; RAISE NOTICE 'sql: %', sql; execute sql into result; return result; END; ]]></definition>
</function>

<function name="_formis_cover_area_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_cover_area_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql            	text; sql2                 TEXT; sql3                 TEXT; sql_execute    	text; sql_distinct  	text; result         	_formis_cover_area_form; area_name      	name; tong_dt_cr     	FLOAT; tong_dt        	FLOAT; dt_n3lr        	FLOAT; dt_tn          	FLOAT; ng_rtn         	FLOAT; ng_rt          	FLOAT; mdsd_dd        	FLOAT; mdsd_ph        	FLOAT; mdsd_sx        	FLOAT; dochephu       	FLOAT; rec            	record; rec2           	record; n3lr_tn		FLOAT; -- rung tu nhien ngoai 3 loai rung
 n3lr_sx		FLOAT; -- rung san xuat ngoai 3 loai rung
 new_plantation	FLOAT;-- rung trong moi chua co tru luong
 BEGIN DROP TABLE IF EXISTS calculate_table; DROP TABLE IF EXISTS calculate_table1; DROP TABLE IF EXISTS calculate_table2; DROP TABLE IF EXISTS calculate_table3; IF DATE '2014-02-01' > to_date (end_date, 'dd/MM/yyyy') THEN sql := '	CREATE TEMPORARY TABLE calculate_table AS SELECT SUM(T1.area) area, T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code,T1.site_cond_code,T1.forest_org_code,';  IF depart_level = 3 THEN            -- commune level
  sql:=sql||' T1.compt_code as code	FROM plot_history T1 ';   sql := sql || ' WHERE  T1.commune_code=' || depart_id || ' and T1.datemodify = DATE ''2014-01-01'' ';   sql_distinct:='select distinct(compt_code) as code, compt_code as name, 0 as area from plot where commune_code='  ||depart_id || ' order by compt_code'; ELSIF depart_level = 2 THEN                                                   -- district level
  sql:=sql||' T1.commune_code as code	FROM plot_history T1  ';  sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' WHERE T4.district_code=' || depart_id || ' and T1.datemodify = DATE ''2014-01-01''';   sql_distinct:='select commune_code as code, name as name,area from commune where district_code = '||depart_id ||' order by name'; ELSIF depart_level = 1 THEN                                                   -- province level
  sql:=sql||' T4.district_code as code	FROM plot_history T1 ';  sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE  T5.province_code=' || depart_id || ' and T1.datemodify = DATE ''2014-01-01''';  sql_distinct:='select district_code as code, name as name,area from district where province_code = '||depart_id ||' order by name'; ELSE sql:=sql||' T5.province_code as code	FROM plot_history T1 ';  sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' where T1.datemodify = DATE ''2014-01-01''';  sql_distinct:='select province_code as code, name as name,area from province  order by name';  END IF; IF depart_level = 0 then sql :=  'create table calculate_table as select * from calculate_table_3a_orginal'; ELSE sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.forest_org_code,code'; END IF;  RAISE NOTICE 'sql: %', sql; EXECUTE sql;  ELSE  sql := 'CREATE TEMPORARY TABLE calculate_table1 AS SELECT SUM(T1.area) area, T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code,T1.site_cond_code,T1.forest_org_code,'; sql2 := 'CREATE TEMPORARY TABLE calculate_table2 AS SELECT SUM(T1.area) area, T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code,T1.site_cond_code,T1.forest_org_code,'; sql3 := 'CREATE TEMPORARY TABLE calculate_table3 AS SELECT (0-SUM(T1.area)) area, T1.forest_func_sub_code_after,T1.forest_use_sit_code_after, T1.forest_type_code_after, T1.p_forest_org_code_after,T1.site_cond_code_after,T1.forest_org_code_after,';  IF depart_level = 3 THEN            -- commune level
 sql:= sql || 'T1.compt_code as code FROM plot T1 '; sql := sql || ' WHERE  T1.commune_code=' || depart_id ;  sql2:= sql2 || 'T1.compt_code as code FROM forest_monitoring T1 '; sql2 := sql2 || ' WHERE  T1.commune_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql3:= sql3 || 'T1.compt_code as code FROM forest_monitoring T1 '; sql3 := sql3 || ' WHERE  T1.commune_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';   sql_distinct:='select distinct(compt_code) as code, compt_code as name, 0 as area from plot where commune_code = '  ||depart_id || ' order by compt_code'; ELSIF depart_level = 2 THEN                                                   -- district level
 sql := sql || 'T1.commune_code as code	FROM plot T1 '; sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' WHERE  T4.district_code=' || depart_id;  sql2 := sql2 || 'T1.commune_code as code	FROM forest_monitoring T1 '; sql2 := sql2 || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql2 := sql2 || ' WHERE  T4.district_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql3 := sql3 || 'T1.commune_code as code	FROM forest_monitoring T1 '; sql3 := sql3 || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql3 := sql3 || ' WHERE  T4.district_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';   sql_distinct:='select commune_code as code, name as name,area from commune where district_code = '||depart_id ||' order by name'; ELSIF depart_level = 1 THEN                                                   -- province level
 sql:=sql||' T4.district_code as code	FROM plot T1 '; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id;  sql2:=sql2 ||' T4.district_code as code	FROM forest_monitoring T1 '; sql2 := sql2 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql2 := sql2 || ' WHERE T5.province_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql3:=sql3 ||' T4.district_code as code	FROM forest_monitoring T1 '; sql3 := sql3 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql3 := sql3 || ' WHERE T5.province_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql_distinct:='select district_code as code, name as name,area from district where province_code = '||depart_id ||' order by name';  ELSE RAISE NOTICE 'Nation:'; sql:=sql||' T5.province_code as code	FROM plot T1 '; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code';   sql2:=sql2 ||' T5.district_code as code	FROM forest_monitoring T1 '; sql2 := sql2 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql2 := sql2 || ' WHERE  T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql3:=sql3 ||' T5.province_code as code	FROM forest_monitoring T1 '; sql3 := sql3 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql3 := sql3 || ' WHERE  T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql_distinct:='select province_code as code, name as name,area from province order by name';   END IF; IF depart_level = 0 then sql :=  'create table calculate_table1 as select * from calculate_table_3a'; ELSE sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.forest_org_code,code'; END IF; sql2 := sql2 || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.forest_org_code,code';  sql3 := sql3 || ' GROUP  BY T1.forest_func_sub_code_after, T1.forest_use_sit_code_after, T1.forest_type_code_after, T1.p_forest_org_code_after, T1.site_cond_code_after, T1.forest_org_code_after,code';  RAISE NOTICE 'sql: %', sql;  EXECUTE sql; EXECUTE sql2; EXECUTE sql3;  sql3:='CREATE TEMPORARY TABLE calculate_table AS select * from  calculate_table1 union all select * from calculate_table2 union all select * from calculate_table3'; execute sql3;  END IF;  FOR rec IN EXECUTE sql_distinct LOOP result.area_name = rec.name; result.dt_tn = rec.area; tong_dt_cr 		:= 0; tong_dt 		:= 0; dt_n3lr 		:= 0; ng_rtn 			:= 0; ng_rt 			:= 0; mdsd_dd 		:=0; mdsd_ph 		:=0; mdsd_sx 		:=0; n3lr_tn			:=0; n3lr_sx			:=0; new_plantation	:=0; FOR rec2 IN SELECT * FROM calculate_table LOOP IF rec2.code = rec.code THEN IF (rec2.forest_type_code >= 1 AND rec2.forest_type_code <= 71) OR (rec2.forest_type_code >= 94 AND rec2.forest_type_code <= 98) THEN IF rec2.forest_use_sit_code = 0 THEN IF (rec2.forest_type_code >= 60 AND rec2.forest_type_code <= 71) THEN ng_rt := ng_rt + rec2.area; -- rung tu nhien
 ELSE ng_rtn := ng_rtn + rec2.area; -- rung tu nhien
 END IF;  IF rec2.forest_func_sub_code >= 1 and rec2.forest_func_sub_code <= 4 THEN mdsd_ph := mdsd_ph + rec2.area; -- rung phong ho
 ELSIF rec2.forest_func_sub_code >= 5 and rec2.forest_func_sub_code <= 8 THEN mdsd_dd := mdsd_dd + rec2.area;-- rung dac dung
 ELSIF rec2.forest_func_sub_code >= 9 and rec2.forest_func_sub_code <= 12 THEN mdsd_sx := mdsd_sx + rec2.area;-- rung san xuat
 END IF; ELSIF rec2.forest_use_sit_code = 1 THEN dt_n3lr := dt_n3lr + rec2.area; END IF; END IF; END IF; END LOOP; tong_dt := ng_rtn + ng_rt; tong_dt_cr := tong_dt + dt_n3lr; IF depart_level = 3 then dochephu = 0; ELSE dochephu = tong_dt_cr * 100 / dt_tn; END IF; result.tong_dt_cr = tong_dt_cr; result.tong_dt = tong_dt; result.dt_n3lr = dt_n3lr; result.ng_rtn = ng_rtn; result.ng_rt = ng_rt; result.mdsd_dd = mdsd_dd; result.mdsd_ph = mdsd_ph; result.mdsd_sx = mdsd_sx; RETURN NEXT result; END LOOP; RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_actor_type_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_actor_type_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql text; sql_query text; sql_tmp            text; sql_tmp4           text; sql_tmp5           text; sql_stems          text; sql2               text; sql3               text; sql4               text; sql5               text; result  _formis_actor_type_form; rec _formis_config_report; rec_result record; hgd numeric; cd numeric; ubndx numeric; bqlrph numeric; ltqd numeric; ctln numeric; dn_nhanuoc numeric; dntn numeric; dnnn numeric; bqlrdd numeric; dvvt numeric; khac numeric; tong_dt numeric; BEGIN DROP TABLE IF EXISTS calculate_table; DROP TABLE IF EXISTS calculate_table1; DROP TABLE IF EXISTS calculate_table4; DROP TABLE IF EXISTS calculate_table5; DROP TABLE IF EXISTS calculate_table_stems; DROP TABLE IF EXISTS calculate_table1_stems; DROP TABLE IF EXISTS calculate_table4_stems; DROP TABLE IF EXISTS calculate_table5_stems; sql_tmp := 'CREATE TEMPORARY TABLE calculate_table AS SELECT '; sql_tmp4 := 'CREATE TEMPORARY TABLE calculate_table4 AS SELECT '; sql_tmp5 := 'CREATE TEMPORARY TABLE calculate_table5 AS SELECT ';  IF DATE '2014-02-01' > to_date (end_date, 'dd/MM/yyyy') THEN IF report_type = '2a' THEN sql_tmp := sql_tmp || ' SUM(T1.area) area' ; ELSIF report_type = '2b' THEN sql_tmp := sql_tmp || ' SUM(T1.volume_per_plot) area' ; END IF; sql :=''; sql:= sql || ',T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product,T1.actor_type_code '; sql:= sql || ' FROM plot_history T1 ';   IF depart_level = 3 THEN                                                    -- commune level
  sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql := sql || ' WHERE T1.commune_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1)';  ELSIF depart_level = 2 THEN  sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql := sql || ' WHERE  T4.district_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1) ';   ELSIF depart_level = 1 THEN                                                   -- province level
  sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text';  sql := sql || ' WHERE T5.province_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1)';   ELSE  sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql:= sql || ' WHERE T1.forest_use_sit_code in (0,1)';     END IF;  sql := sql || 'and T1.datemodify = DATE ''2014-01-01''' || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product, T1.actor_type_code '; sql_stems := 'CREATE TEMPORARY TABLE calculate_table_stems AS SELECT SUM(T1.stem_per_plot) area ' ||  sql; sql:=sql_tmp || sql; RAISE NOTICE 'sql: %',sql; EXECUTE sql; EXECUTE sql_stems; ELSE sql_tmp := 'CREATE TEMPORARY TABLE calculate_table1 AS SELECT '; sql:=''; sql4:=''; sql5:=''; IF report_type = '2a' THEN sql_tmp := sql_tmp || ' SUM(T1.area) area' ;  sql_tmp4 := sql_tmp4 || ' SUM(T1.area) area' ; sql_tmp5 := sql_tmp5 || ' (0-SUM(T1.area)) area' ; ELSIF report_type = '2b' THEN sql_tmp := sql_tmp || ' SUM(T1.volume_per_plot) area' ; sql_tmp5 := sql_tmp5 || ' (0 - SUM(T1.volume)) area' ; sql_tmp4 := sql_tmp4 || ' SUM(T1.volume) area' ; END IF; sql:= sql || ' ,T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, '; sql:= sql || ' T1.tree_spec_code,' ; sql:= sql || ' T9.special_product, T7.actor_type_code FROM plot T1 INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql4 :=''; sql4:= sql4 || ',T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product, T1.actor_type_code'; sql4:= sql4 || ' FROM forest_monitoring T1 LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql5:= sql5 || ',T1.forest_func_sub_code_after,T1.forest_use_sit_code_after, T1.forest_type_code_after, T1.p_forest_org_code_after, T1.tree_spec_code_after, T9.special_product, T1.actor_type_code_after'; sql5:= sql5 || ' FROM forest_monitoring T1 LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; IF depart_level = 3 THEN sql := sql || ' WHERE T1.commune_code=' || depart_id; sql4 := sql4 || ' WHERE  T1.commune_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql5 := sql5 || ' WHERE  T1.commune_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; ELSIF depart_level = 2 THEN sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql := sql || ' WHERE  T4.district_code=' || depart_id;  sql4 := sql4 || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql4 := sql4 || ' WHERE  T4.district_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql5 := sql5 || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql5 := sql5 || ' WHERE  T4.district_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; ELSIF depart_level = 1 THEN sql := sql || '  INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id; sql4 := sql4 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql4 := sql4 || ' WHERE T5.province_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; sql5 := sql5 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql5 := sql5 || ' WHERE T5.province_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; ELSE sql4 := sql4 || ' WHERE  T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; sql5 := sql5 || ' WHERE  T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; RAISE NOTICE 'sql: %',sql;  END IF;  sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product, T7.actor_type_code'; sql4 := sql4 || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product, T1.actor_type_code';   sql5 := sql5 || ' GROUP  BY T1.forest_func_sub_code_after, T1.forest_use_sit_code_after, T1.forest_type_code_after, T1.p_forest_org_code_after, T1.tree_spec_code_after, T9.special_product, T1.actor_type_code_after';    sql_stems := 'CREATE TEMPORARY TABLE calculate_table1_stems AS SELECT SUM(T1.stem_per_plot) area ' ||  sql; EXECUTE sql_stems; sql_stems := 'CREATE TEMPORARY TABLE calculate_table4_stems AS SELECT (0-SUM(T1.stems_no)) area ' ||  sql4; EXECUTE sql_stems; sql_stems := 'CREATE TEMPORARY TABLE calculate_table5_stems AS SELECT SUM(T1.stems_no) area ' ||  sql5; EXECUTE sql_stems;  sql3:='CREATE TEMPORARY TABLE calculate_table_stems AS select * from  calculate_table1_stems union all select * from 	calculate_table4_stems union all select * from calculate_table5_stems'; execute sql3;  sql:=sql_tmp || sql; sql4:=sql_tmp4 || sql4; sql5:=sql_tmp5 || sql5; RAISE NOTICE 'sql: %', sql; RAISE NOTICE 'sql4: %', sql4; RAISE NOTICE 'sql5: %', sql5; EXECUTE sql; EXECUTE sql4; EXECUTE sql5;  sql3:='CREATE TEMPORARY TABLE calculate_table AS select * from  calculate_table1 union all select * from calculate_table4 union all select * from calculate_table5'; execute sql3;  END IF;  RAISE NOTICE 'sql: %',sql; sql2 := 'SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report';  IF report_type = '2b' THEN sql2 :=  sql2 || ' WHERE type = ''1a_standard'' and row_order > 0 and code not in (''2000'',''2010'',''2020'',''2030'',''2040'',''2050'',''2060'') ORDER BY row_order'; ELSE sql2:=sql2 || ' WHERE type = ''1a_standard'' ORDER BY row_order'; END IF; FOR rec IN   execute sql2 LOOP result.unit = rec.unit; result.forest_type = rec.name; result.code = rec.code; hgd :=0; cd :=0; ubndx :=0; bqlrph :=0; ltqd :=0; ctln :=0; dntn :=0; dnnn :=0; khac:=0; bqlrdd :=0; dvvt :=0; tong_dt :=0; dn_nhanuoc:=0; if rec.code in ('1320','1321','1322','1323','1324','1325', '1332','1340') and report_type = '2b' THEN FOR rec_result in select * from _formis_cal_forest_standard(rec,'actor_type_code','calculate_table_stems') as (actor_type_code  numeric, area numeric) LOOP IF rec_result.actor_type_code = 1 then hgd:=rec_result.area; tong_dt:=tong_dt+rec_result.area; ELSIF rec_result.actor_type_code = 2 then tong_dt:=tong_dt+rec_result.area; cd:=rec_result.area; ELSIF rec_result.actor_type_code = 3 then tong_dt:=tong_dt+rec_result.area; ubndx:=rec_result.area; ELSIF rec_result.actor_type_code = 4 then tong_dt:=tong_dt+rec_result.area; bqlrph:=rec_result.area; ELSIF rec_result.actor_type_code = 5 then tong_dt:=tong_dt+rec_result.area; ltqd:=rec_result.area; ELSIF rec_result.actor_type_code = 6 then tong_dt:=tong_dt+rec_result.area; ctln:=rec_result.area; ELSIF rec_result.actor_type_code = 7 then tong_dt:=tong_dt+rec_result.area; dntn:=rec_result.area; ELSIF rec_result.actor_type_code = 8 then tong_dt:=tong_dt+rec_result.area; dnnn:=rec_result.area; ELSIF rec_result.actor_type_code = 9 then tong_dt:=tong_dt+rec_result.area; khac:=rec_result.area; ELSIF rec_result.actor_type_code = 10 then tong_dt:=tong_dt+rec_result.area; bqlrdd:=rec_result.area; ELSIF rec_result.actor_type_code = 11 then tong_dt:=tong_dt+rec_result.area; dvvt:=rec_result.area; ELSE END IF;  END LOOP; else FOR rec_result in select * from _formis_cal_forest_standard(rec,'actor_type_code') as (actor_type_code  numeric, area numeric) LOOP IF rec_result.actor_type_code = 1 then hgd:=rec_result.area; tong_dt:=tong_dt+rec_result.area; ELSIF rec_result.actor_type_code = 2 then tong_dt:=tong_dt+rec_result.area; cd:=rec_result.area; ELSIF rec_result.actor_type_code = 3 then tong_dt:=tong_dt+rec_result.area; ubndx:=rec_result.area; ELSIF rec_result.actor_type_code = 4 then tong_dt:=tong_dt+rec_result.area; bqlrph:=rec_result.area; ELSIF rec_result.actor_type_code = 5 then tong_dt:=tong_dt+rec_result.area; ltqd:=rec_result.area; ELSIF rec_result.actor_type_code = 6 then tong_dt:=tong_dt+rec_result.area; ctln:=rec_result.area; ELSIF rec_result.actor_type_code = 7 then tong_dt:=tong_dt+rec_result.area; dntn:=rec_result.area; ELSIF rec_result.actor_type_code = 8 then tong_dt:=tong_dt+rec_result.area; dnnn:=rec_result.area; ELSIF rec_result.actor_type_code = 9 then tong_dt:=tong_dt+rec_result.area; khac:=rec_result.area; ELSIF rec_result.actor_type_code = 10 then tong_dt:=tong_dt+rec_result.area; bqlrdd:=rec_result.area; ELSIF rec_result.actor_type_code = 11 then tong_dt:=tong_dt+rec_result.area; dvvt:=rec_result.area; ELSE END IF;  END LOOP; end if;  result.hgd= hgd; result.cd= cd; result.ubndx = ubndx; result.bqlrph= bqlrph; result.ltqd = ltqd; result.ctln = ctln; result.dntn = dntn; result.dnnn = dnnn; result.khac = khac; result.bqlrdd = bqlrdd; result.dvvt= dvvt; dn_nhanuoc=ltqd+ctln; result.dn_nhanuoc=dn_nhanuoc; result.tong_dt = tong_dt; return next result; END LOOP; return; END; ]]></definition>
</function>

<function name="_formis_forest_func_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_area_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE cn                name; sql               text; sql_tmp            text; sql_tmp4           text; sql_tmp5           text; sql_stems          text; sql2               text; sql3               text; sql4               text; sql5               text; result            _formis_area_form; rec               _formis_config_report; rec_result        record; rec_monitoring    record; tong_dt           numeric;                                -- Tong dien tich
 tong_dt_ln        numeric;                      -- Dien tich dat lam nghiep
 tong_dt_dd        numeric;                            -- Dien tich dac dung
 dd_vqg            numeric;                       -- Dien tich vuon quoc gia
 dd_kbttn          numeric;             -- Dien tich khu bao ton thien nhien
 dd_knc            numeric;             -- Dien tich khu nghien cuu khoa hoc
 dd_bvcq           numeric;                -- Dien tich khu bao ve canh quan
 tong_dt_ph        numeric;                            -- Dien tich phong ho
 ph_dn             numeric;                            -- Phong ho dau nguon
 ph_cg_cc          numeric;                   -- Phong ho chan gio, chan cat
 ph_cs             numeric;                            -- Phong ho chan song
 ph_bvmt           numeric;                    -- Phong ho bao ve moi truong
 sx                numeric;                                      -- San xuat
 nqh               numeric;                               -- Ngoai quy hoach
 tong_dt_3lr       numeric;                    -- Tong dien tich 3 loai rung
 tong_dt_3lr_nqh   numeric;  -- Tong dien tich 3 loai rung + ngoai quy hoach
 tong_dt_dau_nam   numeric;                        -- Tong dien tich dau nam
 rung_gl           numeric;                                   -- Rung go lon
 rung_gn           numeric;                                    --Rung go nho
 rung_tn           numeric;                                   -- Rung go nho
 rung_sxk          numeric;                            -- Rung san xuat khac
 change            numeric;                             -- Thay doi trong ky
 BEGIN DROP TABLE IF EXISTS calculate_table; DROP TABLE IF EXISTS calculate_table1; DROP TABLE IF EXISTS calculate_table4; DROP TABLE IF EXISTS calculate_table5; DROP TABLE IF EXISTS calculate_table_stems; DROP TABLE IF EXISTS calculate_table1_stems; DROP TABLE IF EXISTS calculate_table4_stems; DROP TABLE IF EXISTS calculate_table5_stems; sql_tmp := 'CREATE TEMPORARY TABLE calculate_table AS SELECT '; sql_tmp4 := 'CREATE TEMPORARY TABLE calculate_table4 AS SELECT '; sql_tmp5 := 'CREATE TEMPORARY TABLE calculate_table5 AS SELECT ';  IF DATE '2014-02-01' > to_date (end_date, 'dd/MM/yyyy') THEN IF report_type = '1a' THEN sql_tmp := sql_tmp || ' SUM(T1.area) area' ; ELSIF report_type = '1b' THEN sql_tmp := sql_tmp || ' SUM(T1.volume_per_plot) area' ; END IF; sql :=''; sql:= sql || ',T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product '; sql:= sql || ' FROM plot_history T1 ';   IF depart_level = 3 THEN                                                    -- commune level
  sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql := sql || ' WHERE T1.commune_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1)';  ELSIF depart_level = 2 THEN  sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql := sql || ' WHERE  T4.district_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1) ';   ELSIF depart_level = 1 THEN                                                   -- province level
  sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text';  sql := sql || ' WHERE T5.province_code=' || depart_id; sql:= sql || ' AND T1.forest_use_sit_code in (0,1)';   ELSE  sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql:= sql || ' WHERE T1.forest_use_sit_code in (0,1)';     END IF;  sql := sql || 'and T1.datemodify = DATE ''2014-01-01''' || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product '; sql_stems := 'CREATE TEMPORARY TABLE calculate_table_stems AS SELECT SUM(T1.stem_per_plot) area ' ||  sql; sql:=sql_tmp || sql; RAISE NOTICE 'sql: %',sql; EXECUTE sql; EXECUTE sql_stems; ELSE sql_tmp := 'CREATE TEMPORARY TABLE calculate_table1 AS SELECT '; sql:=''; sql4:=''; sql5:=''; IF report_type = '1a' THEN sql_tmp := sql_tmp || ' SUM(T1.area) area' ;  sql_tmp4 := sql_tmp4 || ' SUM(T1.area) area' ; sql_tmp5 := sql_tmp5 || ' (0-SUM(T1.area)) area' ; ELSIF report_type = '1b' THEN sql_tmp := sql_tmp || ' SUM(T1.volume_per_plot) area' ; sql_tmp5 := sql_tmp5 || ' (0 - SUM(T1.volume)) area' ; sql_tmp4 := sql_tmp4 || ' SUM(T1.volume) area' ; END IF; sql:= sql || ' ,T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, '; sql:= sql || ' T1.tree_spec_code,' ; sql:= sql || ' T9.special_product FROM plot T1 '; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql4 :=''; sql4:= sql4 || ',T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product'; sql4:= sql4 || ' FROM forest_monitoring T1 LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql5:= sql5 || ',T1.forest_func_sub_code_after,T1.forest_use_sit_code_after, T1.forest_type_code_after, T1.p_forest_org_code_after, T1.tree_spec_code_after, T9.special_product'; sql5:= sql5 || ' FROM forest_monitoring T1 LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; IF depart_level = 3 THEN sql := sql || ' WHERE T1.commune_code=' || depart_id; sql4 := sql4 || ' WHERE  T1.commune_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql5 := sql5 || ' WHERE  T1.commune_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; ELSIF depart_level = 2 THEN sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql := sql || ' WHERE  T4.district_code=' || depart_id;  sql4 := sql4 || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql4 := sql4 || ' WHERE  T4.district_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql5 := sql5 || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql5 := sql5 || ' WHERE  T4.district_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; ELSIF depart_level = 1 THEN sql := sql || '  INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id; sql4 := sql4 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql4 := sql4 || ' WHERE T5.province_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; sql5 := sql5 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql5 := sql5 || ' WHERE T5.province_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; ELSE RAISE NOTICE 'sql: %',sql; sql4 := sql4 || ' WHERE  T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql5 := sql5 || ' WHERE  T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')'; END IF;  sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product'; sql4 := sql4 || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.tree_spec_code, T9.special_product';   sql5 := sql5 || ' GROUP  BY T1.forest_func_sub_code_after, T1.forest_use_sit_code_after, T1.forest_type_code_after, T1.p_forest_org_code_after, T1.tree_spec_code_after, T9.special_product';    sql_stems := 'CREATE TEMPORARY TABLE calculate_table1_stems AS SELECT SUM(T1.stem_per_plot) area ' ||  sql; EXECUTE sql_stems; sql_stems := 'CREATE TEMPORARY TABLE calculate_table4_stems AS SELECT (0-SUM(T1.stems_no)) area ' ||  sql4; EXECUTE sql_stems; sql_stems := 'CREATE TEMPORARY TABLE calculate_table5_stems AS SELECT SUM(T1.stems_no) area ' ||  sql5; EXECUTE sql_stems;  sql3:='CREATE TEMPORARY TABLE calculate_table_stems AS select * from  calculate_table1_stems union all select * from 	calculate_table4_stems union all select * from calculate_table5_stems'; execute sql3;  sql:=sql_tmp || sql; sql4:=sql_tmp4 || sql4; sql5:=sql_tmp5 || sql5; RAISE NOTICE 'sql: %', sql; RAISE NOTICE 'sql4: %', sql4; RAISE NOTICE 'sql5: %', sql5; EXECUTE sql; EXECUTE sql4; EXECUTE sql5;  sql3:='CREATE TEMPORARY TABLE calculate_table AS select * from  calculate_table1 union all select * from calculate_table4 union all select * from calculate_table5'; execute sql3;  END IF;  sql2 := 'SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report';  IF  report_type = '1b' THEN sql2 :=  sql2 || ' WHERE type = ''1a_standard'' and row_order > 0 and code not in (''2000'',''2010'',''2020'',''2030'',''2040'',''2050'',''2060'') ORDER BY row_order'; ELSE sql2:=sql2 || ' WHERE type = ''1a_standard'' ORDER BY row_order';  END IF; FOR rec IN   execute sql2 LOOP result.unit = rec.unit; result.forest_type = rec.name; result.code = rec.code; sx := 0; tong_dt := 0; tong_dt_ln := 0; tong_dt_dd := 0; dd_vqg := 0; dd_kbttn := 0; dd_knc := 0; dd_bvcq := 0; tong_dt_ph := 0; ph_dn := 0; ph_cg_cc := 0; ph_cs := 0; ph_bvmt := 0; sx := 0; nqh := 0; tong_dt_3lr := 0; tong_dt_3lr_nqh := 0; tong_dt_dau_nam := 0; rung_gl := 0; rung_gn := 0; rung_tn := 0; rung_sxk := 0; change := 0; RAISE NOTICE 'tree_specie_code : %,rec.code: %', rec.tree_specie_code, rec.code; sql3:='SELECT * FROM _formis_cal_forest_standard(rec,''forest_func_sub_code'') AS (forest_func_sub_code  numeric, area numeric)'; if rec.code in ('1320','1321','1322','1323','1324','1325', '1332', '1340') and report_type = '1b'  THEN FOR rec_result IN SELECT * FROM _formis_cal_forest_standard(rec,'forest_func_sub_code,plot.forest_use_sit_code','calculate_table_stems') AS (forest_func_sub_code  numeric, forest_use_sit_code numeric, area numeric) LOOP IF rec_result.forest_use_sit_code = 1 then nqh:=nqh + rec_result.area; elsif rec_result.forest_use_sit_code = 0 then IF rec_result.forest_func_sub_code = 1 THEN tong_dt:=tong_dt+rec_result.area; ph_dn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 2 THEN tong_dt:=tong_dt+rec_result.area; ph_cs:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 3 THEN tong_dt:=tong_dt+rec_result.area; ph_cg_cc:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 4 THEN tong_dt:=tong_dt+rec_result.area; ph_bvmt:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 5 THEN tong_dt:=tong_dt+rec_result.area; dd_vqg:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 6 THEN tong_dt:=tong_dt+rec_result.area; dd_kbttn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 7 THEN tong_dt:=tong_dt+rec_result.area; dd_knc:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 8 THEN tong_dt:=tong_dt+rec_result.area; dd_bvcq:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 9 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_gl:=rung_gl+rec_result.area; ELSIF rec_result.forest_func_sub_code = 10 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_gn:=rung_gn+rec_result.area; ELSIF rec_result.forest_func_sub_code = 11 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_tn:=rung_tn+rec_result.area; ELSIF rec_result.forest_func_sub_code = 12 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_sxk:=rung_sxk+rec_result.area;  END IF; end if;   END LOOP; else FOR rec_result IN SELECT * FROM _formis_cal_forest_standard(rec,'forest_func_sub_code,plot.forest_use_sit_code') AS (forest_func_sub_code  numeric, forest_use_sit_code numeric, area numeric) LOOP RAISE NOTICE 'CHANGE: %', rec_result.forest_use_sit_code; if rec_result.forest_use_sit_code = 1 then nqh:=nqh + rec_result.area; elsif rec_result.forest_use_sit_code = 0 then IF rec_result.forest_func_sub_code = 1 THEN tong_dt:=tong_dt+rec_result.area; ph_dn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 2 THEN tong_dt:=tong_dt+rec_result.area; ph_cs:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 3 THEN tong_dt:=tong_dt+rec_result.area; ph_cg_cc:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 4 THEN tong_dt:=tong_dt+rec_result.area; ph_bvmt:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 5 THEN tong_dt:=tong_dt+rec_result.area; dd_vqg:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 6 THEN tong_dt:=tong_dt+rec_result.area; dd_kbttn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 7 THEN tong_dt:=tong_dt+rec_result.area; dd_knc:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 8 THEN tong_dt:=tong_dt+rec_result.area; dd_bvcq:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 9 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_gl:=rung_gl+rec_result.area; ELSIF rec_result.forest_func_sub_code = 10 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_gn:=rung_gn+rec_result.area; ELSIF rec_result.forest_func_sub_code = 11 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_tn:=rung_tn+rec_result.area; ELSIF rec_result.forest_func_sub_code = 12 THEN tong_dt:=tong_dt+rec_result.area; sx:=sx+rec_result.area; rung_sxk:=rung_sxk+rec_result.area;  END IF; end if;   END LOOP; end if;   /* FOR rec_monitoring IN SELECT * FROM _formis_cal_monitoring_forest(rec,start_date,end_date,depart_id,depart_level ) AS (change_type_id  INT, area numeric) LOOP IF rec_monitoring.change_type_id in (6,21,41) THEN change:=change+rec_monitoring.area; ELSIF  rec_monitoring.change_type_id in (1,2,8,9,10,11,12,13,14,15,16,17,42) THEN --rec_monitoring.monitoring_type_code>=1 AND rec_monitoring.monitoring_type_code<=5 THEN
 change:=change-rec_monitoring.area; END IF; END LOOP; */  result.dd_vqg = dd_vqg; result.dd_kbttn = dd_kbttn; result.dd_knc = dd_knc; result.dd_bvcq = dd_bvcq; result.ph_dn = ph_dn; result.ph_cg_cc = ph_cg_cc; result.ph_cs = ph_cs; result.ph_bvmt = ph_bvmt; tong_dt_ph := ph_dn + ph_cg_cc + ph_cs + ph_bvmt; result.tong_dt_ph = tong_dt_ph; result.sx = sx; result.nqh = nqh;  tong_dt_dd = dd_vqg + dd_kbttn + dd_knc + dd_bvcq; result.tong_dt_dd = tong_dt_dd; tong_dt_ln = tong_dt_dd + sx + tong_dt_ph; result.tong_dt_ln = tong_dt_ln;  result.tong_dt = tong_dt; tong_dt_3lr = tong_dt_dd + tong_dt_ph + sx;  result.tong_dt_3lr = tong_dt_3lr; if rec.code in ('2000','2010','2020','2030','2050','2060') THEN tong_dt_3lr_nqh := tong_dt_3lr + nqh; ELSE tong_dt_3lr_nqh := tong_dt_3lr + nqh; END IF;  result.tong_dt_3lr_nqh = tong_dt_3lr_nqh; change = result.tong_dt_3lr_nqh - result.tong_dt_dau_nam; result.thay_doi = change; RAISE NOTICE 'CHANGE: %', change; RETURN NEXT result;  END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_owners_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_actor_type_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql          text; sql_query    text; sql4               text; sql5               text; result       _formis_actor_type_form; rec          _formis_config_report; rec_result   record; hgd          numeric; cd           numeric; ubndx        numeric; bqlrph       numeric; ltqd         numeric; ctln         numeric; dn_nhanuoc   numeric; dntn         numeric; dnnn         numeric; bqlrdd       numeric; dvvt         numeric; khac         numeric; tong_dt      numeric; BEGIN DROP TABLE IF EXISTS calculate_table; DROP TABLE IF EXISTS calculate_table1; DROP TABLE IF EXISTS calculate_table4; DROP TABLE IF EXISTS calculate_table5; sql:= '	CREATE TEMPORARY TABLE calculate_table AS SELECT';  sql := sql || '	 SUM(T1.area) area';  IF DATE '2014-02-01' > to_date (end_date, 'dd/MM/yyyy') THEN  sql:= sql || ',T1.actor_type_code, T1.land_use_cert_code, T1.forest_type_code,T1.conflict_sit_code,T1.forest_org_code,T1.forest_use_sit_code FROM plot_history T1 '; IF depart_level = 3	THEN -- commune level
  sql :=sql	|| ' 	WHERE  T1.commune_code=' || depart_id || ''; ELSIF depart_level = 2	THEN	-- district level
 sql :=sql	|| ' 	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql :=sql	|| ' 	WHERE  T4.district_code=' || depart_id || ''; ELSIF depart_level = 1	THEN -- province level
 sql :=sql	|| '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql :=sql	|| ' 	WHERE  T5.province_code=' || 	depart_id || 	'';  ELSE sql :=sql	|| ' 	WHERE  1 = 1 '; END IF;  sql := sql 	|| '  and T1.datemodify = DATE ''2014-01-01'' GROUP  BY T1.actor_type_code, T1.land_use_cert_code, T1.forest_type_code, T1.conflict_sit_code,T1.forest_org_code,T1.forest_use_sit_code';   EXECUTE sql; RAISE NOTICE 'sql_history: %',sql; ELSE sql:= '	CREATE TEMPORARY TABLE calculate_table1 AS SELECT SUM(T1.area) area, T7.actor_type_code, T1.land_use_cert_code, T1.forest_type_code,T1.conflict_sit_code, T1.forest_org_code,T1.forest_use_sit_code FROM plot T1 '; sql4:= '	CREATE TEMPORARY TABLE calculate_table4 AS SELECT SUM(T1.area) area, T7.actor_type_code, T1.land_use_cert_code, T1.forest_type_code,T1.conflict_sit_code, T1.forest_org_code,T1.forest_use_sit_code FROM FOREST_MONITORING T1 '; sql5:= '	CREATE TEMPORARY TABLE calculate_table5 AS SELECT (0-SUM(T1.area)) area, T7.actor_type_code, T1.land_use_cert_code_after, T1.forest_type_code_after,T1.conflict_sit_code_after, T1.forest_org_code_after,T1.forest_use_sit_code_after FROM forest_monitoring T1 '; IF depart_level = 3	THEN -- commune level
 sql := sql || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql := sql|| ' WHERE T1.commune_code=' || depart_id || ' and  T1.actor_id is not null ';  sql4 := sql4 || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql4 := sql4|| ' WHERE T1.commune_code=' || depart_id || ' and  T1.actor_id is not null ' || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';   sql5 := sql5 || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql5:= sql5 || ' WHERE T1.commune_code=' || depart_id || ' and  T1.actor_id is not null ' || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';    ELSIF depart_level = 2	THEN	-- district level
  sql := sql || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql :=  sql  || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql :=  sql || ' WHERE  T4.district_code=' || depart_id;  sql4 := sql4 || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql4 :=  sql4  || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql4 :=  sql4 || ' WHERE  T4.district_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql5 := sql5 || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id_after and T7.commune_code = T1.commune_code'; sql5 :=  sql5  || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql5 :=  sql5 || ' WHERE  T4.district_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  ELSIF depart_level = 1	THEN -- province level
 sql := sql || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql :=  sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id;  sql4 := sql4 || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql4 :=  sql4|| '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql4 := sql4 || ' WHERE T5.province_code=' || depart_id  || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  sql5  := sql5 || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql5 :=  sql5 || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql5 := sql5 || ' WHERE T5.province_code=' || depart_id || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';  ELSE RAISE NOTICE 'sql: %',sql; sql := sql || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql := sql|| ' WHERE T1.actor_id is not null ';  sql4 := sql4 || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql4 := sql4|| ' WHERE  T1.actor_id is not null ' || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';   sql5 := sql5 || ' INNER JOIN forest_actor T7 on T7.actor_id = T1.actor_id and T7.commune_code = T1.commune_code'; sql5:= sql5 || ' WHERE  T1.actor_id is not null ' || '  AND T1.date_time::date >=to_date ('''||end_date||''',''dd/MM/yyyy'')';   END IF;   sql := sql || ' GROUP  BY T7.actor_type_code, T1.land_use_cert_code, T1.forest_type_code, T1.conflict_sit_code, T1.forest_org_code, T1.forest_use_sit_code'; sql4 := sql4 || ' GROUP  BY T7.actor_type_code, T1.land_use_cert_code, T1.forest_type_code, T1.conflict_sit_code, T1.forest_org_code, T1.forest_use_sit_code'; sql5 := sql5 || ' GROUP  BY T7.actor_type_code, T1.land_use_cert_code_after, T1.forest_type_code_after, T1.conflict_sit_code_after, T1.forest_org_code_after, T1.forest_use_sit_code_after';  RAISE NOTICE 'sql4: %', sql4; RAISE NOTICE 'sql5: %', sql5; RAISE NOTICE 'sql: %', sql; EXECUTE sql; EXECUTE sql4; EXECUTE sql5;  sql:='CREATE TEMPORARY TABLE calculate_table AS select * from  calculate_table1 union all select * from calculate_table4 union all select * from calculate_table5'; execute sql; END IF;       FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = '5a_standard' ORDER BY row_order LOOP result.unit = rec.unit; result.forest_type = rec.name; result.code = rec.code; RAISE NOTICE 'sql_query: %', rec.code; hgd := 0; cd := 0; ubndx := 0; bqlrph := 0; ltqd := 0; ctln := 0; dntn := 0; dnnn := 0; khac := 0; bqlrdd := 0; dvvt := 0; tong_dt := 0; dn_nhanuoc := 0; FOR rec_result IN SELECT * FROM _formis_cal_forest(rec,'actor_type_code') AS (forest_func_sub_code  numeric, area numeric) LOOP IF rec_result.forest_func_sub_code = 1 THEN hgd:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 2 THEN cd:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 3 THEN ubndx:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 4 THEN bqlrph:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 5 THEN ltqd:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 6 THEN ctln:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 7 THEN dntn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 8 THEN dnnn:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 9 THEN khac:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 10 THEN bqlrdd:=rec_result.area; ELSIF rec_result.forest_func_sub_code = 11 THEN dvvt:=rec_result.area; ELSE  END IF; END LOOP; result.hgd = hgd; result.cd = cd; result.ubndx = ubndx; result.bqlrph = bqlrph; result.ltqd = ltqd; result.ctln = ctln; result.dntn = dntn; result.dnnn = dnnn; result.khac = khac; result.bqlrdd = bqlrdd; result.dvvt = dvvt; dn_nhanuoc = ltqd + ctln; result.dn_nhanuoc = dn_nhanuoc; tong_dt = hgd + cd + ubndx + bqlrph + ltqd + ctln + dntn + dnnn + khac + bqlrdd + dvvt; result.tong_dt = tong_dt; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_report6_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_form6_standard" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                  					TEXT; sql_query            					TEXT; sql_distinct							TEXT; result               					_formis_form6_standard; rec            record; rec2           record; TT integer; name text; code text; khaithacchon numeric; khaithactrang numeric; trongmoi numeric; tronglai numeric; xuctien numeric; trongbosung numeric; chamsoc numeric; tiathua numeric; chayrung numeric; saubenhhai numeric; lanchiem numeric; khaithactraiphep numeric; pharung numeric; thuydien numeric; khucongnghiep numeric; nongnghiep numeric; congtrinhcong numeric; mucdichkhac numeric; tangdientich numeric; giamdientich numeric; tongcong numeric; BEGIN DROP TABLE IF EXISTS calculate_table; sql := 'CREATE TEMPORARY TABLE calculate_table AS SELECT  SUM(T1.area) area, T2.monitoring_type_code, T1.forest_type_code,T1.forest_func_sub_code,T1.actor_type_code,T1.forest_use_sit_code,T1.change_type_id,T1.forest_org_code, ';  IF depart_level = 3 THEN sql:= sql || 'T1.compt_code as code FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id'; sql:= sql || ' WHERE T1.commune_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; sql_distinct:='select distinct(compt_code) as code, compt_code as name, 0 as area from plot where commune_code='  ||depart_id || ' order by compt_code'; ELSIF depart_level = 2 THEN sql:= sql || 'T1.commune_code as code FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id'; sql:=sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code WHERE T3.district_code=' || depart_id ; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; sql_distinct:='select commune_code as code, name as name,area from commune where district_code = '||depart_id ||' order by name'; ELSIF depart_level = 1 THEN sql:=sql||' T3.district_code as code	FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id '; sql:= sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code WHERE T4.province_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; sql_distinct:='select district_code as code, name as name,area from district where province_code = '||depart_id ||' order by name'; ELSIF depart_level = 0 THEN sql:=sql||' T4.province_code as code	FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id '; sql:= sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code'; sql:=	sql||' 	WHERE T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; sql_distinct:='select province_code as code, name as name,area from province order by name'; RAISE NOTICE 'sql_query:%',sql; ELSE RETURN; END IF; sql := sql || ' GROUP BY T2.monitoring_type_code, T1.forest_type_code,T1.forest_func_sub_code, T1.actor_type_code,T1.forest_use_sit_code,T1.change_type_id,T1.forest_org_code,code';  RAISE NOTICE 'sql_query:%',sql; EXECUTE sql;  TT:=0; FOR rec IN EXECUTE sql_distinct LOOP result.area_name = rec.name; result.code = rec.code; khaithacchon := 0; khaithactrang := 0; trongmoi := 0; tronglai := 0; xuctien := 0; trongbosung := 0; chamsoc := 0; tiathua := 0; chayrung := 0; saubenhhai := 0; lanchiem := 0; khaithactraiphep := 0; pharung := 0; thuydien := 0; khucongnghiep := 0; nongnghiep := 0; congtrinhcong := 0; mucdichkhac := 0; tangdientich := 0; giamdientich := 0; tongcong := 0; TT:=TT+1; FOR rec2 IN SELECT * FROM calculate_table LOOP IF rec2.code = rec.code THEN tongcong:=tongcong+rec2.area; if rec2.change_type_id = 1 then khaithactrang:=khaithactrang+rec2.area; end if; if rec2.change_type_id = 2 then khaithacchon:=khaithacchon+rec2.area; end if; if rec2.change_type_id = 6 then trongmoi:=trongmoi+rec2.area; end if; if rec2.change_type_id = 7 then tronglai:=tronglai+rec2.area; end if; if rec2.change_type_id = 21 then xuctien:=xuctien+rec2.area; end if; if rec2.change_type_id = 22 then trongbosung:=trongbosung+rec2.area; end if; if rec2.change_type_id = 31 then chamsoc:=chamsoc+rec2.area; end if; if rec2.change_type_id = 32 then tiathua:=tiathua+rec2.area; end if;  if rec2.change_type_id = 8 then chayrung:=chayrung+rec2.area; end if; if rec2.change_type_id = 9 then saubenhhai:=saubenhhai+rec2.area; end if; if rec2.change_type_id = 10 then lanchiem:=lanchiem+rec2.area; end if; if rec2.change_type_id = 11 then khaithactraiphep:=khaithactraiphep+rec2.area; end if; if rec2.change_type_id = 12 then pharung:=pharung+rec2.area; end if;  if rec2.change_type_id = 13 then thuydien:=thuydien+rec2.area; end if; if rec2.change_type_id = 14 then khucongnghiep:=khucongnghiep+rec2.area; end if; if rec2.change_type_id = 15 then nongnghiep:=nongnghiep+rec2.area; end if; if rec2.change_type_id = 16 then congtrinhcong:=congtrinhcong+rec2.area; end if; if rec2.change_type_id = 17 then mucdichkhac:=mucdichkhac+rec2.area; end if;  if rec2.change_type_id = 41 then tangdientich:=tangdientich+rec2.area; end if; if rec2.change_type_id = 42 then giamdientich:=giamdientich+rec2.area; end if;  END IF; END LOOP; result.TT :=TT; result.khaithacchon := khaithacchon; result.khaithactrang := khaithactrang; result.trongmoi := trongmoi; result.tronglai := tronglai; result.xuctien := xuctien; result.trongbosung := trongbosung; result.chamsoc := chamsoc; result.tiathua := tiathua; result.chayrung := chayrung; result.saubenhhai := saubenhhai; result.lanchiem := lanchiem; result.khaithactraiphep := khaithactraiphep; result.pharung := pharung; result.thuydien := thuydien; result.khucongnghiep := khucongnghiep; result.nongnghiep := nongnghiep; result.congtrinhcong := congtrinhcong; result.mucdichkhac := mucdichkhac; result.tangdientich := tangdientich; result.giamdientich := giamdientich; result.tongcong := tongcong; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_report7_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_form6_standard" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                  					TEXT; sql2                                                    TEXT; sql3                                                    TEXT; sql_query            					TEXT; sql_distinct						TEXT; result               					_formis_form6_standard; rec            _formis_config_report; rec2           record; TT integer; name text; code text; khaithacchon numeric; khaithactrang numeric; trongmoi numeric; tronglai numeric; xuctien numeric; trongbosung numeric; chamsoc numeric; tiathua numeric; chayrung numeric; saubenhhai numeric; lanchiem numeric; khaithactraiphep numeric; pharung numeric; thuydien numeric; khucongnghiep numeric; nongnghiep numeric; congtrinhcong numeric; mucdichkhac numeric; tangdientich numeric; giamdientich numeric; tongcong numeric; BEGIN DROP TABLE IF EXISTS calculate_table1; DROP TABLE IF EXISTS calculate_table2; DROP TABLE IF EXISTS calculate_table;  sql := 'CREATE TEMPORARY TABLE calculate_table1 AS SELECT  (0 - SUM(T1.area)) area, T2.monitoring_type_code, T1.forest_type_code,T1.forest_func_sub_code, T1.actor_type_code,T1.forest_use_sit_code, T1.change_type_id,T1.forest_org_code, T1.p_forest_org_code, T1.tree_spec_code ,T9.special_product ';  IF depart_level = 3 THEN sql:= sql || ' FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql:= sql || ' WHERE commune_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; sql_distinct:='select distinct(compt_code) as code, compt_code as name, 0 as area from plot where commune_code='  ||depart_id || ' order by compt_code'; ELSIF depart_level = 2 THEN sql:= sql || ' FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql:=sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code WHERE T3.district_code=' || depart_id ; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; sql_distinct:='select commune_code as code, name as name,area from commune where district_code = '||depart_id ||' order by name'; ELSIF depart_level = 1 THEN sql:=sql||' FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql:= sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code WHERE T4.province_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; sql_distinct:='select district_code as code, name as name,area from district where province_code = '||depart_id ||' order by name'; ELSIF depart_level = 0 THEN RAISE NOTICE 'sql_query:%',sql; sql:=sql||' FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql:=	sql||' WHERE  T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSE RETURN; END IF; sql := sql || ' GROUP BY T2.monitoring_type_code, T1.forest_type_code,T1.forest_func_sub_code, T1.actor_type_code,T1.forest_use_sit_code,T1.change_type_id,T1.forest_org_code, T1.p_forest_org_code,T1.tree_spec_code,T9.special_product';  RAISE NOTICE 'sql_query:%',sql; EXECUTE sql;  sql2:= 'CREATE TEMPORARY TABLE calculate_table2 AS SELECT  SUM(T1.area) area, T2.monitoring_type_code, T1.forest_type_code_after forest_type_code,T1.forest_func_sub_code_after forest_func_sub_code, T1.actor_type_code_after actor_type_code,T1.forest_use_sit_code_after forest_use_sit_code, T1.change_type_id,T1.forest_org_code_after forest_org_code, T1.p_forest_org_code_after p_forest_org_code , T1.tree_spec_code_after tree_spec_code ,T9.special_product ';  IF depart_level = 3 THEN sql2:= sql2 || ' FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql2:= sql2 || ' WHERE T1.commune_code=' || depart_id; sql2:= sql2  ||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql2:= sql2 ||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 2 THEN sql2:= sql2  || ' FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql2:= sql2 || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code WHERE T3.district_code=' || depart_id ; sql2:= sql2  ||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql2:= sql2 ||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 1 THEN sql2:= sql2  ||' FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql2:= sql2  || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code WHERE T4.province_code=' || depart_id; sql2:= sql2  ||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql2:= sql2  ||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 0 THEN sql2:= sql2  ||' FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text';  sql2:= sql2  ||' 	WHERE T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql2:= sql2  ||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; RAISE NOTICE 'sql_query:%',sql; ELSE RETURN; END IF; sql2:= sql2 || ' GROUP BY T2.monitoring_type_code, T1.forest_type_code_after,T1.forest_func_sub_code_after, T1.actor_type_code_after,T1.forest_use_sit_code_after,T1.change_type_id,T1.forest_org_code_after, T1.p_forest_org_code_after,T1.tree_spec_code_after,T9.special_product';  RAISE NOTICE 'sql_query2:%',sql2; EXECUTE sql2;  sql3:='CREATE TEMPORARY TABLE calculate_table AS select * from  calculate_table1 union all select * from calculate_table2 '; EXECUTE sql3; sql_distinct:= 'SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = ''1a_standard'' and row_order > 0 order by row_order'; TT:=0; FOR rec IN EXECUTE sql_distinct LOOP result.area_name = rec.name; result.code = rec.code; khaithacchon := 0; khaithactrang := 0; trongmoi := 0; tronglai := 0; xuctien := 0; trongbosung := 0; chamsoc := 0; tiathua := 0; chayrung := 0; saubenhhai := 0; lanchiem := 0; khaithactraiphep := 0; pharung := 0; thuydien := 0; khucongnghiep := 0; nongnghiep := 0; congtrinhcong := 0; mucdichkhac := 0; tangdientich := 0; giamdientich := 0; tongcong := 0; TT:=TT+1; FOR rec2 IN SELECT * FROM _formis_cal_forest_standard(rec,'change_type_id') AS (change_type_id  integer, area numeric) LOOP if rec2.change_type_id = 1 then khaithactrang:=khaithactrang+rec2.area; end if; if rec2.change_type_id = 2 then khaithacchon:=khaithacchon+rec2.area; end if; if rec2.change_type_id = 6 then trongmoi:=trongmoi+rec2.area; end if; if rec2.change_type_id = 7 then tronglai:=tronglai+rec2.area; end if; if rec2.change_type_id = 21 then xuctien:=xuctien+rec2.area; end if; if rec2.change_type_id = 22 then trongbosung:=trongbosung+rec2.area; end if; if rec2.change_type_id = 31 then chamsoc:=chamsoc+rec2.area; end if; if rec2.change_type_id = 32 then tiathua:=tiathua+rec2.area; end if;  if rec2.change_type_id = 8 then chayrung:=chayrung+rec2.area; end if; if rec2.change_type_id = 9 then saubenhhai:=saubenhhai+rec2.area; end if; if rec2.change_type_id = 10 then lanchiem:=lanchiem+rec2.area; end if; if rec2.change_type_id = 11 then khaithactraiphep:=khaithactraiphep+rec2.area; end if; if rec2.change_type_id = 12 then pharung:=pharung+rec2.area; end if;  if rec2.change_type_id = 13 then thuydien:=thuydien+rec2.area; end if; if rec2.change_type_id = 14 then khucongnghiep:=khucongnghiep+rec2.area; end if; if rec2.change_type_id = 15 then nongnghiep:=nongnghiep+rec2.area; end if; if rec2.change_type_id = 16 then congtrinhcong:=congtrinhcong+rec2.area; end if; if rec2.change_type_id = 17 then mucdichkhac:=mucdichkhac+rec2.area; end if;  if rec2.change_type_id = 41 then tangdientich:=tangdientich+rec2.area; end if; if rec2.change_type_id = 42 then giamdientich:=giamdientich+rec2.area; end if;  END LOOP;  result.TT :=TT; result.khaithacchon := khaithacchon; result.khaithactrang := khaithactrang; result.trongmoi := trongmoi; result.tronglai := tronglai; result.xuctien := xuctien; result.trongbosung := trongbosung; result.chamsoc := chamsoc; result.tiathua := tiathua; result.chayrung := chayrung; result.saubenhhai := saubenhhai; result.lanchiem := lanchiem; result.khaithactraiphep := khaithactraiphep; result.pharung := pharung; result.thuydien := thuydien; result.khucongnghiep := khucongnghiep; result.nongnghiep := nongnghiep; result.congtrinhcong := congtrinhcong; result.mucdichkhac := mucdichkhac; result.tangdientich := tangdientich; result.giamdientich := giamdientich; result.tongcong := tongcong; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_report8_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_form8_standard" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                  					TEXT; sql_query            					TEXT; sql_distinct							TEXT; sql_tmp                                  text; tmp 									text; result               					_formis_form8_standard; rec            record; rec2           record; plot_old_code name; TT integer; churung name; tenxa name; tieukhu name; khoanh name; lorung name; dientich numeric; ldlrdau name; ldlrcuoi name; lydo name; thoigian name; ghichu name; BEGIN DROP TABLE IF EXISTS calculate_table; sql := 'select t3.actor_name as churung, t1.commune_code as maxa, t2.name as tenxa, t1.compt_code as tieukhu, t1.sub_compt_code as khoanh, t1.plot_code as lorung, t1.area as dientich, t5.forest_type_def as ldlrdau, t6.forest_type_def as ldlrcuoi, t4.name as lydo, t1.date_time, to_char(t1.date_time, ''dd/MM/yyyy'') as thoigian, t1.description as ghichu, t1.change_type_id, t4.monitoring_type_id, t7.actor_name churung2 from forest_monitoring t1 inner join commune t2 on t1.commune_code = t2.commune_code inner join monitoring_change_type t4  on t1.change_type_id = t4.change_type_id left join forest_actor t3  on  t3.actor_id = t1.actor_id and t3.commune_code = t1.commune_code left join forest_actor t7 on t7.actor_id = t1.actor_id and t7.commune_code = t1.commune_code left join forest_type t5 on T5.forest_type_code = T1.forest_type_code and t5.lang = ''vi'' left join forest_type t6 on T1.forest_type_code_after = T6.forest_type_code and t6.lang = ''vi'' '; if depart_level = 3 then sql:= sql || ' where  t1.commune_code = ' || depart_id; elsif depart_level = 2 then sql := sql || ' INNER JOIN commune T8 ON T1.commune_code=T8.commune_code ';  sql :=  sql  || ' WHERE  T8.district_code=' || depart_id; elsif depart_level = 1 then sql := sql  || '	INNER JOIN commune T8 ON T1.commune_code=T8.commune_code INNER JOIN district T9 ON T4.district_code=T9.district_code'; sql :=  sql || ' WHERE T5.province_code=' || depart_id; else sql := sql || 'WHERE 1=1 '; end if;  sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'') order by T1.date_time desc';     RAISE NOTICE 'sql_query:%',sql;  FOR rec IN EXECUTE sql LOOP  result.TT :=TT; result.churung := rec.churung; if rec.churung is null then result.churung := rec.churung2; end if;  result.tenxa := rec.tenxa; result.tieukhu := rec.tieukhu; result.khoanh := rec.khoanh; result.lorung := rec.lorung; result.dientich := rec.dientich; result.ldlrdau := rec.ldlrdau; result.ldlrcuoi := rec.ldlrcuoi; result.lydo := rec.lydo; result.thoigian := rec.thoigian; result.ghichu := rec.ghichu;  RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_tree_specie_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_tree_form_standard" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql            text; sql_distinct   text; sql4            text; sql5            text; sql_1   text; result         _formis_tree_form_standard; l_cay          name; tong           numeric; captuoi1       numeric; captuoi2       numeric; captuoi3       numeric; captuoi4       numeric; captuoi5       numeric; dtchuatr       numeric; rec            record; rec2           record; curYear        int; age_class      int; loai_cay_name  CHARACTER VARYING (400); BEGIN SELECT extract (YEAR FROM to_date (end_date, 'dd/MM/yyyy')) INTO curYear;  DROP TABLE IF EXISTS calculate_table; IF DATE '2014-02-01' > to_date (end_date, 'dd/MM/yyyy') THEN sql := '	CREATE TEMPORARY TABLE calculate_table AS SELECT  '; IF report_type ='4a'  THEN sql := sql || ' SUM(T1.area) area'; ELSIF  report_type = '4b' THEN sql := sql || ' SUM(T1.volume_per_plot) area'; END IF; sql := sql || ', T1.tree_spec_code, T6.age_class, T8.forest_func_main_code, T8.forest_func_def,T1.planting_year, T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code'; sql := sql || ' FROM plot_history T1'; sql := sql || '  LEFT JOIN forest_function T8  ON T8.forest_func_sub_code=T1.forest_func_sub_code LEFT JOIN tree_specie T6 ON T6.tree_spec_code::text = T1.tree_spec_code::text ';  IF depart_level = 3 THEN                                                    -- commune level
 sql := sql || ' WHERE T1.commune_code=' || depart_id || ' AND T1.tree_spec_code is not null';    ELSIF depart_level = 2 THEN  sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' WHERE  T4.district_code=' || depart_id || ' AND T1.tree_spec_code is not null';    ELSIF depart_level = 1 THEN                                                   -- province level
 sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE  T5.province_code=' || depart_id || ' AND T1.tree_spec_code is not null';  ELSE RAISE NOTICE 'Selected tree_specie: %', sql; END IF; sql := sql || '  and T1.datemodify = DATE ''2014-01-01''  GROUP  BY T1.tree_spec_code, T6.age_class, T8.forest_func_main_code,  T8.forest_func_def,T1.forest_org_code,T1.forest_type_code, T1.forest_func_sub_code,T1.forest_use_sit_code,T1.planting_year order by T8.forest_func_main_code'; RAISE NOTICE 'Selected tree_specie: %', sql; EXECUTE sql; sql_distinct := 'select tree_spec_code from calculate_table group by tree_spec_code order by sum(area) desc'; ELSE sql := '	CREATE TEMPORARY TABLE calculate_table AS SELECT  '; sql4 := '	CREATE TEMPORARY TABLE calculate_table4 AS SELECT  '; sql5 := '	CREATE TEMPORARY TABLE calculate_table5 AS SELECT  '; IF report_type ='4a'  THEN sql := sql || ' SUM(T1.area) area'; sql4 := sql4 || ' SUM(T1.area) area'; sql5 := sql5 || ' (0-SUM(T1.area)) area'; ELSIF  report_type = '4b' THEN sql := sql || ' SUM(T1.volume_per_plot) area'; sql4 := sql4 || ' SUM(T1.volume_per_plot) area'; sql5 := sql5 || ' (0-SUM(T1.volume_per_plot)) area'; END IF;    sql:= sql || ' ,T1.tree_spec_code,' ; sql:= sql || ' T6.age_class,' ; sql := sql || ' T1.planting_year, T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code'; sql := sql || ' FROM plot T1 LEFT JOIN tree_specie T6 ON T6.tree_spec_code::text = T1.tree_spec_code::text ';   sql4 := sql4 || ', T1.tree_spec_code, T6.age_class, T1.planting_year, T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code'; sql4 := sql4 || ' FROM forest_monitoring T1'; sql4 := sql4 || ' LEFT JOIN tree_specie T6 ON T6.tree_spec_code::text = T1.tree_spec_code::text ';  sql5 := sql5 || ', T1.tree_spec_code_after, T6.age_class, T1.planting_year_after, T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code'; sql5 := sql5 || ' FROM forest_monitoring T1'; sql5 := sql5 || ' LEFT JOIN tree_specie T6 ON T6.tree_spec_code::text = T1.tree_spec_code::text ';  IF depart_level = 3 THEN                                                    -- commune level
  sql := sql || ' WHERE T1.commune_code=' || depart_id || '  and  T1.tree_spec_code is not null';   sql_distinct := 'select tree_spec_code from plot_history where commune_code = ' ||  depart_id || ' and tree_spec_code is not null ' ; sql_distinct := sql_distinct || ' group by tree_spec_code order by  tree_spec_code;';   ELSIF depart_level = 2 THEN                                                   -- district level
 sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' WHERE  T4.district_code=' || depart_id || '  and  T1.tree_spec_code is not null';  sql_distinct := 'select tree_spec_code from plot_history left join commune on commune.commune_code =  plot_history.commune_code where commune.district_code = ' ||  depart_id || ' and tree_spec_code is not null ' ;  sql_distinct := sql_distinct || ' group by tree_spec_code order by  tree_spec_code;';  ELSIF depart_level = 1 THEN                                                   -- province level
  sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE  T5.province_code=' || depart_id || '  and  T1.tree_spec_code is not null';   sql_distinct := 'select distinct(tree_spec_code) from plot_history where commune_code in (select commune_code from commune where district_code in (select district_code from district where province_code= ' || depart_id || ')) and tree_spec_code is not null order by tree_spec_code;'; ELSE  RAISE NOTICE 'Selected tree_specie: %', sql;    sql_distinct := '	select distinct(tree_spec_code) from plot_history tree_spec_code is not null order by tree_spec_code '; END IF;  sql := sql || ' GROUP  BY   T1.tree_spec_code, T6.age_class,T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code,T1.planting_year order by T1.forest_func_sub_code';     RAISE NOTICE 'Selected tree_specie: %', sql; EXECUTE sql;  END IF;  sql_distinct := 'select tree_spec_code from calculate_table group by tree_spec_code order by sum(area) desc'; RAISE NOTICE 'Selected species: %', sql_distinct; FOR rec IN EXECUTE sql_distinct LOOP l_cay := rec.tree_spec_code; RAISE NOTICE 'Selected area:'; tong := 0; captuoi1 := 0; captuoi2 := 0; captuoi3 := 0; captuoi4 := 0; captuoi5 := 0; dtchuatr := 0; sql_1 := 'select * from _formis_get_tree_spec_abbr('''|| l_cay ||''')'; EXECUTE sql_1 into loai_cay_name; result.tree_name = loai_cay_name; age_class := 0; FOR rec2 IN SELECT * FROM calculate_table LOOP age_class = rec2.age_class;  IF age_class = 0 OR age_class IS NULL THEN sql_1 = 'select * from _formis_get_tree_age_class('''|| l_cay ||''') '; EXECUTE sql_1 into age_class; IF age_class = 0 OR age_class IS NULL -- No way to determine the age class of specie
 THEN age_class = 3; END IF; END IF; IF rec2.forest_type_code >= 60 and rec2.forest_type_code <=71 then IF lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) THEN tong := tong + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear - rec2.planting_year) / age_class) + 1) <= 1 THEN captuoi1 := captuoi1 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear - rec2.planting_year) / age_class) + 1) = 2 THEN captuoi2 := captuoi2 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) = 3 THEN captuoi3 := captuoi3 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear - rec2.planting_year) / age_class) + 1) = 4 THEN captuoi4 := captuoi4 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear - rec2.planting_year) / age_class) + 1) >= 5 THEN captuoi5 := captuoi5 + rec2.area; END IF; ELSIF   rec2.forest_type_code >= 72 and rec2.forest_type_code <=77 then IF lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) THEN dtchuatr := dtchuatr + rec2.area; END IF; END IF;  END LOOP;     result.tong = tong; result.captuoi1 = captuoi1; result.captuoi2 = captuoi2; result.captuoi3 = captuoi3; result.captuoi4 = captuoi4; result.captuoi5 = captuoi5; result.dtchuatr = dtchuatr; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_add_plot_tmp"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="1"/>
	</return-type>
	<parameter name="commune_code">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="compt_code">
		<type name="character varying" length="0"/>
	</parameter>
	<parameter name="sub_compt_code">
		<type name="character varying" length="0"/>
	</parameter>
	<parameter name="plot_code">
		<type name="character varying" length="0"/>
	</parameter>
	<parameter name="user_id">
		<type name="integer" length="0"/>
	</parameter>
	<definition><![CDATA[ DECLARE sql text; sql_monitoring text; BEGIN sql='INSERT INTO plot_change_tmp( plot_code, sub_compt_code, compt_code, commune_code, parcel_code, map_sheet, village, area, forest_org_code, forest_type_code, planting_year, avg_year_canopy, p_forest_org_code, plant_state_code, volume_per_ha, stem_per_ha, volume_per_plot, stem_per_plot, site_cond_code, forest_func_sub_code, conflict_sit_code, land_use_cert_code, land_use_terune, prot_contr_code, forest_use_sit_code, nar_for_org_code, old_plot_code, pos_status_code, geom, personmodify, datemodify, approval_status) SELECT plot_code, sub_compt_code, compt_code, commune_code, parcel_code, map_sheet, village, area, forest_org_code, forest_type_code, planting_year, avg_year_canopy, p_forest_org_code, plant_state_code, volume_per_ha, stem_per_ha, volume_per_plot, stem_per_plot, site_cond_code, forest_func_sub_code, conflict_sit_code, land_use_cert_code, land_use_terune, prot_contr_code, forest_use_sit_code, nar_for_org_code, old_plot_code, pos_status_code, geom,'||user_id||', LOCALTIMESTAMP, 0 FROM plot where commune_code='||commune_code||' and compt_code = ' ||''''|| compt_code||'''' || 'and sub_compt_code= ' ||''''|| sub_compt_code||'''' || ' and plot_code=' ||''''|| plot_code||''''; sql_monitoring = 'INSERT INTO forest_monitoring( commune_code, compt_code, sub_compt_code, plot_code, change_type_id, date_time, area, volume, stems_no, method_plantation, density_wood, density_bamboo, stems_no_thin, stems_no_bamboo_thin, forest_type_code, forest_func_sub_code, description) SELECT commune_code, compt_code, sub_compt_code, plot_code, change_type_id, date_time, area_affected, volume_affected, stems_no_affected, method_plantation, density_wood, density_bamboo, stems_no_thin, stems_no_bamboo_thin, forest_type_code, forest_func_sub_code, desc_monitor FROM plot where not exists (select (1) from forest_monitoring fm where fm.commune_code = plot.commune_code and fm.compt_code = plot.compt_code and fm.sub_compt_code = plot.sub_compt_code and fm.plot_code = plot.plot_code and fm.date_time = plot.date_time) and change_type_id is not null and date_time is not null and  commune_code='||commune_code||' and compt_code = ' ||''''|| compt_code||'''' || ' and sub_compt_code= ' ||''''|| sub_compt_code||'''' || ' and plot_code=' ||''''|| plot_code||''''; EXECUTE sql; EXECUTE sql_monitoring; END; ]]></definition>
</function>

<function name="_formis_cal_1vol"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; no_tree_specie_code=rec.no_tree_specie_code;   sql :='SELECT plot.'|| group_by || ',  sum (plot.volume) as volume, sum (plot.stems) AS area FROM calculate_table plot WHERE   1=1 ';  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND plot.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; sql := sql || ' GROUP BY plot.' || group_by || ';'; RAISE NOTICE 'code:%, sql: %,',rec.code,sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_forest"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; no_tree_specie_code=rec.no_tree_specie_code; sql :='SELECT plot.'|| group_by || ',  SUM (plot.area) AS area FROM calculate_table plot WHERE   1=1 ';  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND plot.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; sql := sql || ' GROUP BY plot.' || group_by || ';'; RAISE NOTICE 'code:%, sql: %,',rec.code,sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_forest2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); code text; BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; no_tree_specie_code=rec.no_tree_specie_code; code = rec.code; sql :='SELECT plot.'|| group_by || ',  SUM (plot.area) AS area FROM calculate_table plot WHERE   1=1 ';  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; if code in ('2000','2010','2020','2030','2050','2060') THEN sql:=sql||' AND plot.forest_use_sit_code = 0'; end if; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND plot.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; sql := sql || ' GROUP BY plot.' || group_by || ';'; RAISE NOTICE 'code:%, sql: %,',rec.code,sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_forest_begin_period"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="nqh">
		<type name="boolean" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); result1 numeric; BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; no_tree_specie_code=rec.no_tree_specie_code; sql :='SELECT SUM (plot.area) AS area FROM calculate_table_history plot WHERE   1=1 ';  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; if (nqh) then sql:=sql||' AND plot.forest_use_sit_code = 0'; end if; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND plot.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; RAISE NOTICE 'code:%, sql: %,',rec.code,sql; EXECUTE sql into result1; RETURN result1; END; ]]></definition>
</function>

<function name="_formis_cal_forest_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); code text; BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; no_tree_specie_code=rec.no_tree_specie_code; code = rec.code; sql :='SELECT plot.'|| group_by || ',  SUM (plot.area) AS area FROM calculate_table plot WHERE   1=1 ';  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; if code in ('1124') then sql := sql || ' AND (plot.tree_spec_code IN (''' || 31 ||''')' || ' OR plot.special_product = 1)'; end if; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND plot.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; sql := sql || ' GROUP BY plot.' || group_by || ';'; RAISE NOTICE 'code:%, sql: %,',rec.code,sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_forest_standard"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="table_calculate">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); code text; BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; no_tree_specie_code=rec.no_tree_specie_code; code = rec.code; sql :='SELECT plot.'|| group_by || ',  SUM (plot.area) AS area FROM ' ||table_calculate || ' plot WHERE   1=1 ';  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; if code in ('1124') then sql := sql || ' AND (plot.tree_spec_code IN (''' || 31 ||''')' || ' OR plot.special_product = 1)'; end if; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND plot.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; sql := sql || ' GROUP BY plot.' || group_by || ';'; RAISE NOTICE 'code:%, sql: %,',rec.code,sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_monitor_mon2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_func_sub_code text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); code text; BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; forest_func_sub_code = rec.forest_func_sub_code; no_tree_specie_code=rec.no_tree_specie_code; code = rec.code; sql :='SELECT plot.'|| group_by || ',  SUM(plot.area) area, SUM(plot.volume) volume,SUM(plot.stems_no) stems_no FROM calculate_table plot WHERE   1=1 ';  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_func_sub_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_func_sub_code IN ('||forest_func_sub_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; if code in ('2000','2010','2020','2030','2050','2060') THEN sql:=sql||' AND plot.forest_use_sit_code = 0'; end if; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND plot.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; sql := sql || ' GROUP BY plot.' || group_by || ';'; RAISE NOTICE 'code:%, sql: %,',rec.code,sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_monitor_mon35"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     text; forest_type_code_from   integer; forest_type_code_to     integer; p_forest_org_code       numeric; site_cond_code_from     numeric; site_cond_code_to       numeric; volume_per_ha_from      numeric; volume_per_ha_to        numeric; forest_type_special     text; land_use_cert_code      character (20); conflict_sit_code       numeric (1, 0); tree_specie_abbr        character (50); forest_func_sub_code    text; forest_use_sit_code_from   integer; forest_use_sit_code_to     integer; actor_type_code    text; BEGIN forest_type_code_from = rec.forest_type_code_from;  forest_type_code_to = rec.forest_type_code_to; forest_type_special = rec.forest_type_special; forest_func_sub_code = rec.forest_func_sub_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to;  actor_type_code = rec.actor_type_code; if report_type = 'mon5' then sql :='SELECT plot.'|| group_by || ',  SUM (plot.area) AS area FROM calculate_table plot WHERE   1=1 '; ELSIF report_type = 'mon3' then sql :='SELECT plot.'|| group_by || ',  SUM(plot.area) area, SUM(plot.volume) volume,SUM(plot.stems_no) stems_no FROM calculate_table plot WHERE   1=1 '; else sql := ''; end if; IF actor_type_code is not null then sql:=sql||' AND plot.actor_type_code IN ('|| actor_type_code|| ')'; END IF;  IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF;  sql := sql || ' group by plot.' || group_by || ',actor_type_code'; RAISE NOTICE 'sql_query:%',sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_monitor_mon4"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     text; forest_type_code_from   integer; forest_type_code_to     integer; p_forest_org_code       numeric; site_cond_code_from     numeric; site_cond_code_to       numeric; volume_per_ha_from      numeric; volume_per_ha_to        numeric; forest_type_special     text; land_use_cert_code      character (20); conflict_sit_code       numeric (1, 0); tree_specie_abbr        character (50); forest_func_sub_code    text; forest_use_sit_code_from   integer; forest_use_sit_code_to     integer; actor_type_code    text; BEGIN forest_type_code_from = rec.forest_type_code_from;  forest_type_code_to = rec.forest_type_code_to; forest_type_special = rec.forest_type_special; forest_func_sub_code = rec.forest_func_sub_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to;  actor_type_code = rec.actor_type_code; if report_type = 'mon5' then sql :='SELECT plot.'|| group_by || ',  SUM (plot.area) AS area FROM calculate_table plot WHERE   1=1 '; ELSIF report_type = 'mon3' then sql :='SELECT plot.'|| group_by || ',  SUM(plot.area) area, SUM(plot.volume) volume,SUM(plot.stems_no) stems_no FROM calculate_table plot WHERE   1=1 '; else sql := ''; end if; IF actor_type_code is not null then sql:=sql||' AND plot.actor_type_code IN ('|| actor_type_code|| ')'; END IF;  IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF;  sql := sql || ' group by plot.' || group_by || ',actor_type_code'; RAISE NOTICE 'sql_query:%',sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_monitor_mon4"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="group_by">
		<type name="name" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     text; forest_type_code_from   integer; forest_type_code_to     integer; p_forest_org_code       numeric; site_cond_code_from     numeric; site_cond_code_to       numeric; volume_per_ha_from      numeric; volume_per_ha_to        numeric; forest_type_special     text; land_use_cert_code      character (20); conflict_sit_code       numeric (1, 0); tree_specie_abbr        character (50); forest_func_sub_code    text; forest_use_sit_code_from   integer; forest_use_sit_code_to     integer; actor_type_code    text; BEGIN forest_type_code_from = rec.forest_type_code_from;  forest_type_code_to = rec.forest_type_code_to; forest_type_special = rec.forest_type_special; forest_func_sub_code = rec.forest_func_sub_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to;  actor_type_code = rec.actor_type_code; sql :='SELECT plot.'|| group_by || ',  SUM (plot.area) AS area FROM calculate_table plot WHERE   1=1 ';  IF actor_type_code is not null then sql:=sql||' AND plot.actor_type_code IN ('|| actor_type_code|| ')'; END IF;  IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF;  sql := sql || ' group by plot.' || group_by || ',actor_type_code;'; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_monitoring_forest"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="unit_code">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_level">
		<type name="integer" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; no_tree_specie_code=rec.no_tree_specie_code;  sql := '	SELECT monitoring_change_type.change_type_id,SUM(forest_monitoring.area) area FROM forest_monitoring INNER JOIN monitoring_change_type ON forest_monitoring.change_type_id=monitoring_change_type.change_type_id LEFT JOIN tree_specie T9 ON forest_monitoring.tree_spec_code::text=T9.tree_spec_code::text ';  IF report_level = 3 THEN sql := sql || ' WHERE commune_code=' || unit_code; sql := sql || ' AND forest_monitoring.date_time::date >=''' || to_date (start_date, 'dd/MM/yyyy') || ''''; sql := sql || ' AND forest_monitoring.date_time::date <=''' || to_date (end_date, 'dd/MM/yyyy') || ''''; ELSIF report_level = 2 THEN sql := sql || ' INNER JOIN commune ON forest_monitoring.commune_code=commune.commune_code '; sql := sql || ' INNER JOIN district ON commune.district_code=district.district_code '; sql := sql || ' WHERE district.district_code=' || unit_code; sql := sql || ' AND forest_monitoring.date_time::date >=''' || to_date (start_date, 'dd/MM/yyyy') || ''''; sql := sql || ' AND forest_monitoring.date_time::date <=''' || to_date (end_date, 'dd/MM/yyyy') || ''''; ELSIF report_level = 1 THEN sql := sql || ' INNER JOIN commune ON forest_monitoring.commune_code=commune.commune_code '; sql := sql || ' INNER JOIN district ON commune.district_code=district.district_code '; sql := sql || ' INNER JOIN province ON district.province_code=province.province_code '; sql := sql || ' WHERE province.province_code=' || unit_code; sql := sql || ' AND forest_monitoring.date_time::date >=''' || to_date (start_date, 'dd/MM/yyyy') || ''''; sql := sql || ' AND forest_monitoring.date_time::date <=''' || to_date (end_date, 'dd/MM/yyyy') || ''''; ELSE END IF;  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( forest_monitoring.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (forest_monitoring.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND forest_monitoring.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND forest_monitoring.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND forest_monitoring.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND forest_monitoring.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND forest_monitoring.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND forest_monitoring.site_cond_code<=' || site_cond_code_to; END IF;  IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  forest_monitoring.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND forest_monitoring.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND forest_monitoring.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND forest_monitoring.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF;  IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND forest_monitoring.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND forest_monitoring.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND forest_monitoring.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND forest_monitoring.forest_use_sit_code <='||forest_use_sit_code_to; END IF; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND forest_monitoring.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND T9.special_product='||special_product; END IF;  sql := sql || ' GROUP BY monitoring_change_type.change_type_id'; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_monitoring_forest_by_reason_types"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="unit_code">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_level">
		<type name="integer" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		integer; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; sql :='SELECT plot.begin_sub_code, plot.begin_actor_type_code, plot.end_sub_code, plot.end_actor_type_code, plot.forest_type_code, plot.forest_func_sub_code, plot.plot_code, SUM (plot.area) AS area FROM calculate_table plot WHERE   1=1 '; IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_specie_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code=' ||nar_for_org_code; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; sql := sql || ' GROUP BY plot.' || group_by || ';'; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_monitoring_forest_by_reason_types"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_func_sub_code text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); code text; BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; forest_use_sit_code_from = rec.forest_use_sit_code_from; forest_use_sit_code_to = rec.forest_use_sit_code_to; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; forest_func_sub_code = rec.forest_func_sub_code; no_tree_specie_code=rec.no_tree_specie_code; code = rec.code; sql :='SELECT plot.begin_sub_code, plot.begin_actor_type_code, plot.end_sub_code, plot.end_actor_type_code, plot.forest_type_code, plot.forest_func_sub_code, plot.plot_code, plot.monitoring_type_id, plot.change_type_id, SUM (plot.area) AS area FROM calculate_table plot WHERE   1=1 '; IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( plot.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (plot.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND plot.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND plot.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND plot.site_cond_code<=' || site_cond_code_to; END IF; IF volume_per_ha_from IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha > ' || volume_per_ha_from; END IF; IF volume_per_ha_to IS NOT NULL THEN sql := sql || ' AND plot.volume_per_ha <= ' || volume_per_ha_to; END IF; IF land_use_cert_code IS NOT NULL THEN sql:=sql || ' AND  plot.land_use_cert_code in ('||land_use_cert_code ||')'; END IF;  IF conflict_sit_code IS NOT NULL THEN sql := sql || ' AND plot.conflict_sit_code = ' || conflict_sit_code; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND plot.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF nar_for_org_code IS NOT NULL THEN sql :=sql||' AND plot.nar_for_org_code IN (' ||nar_for_org_code||')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND plot.special_product='||special_product; END IF; IF plant_state_code IS NOT NULL THEN sql:=sql ||' AND plot.plant_state_code='||plant_state_code; END IF; IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_func_sub_code IS NOT NULL THEN sql:=sql ||' AND plot.forest_func_sub_code IN ('||forest_func_sub_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND plot.forest_use_sit_code <='||forest_use_sit_code_to; END IF; if code in ('2000','2010','2020','2030','2050','2060') THEN sql:=sql||' AND plot.forest_use_sit_code = 0'; end if; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND plot.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; sql := sql || ' GROUP BY plot.begin_sub_code, plot.begin_actor_type_code, plot.end_sub_code, plot.end_actor_type_code, plot.forest_type_code, plot.forest_func_sub_code, plot.plot_code, plot.monitoring_type_id, plot.change_type_id '; RAISE NOTICE 'code:%, sql2: %,',rec.code,sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_cal_monitoring_forest_vol"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record" length="1"/>
	</return-type>
	<parameter name="rec">
		<type name="public._formis_config_report" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="unit_code">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_level">
		<type name="integer" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                     	text; forest_type_code_from   	integer; forest_type_code_to     	integer; p_forest_org_code       	numeric; site_cond_code_from    	numeric; site_cond_code_to       	numeric; volume_per_ha_from      	numeric; volume_per_ha_to        	numeric; forest_type_special     	text; land_use_cert_code      	character (20); conflict_sit_code       	numeric (1, 0); tree_specie_code		character (100); nar_for_org_code		text; special_product			integer; plant_state_code		integer; forest_org_code			text; forest_use_sit_code_from	integer; forest_use_sit_code_to		integer; no_tree_specie_code		character (100); BEGIN forest_type_code_from = rec.forest_type_code_from; forest_type_code_to = rec.forest_type_code_to; p_forest_org_code = rec.p_forest_org_code; site_cond_code_from = rec.site_cond_code_from; site_cond_code_to = rec.site_cond_code_to; volume_per_ha_from = rec.volume_per_ha_from; volume_per_ha_to = rec.volume_per_ha_to; forest_type_special = rec.forest_type_special; land_use_cert_code = rec.land_use_cert_code; conflict_sit_code = rec.conflict_sit_code; tree_specie_code=rec.tree_specie_code; nar_for_org_code=rec.nar_for_org_code; special_product=rec.special_product; plant_state_code=rec.plant_state_code; forest_org_code=rec.forest_org_code; no_tree_specie_code=rec.no_tree_specie_code; sql := '	SELECT monitoring_change_type.monitoring_type_code,forest_monitoring.forest_func_sub_code,SUM(forest_monitoring.volume) volume,SUM(forest_monitoring.stems_no) stems_no,forest_monitoring.forest_use_sit_code  FROM forest_monitoring INNER JOIN monitoring_change_type ON forest_monitoring.change_type_id=monitoring_change_type.change_type_id LEFT JOIN tree_specie T9 ON forest_monitoring.tree_spec_code::text=T9.tree_spec_code::text ';  IF report_level = 3 THEN sql := sql || ' WHERE commune_code=' || unit_code; sql := sql || ' AND forest_monitoring.date_time::date >=''' || to_date (start_date, 'dd/MM/yyyy') || ''''; sql := sql || ' AND forest_monitoring.date_time::date <=''' || to_date (end_date, 'dd/MM/yyyy') || ''''; ELSIF report_level = 2 THEN sql := sql || ' INNER JOIN commune ON forest_monitoring.commune_code=commune.commune_code '; sql := sql || ' INNER JOIN district ON commune.district_code=district.district_code '; sql := sql || ' WHERE district.district_code=' || unit_code; sql := sql || ' AND forest_monitoring.date_time::date >=''' || to_date (start_date, 'dd/MM/yyyy') || ''''; sql := sql || ' AND forest_monitoring.date_time::date <=''' || to_date (end_date, 'dd/MM/yyyy') || ''''; ELSIF report_level = 1 THEN sql := sql || ' INNER JOIN commune ON forest_monitoring.commune_code=commune.commune_code '; sql := sql || ' INNER JOIN district ON commune.district_code=district.district_code '; sql := sql || ' INNER JOIN province ON district.province_code=province.province_code '; sql := sql || ' WHERE province.province_code=' || unit_code; sql := sql || ' AND forest_monitoring.date_time::date >=''' || to_date (start_date, 'dd/MM/yyyy') || ''''; sql := sql || ' AND forest_monitoring.date_time::date <=''' || to_date (end_date, 'dd/MM/yyyy') || ''''; ELSE END IF;  IF forest_type_special IS NOT NULL	THEN sql :=sql ||' AND ( forest_monitoring.forest_type_code IN ('|| forest_type_special|| ')'; IF forest_type_code_from IS NOT NULL AND forest_type_code_to IS NOT NULL  THEN sql :=sql ||' OR (forest_monitoring.forest_type_code >='||forest_type_code_from; sql :=sql ||' AND forest_monitoring.forest_type_code <='  || forest_type_code_to; sql :=sql ||')'; END IF; sql :=sql ||' )'; ELSE IF forest_type_code_from IS NOT NULL THEN sql :=sql ||' AND forest_monitoring.forest_type_code >='  || forest_type_code_from; END IF; IF forest_type_code_to IS NOT NULL THEN sql :=sql ||' AND forest_monitoring.forest_type_code <='  || forest_type_code_to; END IF; END IF; IF p_forest_org_code IS NOT NULL THEN sql := sql || ' AND forest_monitoring.p_forest_org_code=' || p_forest_org_code; END IF;  IF site_cond_code_from IS NOT NULL THEN sql := sql || ' AND forest_monitoring.site_cond_code>=' || site_cond_code_from; END IF; IF site_cond_code_to IS NOT NULL THEN sql := sql || ' AND forest_monitoring.site_cond_code<=' || site_cond_code_to; END IF;  IF forest_org_code IS NOT NULL THEN sql:=sql ||' AND forest_monitoring.forest_org_code IN ('||forest_org_code||')'; END IF; IF forest_use_sit_code_from IS NOT NULL THEN sql:=sql||' AND forest_monitoring.forest_use_sit_code>='||forest_use_sit_code_from; END IF; IF forest_use_sit_code_to IS NOT NULL THEN sql:=sql||' AND forest_monitoring.forest_use_sit_code <='||forest_use_sit_code_to; END IF; IF tree_specie_code IS NOT NULL  THEN sql := sql || ' AND forest_monitoring.tree_spec_code IN (''' || tree_specie_code ||''')'; END IF; IF no_tree_specie_code IS NOT NULL THEN sql := sql || ' AND forest_monitoring.tree_spec_code not IN (''' || no_tree_specie_code ||''')'; END IF; IF special_product IS NOT NULL THEN sql:=sql||' AND T9.special_product='||special_product; END IF;   sql := sql || ' GROUP BY monitoring_change_type.monitoring_type_code,forest_monitoring.forest_func_sub_code,forest_monitoring.forest_use_sit_code'; RAISE NOTICE 'Monitoring query vol : %', sql; RETURN QUERY EXECUTE sql; RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_1vol"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_forest_1vol" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE cn                   name; sql                  text; result               _formis_forest_1vol; rec                  _formis_config_report; rec_result           record; rec_monitoring       record; tru_luong_dau_ky     NUMERIC;             -- volume in the begining of year
 thay_doi_go          NUMERIC;                  -- change in wood volume, m3
 thay_doi_tre_nua     NUMERIC;         -- change in bamboo stems, 1000 stems
 tong_tru_luong       NUMERIC; -- total volume of 3 types forest + areas outside forestry in use, m3
 tong_tru_luong_3lr   NUMERIC;             -- total volume of 3 types forest
 tong_tre_nua         NUMERIC; -- total number of bamboo stems of  3 types forest + areas outside forestry use, 1000 stems
 tong_tre_nua_3lr     NUMERIC; -- total number of bamboo stems of 3 types forest, 1000 stems
 rung_dd              NUMERIC;                     -- special use forest, m3
 rung_ph              NUMERIC;                      -- protection forest, m3
 rung_sx              NUMERIC;                      -- plantation forest, m3
 nqh                  NUMERIC;                 --volume outside forestry use
 BEGIN DROP TABLE IF EXISTS calculate_table;  sql := '	CREATE TEMPORARY TABLE calculate_table AS SELECT SUM(T1.volume_per_plot) volume, SUM(stem_per_plot) stems'; IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || ' ,T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.volume_per_ha,T1.site_cond_code,'; sql:= sql || ' ( SELECT array_to_string(array_agg(ts.tree_spec_code), ''' || '+' || '''' || ') AS array_to_string FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code) AS tree_spec_code,' ; sql:= sql || 'T1.forest_org_code,T1.nar_for_org_code, ( SELECT ts.special_product FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code limit 1) AS special_product, T1.plant_state_code FROM plot T1 ';  ELSE sql:= sql || ',T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.volume_per_ha,T1.site_cond_code,T1.tree_spec_code, T1.forest_org_code,T1.nar_for_org_code,T9.special_product,T1.plant_state_code'; sql:= sql || ' FROM plot_history T1 '; END IF;  IF depart_level = 3 THEN                                                    -- commune level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' WHERE T1.commune_code=' || depart_id; ELSE sql := sql || '	INNER JOIN ( SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history WHERE commune_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_code,sub_compt_code,compt_code,commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';  sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql := sql || ' WHERE T1.commune_code=' || depart_id; END IF;  ELSIF depart_level = 2 THEN IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql := sql || ' WHERE  T4.district_code=' || depart_id; ELSE sql := sql || '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code	WHERE commune.district_code=' || depart_id  || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))'  || ' GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE';   sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql := sql || ' WHERE  T4.district_code=' || depart_id; END IF;  ELSIF depart_level = 1 THEN                                                   -- province level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'sql: %',sql; ELSE sql := sql || '	INNER JOIN (SELECT  MAX(dateapproval) MAX_DATE,plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code INNER JOIN district ON commune.district_code=district.district_code WHERE district.province_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_code,plot_history.sub_compt_code,plot_history.compt_code,plot_history.commune_code) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text';  sql := sql || ' WHERE T5.province_code=' || depart_id; END IF;  ELSE IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'sql: %',sql; ELSE sql := sql || '	INNER JOIN (	SELECT  MAX(dateapproval) MAX_DATE,plot_code,sub_compt_code,compt_code,commune_code FROM plot_history ' || 'WHERE  (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || 'GROUP BY plot_code,sub_compt_code,compt_code,commune_code ) T2 ON T1.plot_code=T2.plot_code AND T1.sub_compt_code=T2.sub_compt_code AND T1.compt_code=T2.compt_code AND T1.commune_code=T2.commune_code AND T1.dateapproval=T2.MAX_DATE'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text';  END IF;   END IF; IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.volume_per_ha, tree_spec_code, special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code '; ELSE sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.volume_per_ha, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code '; END IF; RAISE NOTICE 'sql: %',sql; EXECUTE sql;   FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = 'forest_type' ORDER BY row_order LOOP result.forest_type = rec.name; result.code = rec.code; tru_luong_dau_ky := 0; thay_doi_go := 0; thay_doi_tre_nua := 0; tong_tru_luong := 0; tong_tru_luong_3lr := 0; tong_tre_nua := 0; tong_tre_nua_3lr := 0; rung_dd := 0; rung_ph := 0; rung_sx := 0; nqh := 0; FOR rec_result IN SELECT * FROM _formis_cal_1vol(rec,'forest_func_sub_code') AS (forest_func_sub_code  numeric, volume numeric, stems numeric) LOOP IF rec_result.forest_func_sub_code IN  (1,2,3,4) THEN -- special use
 rung_ph:= rung_ph + rec_result.volume; tru_luong_dau_ky:=tru_luong_dau_ky+rec_result.volume; tong_tre_nua:=tong_tre_nua+rec_result.stems; tong_tre_nua_3lr:=tong_tre_nua_3lr+rec_result.stems; ELSIF rec_result.forest_func_sub_code IN  (5,6,7,8) THEN  -- protection
 rung_dd:=rung_dd + rec_result.volume; tong_tre_nua:=tong_tre_nua+rec_result.stems; tong_tre_nua_3lr:=tong_tre_nua_3lr+rec_result.stems; tru_luong_dau_ky:=tru_luong_dau_ky+rec_result.volume; ELSIF rec_result.forest_func_sub_code IN  (9,10,11,12) THEN -- production
 rung_sx:=rung_sx+ rec_result.volume; tong_tre_nua:=tong_tre_nua+rec_result.stems; tong_tre_nua_3lr:=tong_tre_nua_3lr+rec_result.stems; tru_luong_dau_ky:=tru_luong_dau_ky+rec_result.volume; ELSE -- outside forestry use
 tong_tre_nua:=tong_tre_nua+rec_result.stems; nqh:= nqh + rec_result.volume; tru_luong_dau_ky:=tru_luong_dau_ky+rec_result.volume; END IF;  END LOOP; FOR rec_monitoring IN SELECT * FROM _formis_cal_monitoring_forest_vol(rec,start_date,end_date,depart_id,depart_level) AS (monitoring_type_code int,forest_func_sub_code NUMERIC,volume numeric,stems_no numeric,forest_use_sit_code numeric) LOOP IF rec_monitoring.forest_use_sit_code = 0 THEN-- special use
 IF rec_monitoring.monitoring_type_code=11 OR rec_monitoring.monitoring_type_code=21 OR rec_monitoring.monitoring_type_code=22 THEN thay_doi_go:=thay_doi_go+rec_monitoring.volume; thay_doi_tre_nua:=thay_doi_tre_nua+rec_monitoring.stems_no; ELSIF rec_monitoring.monitoring_type_code>=1 AND rec_monitoring.monitoring_type_code<=5 THEN thay_doi_go:=thay_doi_go-rec_monitoring.volume; thay_doi_tre_nua:=thay_doi_tre_nua-rec_monitoring.stems_no; END IF;  ELSE -- outside forestry use
 IF rec_monitoring.monitoring_type_code=11 OR rec_monitoring.monitoring_type_code=21 OR rec_monitoring.monitoring_type_code=22 THEN thay_doi_go:=thay_doi_go+rec_monitoring.volume; thay_doi_tre_nua:=thay_doi_tre_nua+rec_monitoring.stems_no; ELSIF rec_monitoring.monitoring_type_code>=1 AND rec_monitoring.monitoring_type_code<=5 THEN thay_doi_go:=thay_doi_go-rec_monitoring.volume; thay_doi_tre_nua:=thay_doi_tre_nua-rec_monitoring.stems_no; END IF; END IF; END LOOP;  tong_tru_luong := rung_dd + rung_sx + rung_ph + nqh; tong_tru_luong_3lr := rung_dd + rung_sx + rung_ph; result.rung_dd = rung_dd; result.rung_ph = rung_ph; result.rung_sx = rung_sx; result.nqh = nqh; result.tong_tru_luong = tong_tru_luong; result.tong_tru_luong_3lr = tong_tru_luong_3lr; result.tong_tre_nua = tong_tre_nua; result.tong_tre_nua_3lr = tong_tre_nua_3lr; result.tru_luong_dau_ky = tong_tru_luong - thay_doi_go; result.thay_doi_go = thay_doi_go; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_3"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_forest_3" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql					TEXT; name					TEXT; result               			_formis_forest_3; rec                  			_formis_config_report; rec_result           			record; code 					TEXT; change_in_forest_function         	FLOAT; change_in_forest_owner          	FLOAT; change_in_area             		FLOAT; new_plantation              		FLOAT; harvesting                		FLOAT; fire                  			FLOAT; disease                 		FLOAT; illegal_cutting             		FLOAT; hydropower                		FLOAT; industry                		FLOAT; agriculture               		FLOAT; construction              		FLOAT; other_land_use              		FLOAT; nature_regeneration           		FLOAT; other_change_increase         		FLOAT; other_change_reducing         		FLOAT; BEGIN DROP TABLE IF EXISTS calculate_table; sql:='CREATE TEMPORARY TABLE calculate_table AS SELECT T7.*, '; sql:=sql ||	' (select  T2.forest_func_sub_code FROM plot_history T2  WHERE  T2.dateapproval::date <= to_date ('''|| start_date||''',''dd/MM/yyyy'')'  ; sql:=sql ||	'	and T7.commune_code = 	T2.commune_code and T7.plot_code=T2.plot_code AND T7.sub_compt_code=T2.sub_compt_code AND T7.compt_code=T2.compt_code ORDER BY T2.dateapproval desc limit 1) as begin_sub_code,'; sql:=sql ||	' (select  T2.forest_func_sub_code FROM plot_history T2  WHERE  T2.dateapproval::date <= to_date ('''|| end_date||''',''dd/MM/yyyy'')'  ; sql:=sql ||	'	and T2.commune_code = 	T7.commune_code and T7.plot_code=T2.plot_code AND T7.sub_compt_code=T2.sub_compt_code AND T7.compt_code=T2.compt_code ORDER BY T2.dateapproval desc limit 1)  as end_sub_code,'; sql:=sql ||	' (select  T2.actor_type_code FROM plot_history T2  WHERE  T2.dateapproval::date <= to_date ('''|| start_date||''',''dd/MM/yyyy'')'  ; sql:=sql ||	'	and T2.commune_code = 	T7.commune_code and T7.plot_code=T2.plot_code AND T7.sub_compt_code=T2.sub_compt_code AND T7.compt_code=T2.compt_code ORDER BY T2.dateapproval desc limit 1)  as begin_actor_type_code,'; sql:=sql ||	' (select  T2.actor_type_code FROM plot_history T2  WHERE  T2.dateapproval::date <= to_date ('''|| end_date||''',''dd/MM/yyyy'')'  ; sql:=sql ||	'	and T2.commune_code = 	T7.commune_code and T7.plot_code=T2.plot_code AND T7.sub_compt_code=T2.sub_compt_code AND T7.compt_code=T2.compt_code ORDER BY T2.dateapproval desc limit 1)  as end_actor_type_code FROM ( '; IF depart_level = 3 THEN	 -- Commune level
 if report_type = '3' then sql :=	sql||	'SELECT  SUM(T1.area) area, '; elsif report_type = '3_vol' then sql :=	sql||	'SELECT  SUM(T1.volume) area, '; end if; sql :=	sql||	' T1.change_type_id, T1.forest_type_code,T1.forest_func_sub_code, T1.plot_code,T1.sub_compt_code,T1.compt_code,T1.commune_code,T10.monitoring_type_id, T1.forest_org_code,T1.forest_use_sit_code,T1.site_cond_code,T1.nar_for_org_code, T1.tree_spec_code,T1.plant_state_code,T1.p_forest_org_code,T9.special_product FROM forest_monitoring T1 INNER JOIN monitoring_change_type T10 ON  T1.change_type_id=T10.change_type_id '; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; sql :=	sql||'	WHERE T1.commune_code='|| depart_id || ' and T1.area is not null '  ; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; sql :=	sql||'	GROUP BY T1.change_type_id, T1.forest_type_code,T1.forest_func_sub_code,T1.actor_type_code, T1.actor_id, T1.plot_code,T1.sub_compt_code,T1.compt_code,T1.commune_code,T10.monitoring_type_id,T1.forest_org_code, T1.forest_use_sit_code,T1.site_cond_code,T1.nar_for_org_code,T1.tree_spec_code, T1.plant_state_code,T1.p_forest_org_code,T9.special_product'; ELSIF depart_level = 2 THEN                                                      -- District level
 if report_type = '3' then sql :=	sql||	'SELECT  SUM(T1.area) area, '; elsif report_type = '3_vol' then sql :=	sql||	'SELECT  SUM(T1.volume) area, '; end if; sql :=	sql||	' T1.change_type_id, T1.forest_type_code,T1.forest_func_sub_code, T1.plot_code,T1.sub_compt_code,T1.compt_code,T1.commune_code,T10.monitoring_type_id, T1.forest_org_code,T1.forest_use_sit_code,T1.site_cond_code,T1.nar_for_org_code, T1.tree_spec_code,T1.plant_state_code,T1.p_forest_org_code,T9.special_product FROM forest_monitoring T1 INNER JOIN commune T2 ON T1.commune_code=T2.commune_code INNER JOIN monitoring_change_type T10 ON  T1.change_type_id=T10.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text WHERE T2.district_code=' || depart_id || ' and T1.area is not null ' ; sql:=	sql||' 	AND T1.date_time::date >=to_date('''||start_date||''',''dd/MM/yyyy'')';  sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date||''',''dd/MM/yyyy'')'; sql :=	sql||'	GROUP BY T1.change_type_id, T1.forest_type_code,T1.forest_func_sub_code,T1.actor_type_code, T1.actor_id, T1.plot_code,T1.sub_compt_code,T1.compt_code,T1.commune_code,T10.monitoring_type_id,T1.forest_org_code, T1.forest_use_sit_code,T1.site_cond_code,T1.nar_for_org_code,T1.tree_spec_code, T1.plant_state_code,T1.p_forest_org_code,T9.special_product'; ELSIF depart_level = 1 THEN if report_type = '3' then sql :=	sql||	'SELECT  SUM(T1.area) area, '; elsif report_type = '3_vol' then sql :=	sql||	'SELECT  SUM(T1.volume) area, '; end if; sql :=	sql||' T1.change_type_id, T1.forest_type_code,T1.forest_func_sub_code, T1.plot_code,T1.sub_compt_code,T1.compt_code,T1.commune_code,T10.monitoring_type_id, T1.forest_org_code,T1.forest_use_sit_code,T1.site_cond_code,T1.nar_for_org_code, T1.tree_spec_code,T1.plant_state_code,T1.p_forest_org_code,T9.special_product FROM forest_monitoring T1 INNER JOIN commune T2 ON T1.commune_code=T2.commune_code INNER JOIN district T3 ON T2.district_code=T3.district_code INNER JOIN monitoring_change_type T10 ON  T1.change_type_id=T10.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text WHERE T3.province_code=' || depart_id || ' and T1.area is not null ' ; sql:=	sql||' 	AND T1.date_time::date >=to_date('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date||''',''dd/MM/yyyy'')'; sql :=	sql||'	GROUP BY T1.change_type_id, T1.forest_type_code,T1.forest_func_sub_code,T1.actor_type_code, T1.actor_id, T1.plot_code,T1.sub_compt_code,T1.compt_code,T1.commune_code,T10.monitoring_type_id,T1.forest_org_code, T1.forest_use_sit_code,T1.site_cond_code,T1.nar_for_org_code,T1.tree_spec_code, T1.plant_state_code,T1.p_forest_org_code,T9.special_product'; ELSIF depart_level = 0 THEN                                                   -- Nation wide level
 if report_type = '3' then sql :=	sql||	'SELECT  SUM(T1.area) area, '; elsif report_type = '3_vol' then sql :=	sql||	'SELECT  SUM(T1.volume) area, '; end if; sql :=sql ||' T1.change_type_id, T1.forest_type_code,T1.forest_func_sub_code, T1.plot_code,T1.sub_compt_code,T1.compt_code,T1.commune_code,T10.monitoring_type_id, T1.forest_org_code,T1.forest_use_sit_code,T1.site_cond_code,T1.nar_for_org_code, T1.tree_spec_code,T1.plant_state_code,T1.p_forest_org_code,T9.special_product FROM forest_monitoring T1 INNER JOIN monitoring_change_type T10 ON  T1.change_type_id=T10.change_type_id LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text '; sql:=	sql||'WHERE 1= 1 '; sql:=	sql||' 	AND forest_monitoring.date_time::date >='||to_date (start_date, 'dd/MM/yyyy'); sql:=	sql||' 	AND forest_monitoring.date_time::date <='||to_date (end_date, 'dd/MM/yyyy'); sql :=	sql||'	GROUP BY T1.change_type_id, T1.forest_type_code,T1.forest_func_sub_code,T1.actor_type_code, T1.actor_id, T1.plot_code,T1.sub_compt_code,T1.compt_code,T1.commune_code,T10.monitoring_type_id,T1.forest_org_code, T1.forest_use_sit_code,T1.site_cond_code,T1.nar_for_org_code,T1.tree_spec_code, T1.plant_state_code,T1.p_forest_org_code,T9.special_product'; ELSE RETURN; END IF; sql:=	sql||') T7 ';  EXECUTE sql; RAISE NOTICE 'sql:%',sql; FOR rec IN SELECT config_report.code, config_report.name, config_report.type, config_report.forest_type_code_from, config_report.forest_type_code_to, config_report.p_forest_org_code, config_report.site_cond_code_from, config_report.site_cond_code_to, config_report.volume_per_ha_from, config_report.volume_per_ha_to, config_report.forest_type_special, config_report.unit, config_report.land_use_cert_code, config_report.conflict_sit_code, config_report.tree_specie_abbr, config_report.forest_use_sit_code, config_report.forest_use_sit_code_from, config_report.forest_use_sit_code_to, config_report.forest_func_sub_code, config_report.actor_type_code, config_report.tree_specie_code, config_report.nar_for_org_code, config_report.special_product, config_report.plant_state_code, config_report.forest_org_code, config_report.no_tree_spec_code FROM config_report WHERE type = 'forest_type' and id > 1 ORDER BY row_order LOOP result.code 				=rec.code; result.name				=rec.name; change_in_forest_function         	=0; change_in_forest_owner          	=0; change_in_area             		=0; new_plantation              		=0; harvesting                		=0; fire                  			=0; disease                 		=0; illegal_cutting             		=0; hydropower                		=0; industry                		=0; agriculture               		=0; construction              		=0; other_land_use              		=0; nature_regeneration           		=0; other_change_increase         		=0; other_change_reducing         		=0; FOR rec_result IN SELECT * FROM _formis_cal_monitoring_forest_by_reason_types(rec) AS ( begin_sub_code numeric(2,0), begin_actor_type_code numeric, end_sub_code numeric(2,0), end_actor_type_code numeric, forest_type_code integer, forest_func_sub_code numeric(2,0), plot_code character varying(10), monitoring_type_id integer, change_type_id integer, area numeric  ) LOOP IF  (rec_result.begin_sub_code <> rec_result.end_sub_code) or (rec_result.begin_sub_code is null and rec_result.end_sub_code is not null ) or (rec_result.begin_sub_code is not null and rec_result.end_sub_code is  null ) THEN RAISE NOTICE 'change:%',rec_result.begin_sub_code; RAISE NOTICE 'change2:%',rec_result.end_sub_code; change_in_forest_function:=change_in_forest_function+rec_result.area; END IF; IF (rec_result.begin_actor_type_code <>rec_result.end_actor_type_code)  or (rec_result.begin_actor_type_code is null and rec_result.end_actor_type_code is not null ) or (rec_result.begin_actor_type_code is not null and rec_result.end_actor_type_code is  null ) THEN change_in_forest_owner:=change_in_forest_owner+rec_result.area; END IF; IF rec_result.monitoring_type_id=2 THEN -- bien phap lam sinh (Silvicultural treatment)
 IF rec_result.change_type_id=6 THEN -- trong moi(monitoring_type_code=11)
 change_in_area:=change_in_area+rec_result.area; new_plantation:=new_plantation+rec_result.area; END IF; IF rec_result.change_type_id=7 THEN -- trong lai (monitoring_type_code=12)
 END IF; IF rec_result.change_type_id=21 THEN -- xuc tien tai sinh tu nhien (monitoring_type_code=21)
 change_in_area:=change_in_area+rec_result.area; nature_regeneration:=nature_regeneration+ rec_result.area; END IF; IF rec_result.change_type_id=22 THEN -- trong bo xung (monitoring_type_code=22)
 END IF; IF rec_result.change_type_id=31 THEN -- cham soc (monitoring_type_code=31)
 END IF; IF rec_result.change_type_id=32 THEN -- tia thua (monitoring_type_code=32)
 END IF; ELSIF rec_result.monitoring_type_id=1 THEN -- Khai thac
 IF rec_result.change_type_id=1 THEN --khai thac trang (monitoring_type_code=1)
 harvesting:=harvesting+rec_result.area; change_in_area:=change_in_area-rec_result.area; END IF; ELSIF rec_result.monitoring_type_id=3 THEN -- Rui ro (Incident)
 IF rec_result.change_type_id=8 THEN -- chay rung (monitoring_type_code=1)
 fire:=fire+rec_result.area; change_in_area:=change_in_area-rec_result.area; END IF; IF rec_result.change_type_id=9 THEN --sau benh (monitoring_type_code=2)
 change_in_area:=change_in_area-rec_result.area; disease:=disease+rec_result.area; END IF; IF rec_result.change_type_id=10 THEN -- lan chiem (monitoring_type_code=3)
 change_in_area:=change_in_area-rec_result.area; illegal_cutting:=illegal_cutting+rec_result.area; END IF; IF rec_result.change_type_id=11 THEN -- khai thac trai phep (monitoring_type_code=4)
 change_in_area:=change_in_area-rec_result.area; illegal_cutting:=illegal_cutting+rec_result.area; END IF; IF rec_result.change_type_id=12 THEN -- rui ro khac (monitoring_type_code=5)
 change_in_area:=change_in_area-rec_result.area; END IF; ELSIF rec_result.monitoring_type_id=4 THEN IF rec_result.change_type_id=13 THEN -- thuy dien (monitoring_type_code=1)
 change_in_area:=change_in_area-rec_result.area; hydropower:=hydropower+rec_result.area; END IF; IF rec_result.change_type_id=14 THEN --khu cong nghiep (monitoring_type_code=2)
 change_in_area:=change_in_area-rec_result.area; industry:=industry+rec_result.area; END IF; IF rec_result.change_type_id=15 THEN --Lam nong nghiep (monitoring_type_code=3)
 change_in_area:=change_in_area-rec_result.area; agriculture:=agriculture+rec_result.area; END IF; IF rec_result.change_type_id=16 THEN -- cong tinh cong cong, nha o (monitoring_type_code=4)
 change_in_area:=change_in_area-rec_result.area; construction:=construction+rec_result.area; END IF; IF rec_result.change_type_id=17 THEN -- Muc dich khac (monitoring_type_code=5)
 change_in_area:=change_in_area-rec_result.area; other_land_use:=other_land_use+rec_result.area; END IF; ELSIF rec_result.monitoring_type_id=5 THEN IF rec_result.change_type_id=41 THEN --tang dien tich (monitoring_type_code=1)
 other_change_increase:=other_change_increase+rec_result.area; change_in_area:=change_in_area+rec_result.area; END IF; IF rec_result.change_type_id=42 THEN --giam dien tich (monitoring_type_code=2)
 change_in_area:=change_in_area-rec_result.area; other_change_reducing:=other_change_reducing+rec_result.area; END IF; END IF; END LOOP; result.change_in_forest_function         	=change_in_forest_function; result.change_in_forest_owner          	=change_in_forest_owner; result.change_in_area             		=change_in_area; result.new_plantation              		=new_plantation; result.harvesting                		=harvesting; result.fire                  			=fire; result.disease                 		=disease; result.illegal_cutting             		=illegal_cutting; result.hydropower                		=hydropower; result.industry                		=industry; result.agriculture               		=agriculture; result.construction              		=construction; result.other_land_use              		=other_land_use; result.nature_regeneration           		=nature_regeneration; result.other_change_increase         		=other_change_increase; result.other_change_reducing         		=other_change_reducing; RETURN NEXT result; END LOOP; RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_mon1"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_forest_mon1" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                  					TEXT; sql_query            					TEXT; result               					_formis_forest_mon1; rec                  					_formis_config_report; rec_result           					record; total_area  							FLOAT; wood_harvesting_area_total 				FLOAT; wood_harvesting_area_clear				FLOAT; wood_harvesting_area_selected			FLOAT; wood_harvesting_vol_total 				FLOAT; wood_harvesting_vol_clear				FLOAT; wood_harvesting_vol_selected			FLOAT; bamboo_harvesting_area_total 			FLOAT; bamboo_harvesting_area_clear			FLOAT; bamboo_harvesting_area_selected			FLOAT; bamboo_density							FLOAT; BEGIN DROP TABLE IF EXISTS calculate_table; sql := 'CREATE TEMPORARY TABLE calculate_table AS SELECT  SUM(T1.area) area, SUM(T1.volume) volume,SUM(T1.stems_no) stems_no,SUM(T1.density_bamboo) density_bamboo, T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code, T2.monitoring_type_code FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; IF depart_level = 3 THEN sql:= sql || ' WHERE commune_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 2 THEN sql:=sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code WHERE T3.district_code=' || depart_id ; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 1 THEN sql:= sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code WHERE T4.province_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 0 THEN RAISE NOTICE 'sql_query:%',sql; ELSE RETURN; END IF; sql := sql || '	and T2.monitoring_type_id = 1 '; sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code, T2.monitoring_type_code '; RAISE NOTICE 'sql_query:%',sql; EXECUTE sql;  FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = 'mon1' ORDER BY row_order LOOP result.code 							= rec.code; result.name								=rec.name; total_area  							:=0; wood_harvesting_area_total 				:=0; wood_harvesting_area_clear				:=0; wood_harvesting_area_selected			:=0; wood_harvesting_vol_total 				:=0; wood_harvesting_vol_clear				:=0; wood_harvesting_vol_selected			:=0; bamboo_harvesting_area_total 			:=0; bamboo_harvesting_area_clear			:=0; bamboo_harvesting_area_selected			:=0; bamboo_density							:=0; FOR rec_result IN SELECT * FROM _formis_cal_monitor_mon2(rec,'monitoring_type_code') AS (monitoring_type_code  integer, area numeric,volume numeric,stems numeric) LOOP IF rec_result.monitoring_type_code=1 THEN total_area:=total_area+rec_result.area;  wood_harvesting_vol_total:=wood_harvesting_vol_total+rec_result.volume;  wood_harvesting_area_total:=wood_harvesting_area_total+rec_result.area;  wood_harvesting_vol_clear:=wood_harvesting_vol_clear+rec_result.volume;  wood_harvesting_area_clear:=wood_harvesting_area_clear+rec_result.area; if rec_result.stems > 0 then bamboo_density	:=bamboo_density+rec_result.stems; end if; bamboo_harvesting_area_total:=bamboo_harvesting_area_total+rec_result.stems; ELSE total_area:=total_area+rec_result.area;  wood_harvesting_vol_total:=wood_harvesting_vol_total+rec_result.volume;  wood_harvesting_area_total:=wood_harvesting_area_total+rec_result.area;  wood_harvesting_vol_selected:=wood_harvesting_vol_selected+rec_result.volume;  wood_harvesting_area_selected:=wood_harvesting_area_selected+rec_result.area; bamboo_harvesting_area_total:=bamboo_harvesting_area_total+rec_result.stems; if rec_result.stems > 0 then bamboo_density	:=bamboo_density+rec_result.stems; end if; END IF; END LOOP; result.total_area := total_area; result.wood_harvesting_area_total 		= wood_harvesting_area_total; result.wood_harvesting_area_clear 		= wood_harvesting_area_clear; result.wood_harvesting_area_selected 	= wood_harvesting_area_selected; result.wood_harvesting_vol_total 		= wood_harvesting_vol_total; result.wood_harvesting_vol_clear 		= wood_harvesting_vol_clear; result.bamboo_harvesting_area_total 	= bamboo_harvesting_area_total; result.bamboo_harvesting_area_clear 	= bamboo_harvesting_area_clear; result.wood_harvesting_vol_selected     = wood_harvesting_vol_selected; result.bamboo_harvesting_area_selected	= bamboo_harvesting_area_selected; result.bamboo_density					= bamboo_density; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_mon2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_forest_mon1" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                  					TEXT; sql_query            					TEXT; result               					_formis_forest_mon1; rec                  					_formis_config_report; rec_result           					record; total_area  							FLOAT; wood_harvesting_area_total 				FLOAT; wood_harvesting_area_clear				FLOAT; wood_harvesting_area_selected			FLOAT; wood_harvesting_vol_total 				FLOAT; wood_harvesting_vol_clear				FLOAT; wood_harvesting_vol_selected			FLOAT; bamboo_harvesting_area_total 			FLOAT; bamboo_harvesting_area_clear			FLOAT; bamboo_harvesting_area_selected			FLOAT; bamboo_density							FLOAT; BEGIN DROP TABLE IF EXISTS calculate_table; sql := 'CREATE TEMPORARY TABLE calculate_table AS SELECT  SUM(T1.area) area, SUM(T1.volume) volume,SUM(T1.stems_no) stems_no,SUM(T1.density_bamboo) density_bamboo, T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code, T2.monitoring_type_code FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; IF depart_level = 3 THEN sql:= sql || ' WHERE commune_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 2 THEN sql:=sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code WHERE T3.district_code=' || depart_id ; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 1 THEN sql:= sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code WHERE T4.province_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 0 THEN RAISE NOTICE 'sql_query:%',sql; ELSE RETURN; END IF; sql := sql || '	and T2.monitoring_type_id = 1 '; sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code, T2.monitoring_type_code '; RAISE NOTICE 'sql_query:%',sql; EXECUTE sql;  FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = 'forest_type' and id > 1 ORDER BY row_order LOOP result.code 							= rec.code; result.name								=rec.name; total_area  							:=0; wood_harvesting_area_total 				:=0; wood_harvesting_area_clear				:=0; wood_harvesting_area_selected			:=0; wood_harvesting_vol_total 				:=0; wood_harvesting_vol_clear				:=0; wood_harvesting_vol_selected			:=0; bamboo_harvesting_area_total 			:=0; bamboo_harvesting_area_clear			:=0; bamboo_harvesting_area_selected			:=0; bamboo_density							:=0; FOR rec_result IN SELECT * FROM _formis_cal_monitor_mon2(rec,'monitoring_type_code') AS (monitoring_type_code  integer, area numeric,volume numeric,stems numeric) LOOP IF rec_result.monitoring_type_code=1 THEN total_area:=total_area+rec_result.area;  wood_harvesting_vol_total:=wood_harvesting_vol_total+rec_result.volume;  wood_harvesting_area_total:=wood_harvesting_area_total+rec_result.area;  wood_harvesting_vol_clear:=wood_harvesting_vol_clear+rec_result.volume;  wood_harvesting_area_clear:=wood_harvesting_area_clear+rec_result.area; if rec_result.stems > 0 then bamboo_density	:=bamboo_density+rec_result.stems; end if; bamboo_harvesting_area_total:=bamboo_harvesting_area_total+rec_result.stems; ELSE total_area:=total_area+rec_result.area;  wood_harvesting_vol_total:=wood_harvesting_vol_total+rec_result.volume;  wood_harvesting_area_total:=wood_harvesting_area_total+rec_result.area;  wood_harvesting_vol_selected:=wood_harvesting_vol_selected+rec_result.volume;  wood_harvesting_area_selected:=wood_harvesting_area_selected+rec_result.area; bamboo_harvesting_area_total:=bamboo_harvesting_area_total+rec_result.stems; if rec_result.stems > 0 then bamboo_density	:=bamboo_density+rec_result.stems; end if; END IF; END LOOP; result.total_area := total_area; result.wood_harvesting_area_total 		= wood_harvesting_area_total; result.wood_harvesting_area_clear 		= wood_harvesting_area_clear; result.wood_harvesting_area_selected 	= wood_harvesting_area_selected; result.wood_harvesting_vol_selected     = wood_harvesting_vol_selected; result.wood_harvesting_vol_total 		= wood_harvesting_vol_total; result.wood_harvesting_vol_clear 		= wood_harvesting_vol_clear; result.bamboo_harvesting_area_total 	= bamboo_harvesting_area_total; result.bamboo_harvesting_area_clear 	= bamboo_harvesting_area_clear; result.bamboo_harvesting_area_selected	= bamboo_harvesting_area_selected; result.bamboo_density					= bamboo_density; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_mon3"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_forest_mon1" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                  					TEXT; sql_query            					TEXT; result               					_formis_forest_mon1; rec                  					_formis_config_report; rec_result           					record; total_area  							FLOAT; wood_harvesting_area_total 				FLOAT; wood_harvesting_area_clear				FLOAT; wood_harvesting_area_selected			FLOAT; wood_harvesting_vol_total 				FLOAT; wood_harvesting_vol_clear				FLOAT; wood_harvesting_vol_selected			FLOAT; bamboo_harvesting_area_total 			FLOAT; bamboo_harvesting_area_clear			FLOAT; bamboo_harvesting_area_selected			FLOAT; bamboo_density							FLOAT; BEGIN DROP TABLE IF EXISTS calculate_table; sql := 'CREATE TEMPORARY TABLE calculate_table AS SELECT   SUM(T1.area) area, SUM(T1.volume) volume,SUM(T1.stems_no) stems_no,SUM(T1.density_bamboo) density_bamboo, T2.monitoring_type_code, T1.forest_type_code,T1.forest_func_sub_code,T1.actor_type_code,T1.forest_use_sit_code FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id'; IF depart_level = 3 THEN sql:= sql || ' WHERE commune_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 2 THEN sql:=sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code WHERE T3.district_code=' || depart_id ; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 1 THEN sql:= sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code WHERE T4.province_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 0 THEN RAISE NOTICE 'sql_query:%',sql; ELSE RETURN; END IF; sql := sql || '	and T2.monitoring_type_id = 1 GROUP BY T2.monitoring_type_code, T1.forest_type_code,T1.forest_func_sub_code, T1.actor_type_code,T1.forest_use_sit_code';  RAISE NOTICE 'sql_query:%',sql; EXECUTE sql;  FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = 'mon3' ORDER BY row_order LOOP result.code 							= rec.code; result.name								=rec.name; total_area  							:=0; wood_harvesting_area_total 				:=0; wood_harvesting_area_clear				:=0; wood_harvesting_area_selected			:=0; wood_harvesting_vol_total 				:=0; wood_harvesting_vol_clear				:=0; wood_harvesting_vol_selected			:=0; bamboo_harvesting_area_total 			:=0; bamboo_harvesting_area_clear			:=0; bamboo_harvesting_area_selected			:=0; bamboo_density							:=0; FOR rec_result IN SELECT * FROM _formis_cal_monitor_mon35(rec,'monitoring_type_code','mon3') AS (monitoring_type_code  integer, area numeric,volume numeric,stems numeric) LOOP IF rec_result.monitoring_type_code=1 THEN total_area:=total_area+rec_result.area;  wood_harvesting_vol_total:=wood_harvesting_vol_total+rec_result.volume;  wood_harvesting_area_total:=wood_harvesting_area_total+rec_result.area;  wood_harvesting_vol_clear:=wood_harvesting_vol_clear+rec_result.volume;  wood_harvesting_area_clear:=wood_harvesting_area_clear+rec_result.area; if rec_result.stems > 0 then bamboo_density	:=bamboo_density+rec_result.stems; end if; bamboo_harvesting_area_total:=bamboo_harvesting_area_total+rec_result.stems; ELSE total_area:=total_area+rec_result.area;  wood_harvesting_vol_total:=wood_harvesting_vol_total+rec_result.volume;  wood_harvesting_area_total:=wood_harvesting_area_total+rec_result.area;  wood_harvesting_vol_selected:=wood_harvesting_vol_selected+rec_result.volume; RAISE NOTICE 'wood_harvesting_vol_selected:%',wood_harvesting_vol_selected;  wood_harvesting_area_selected:=wood_harvesting_area_selected+rec_result.area; bamboo_harvesting_area_total:=bamboo_harvesting_area_total+rec_result.stems; if rec_result.stems > 0 then bamboo_density	:=bamboo_density+rec_result.stems; end if; END IF; END LOOP; result.total_area := total_area; result.wood_harvesting_area_total 		= wood_harvesting_area_total; result.wood_harvesting_area_clear 		= wood_harvesting_area_clear; result.wood_harvesting_area_selected 	= wood_harvesting_area_selected; result.wood_harvesting_vol_total 		= wood_harvesting_vol_total; result.wood_harvesting_vol_clear 		= wood_harvesting_vol_clear; result.wood_harvesting_vol_selected = wood_harvesting_vol_selected; result.bamboo_harvesting_area_total 	= bamboo_harvesting_area_total; result.bamboo_harvesting_area_clear 	= bamboo_harvesting_area_clear; result.bamboo_harvesting_area_selected	= bamboo_harvesting_area_selected; result.bamboo_density					= bamboo_density; RAISE NOTICE 'result.wood_harvesting_vol_selected:%',result.wood_harvesting_vol_selected; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_mon4"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_forest_mon4" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                      TEXT; sql_query                TEXT; result                   _formis_forest_mon4; rec                      _formis_config_report; rec_result               record; total_area               FLOAT; new_plantation           FLOAT; replanting               FLOAT; nature_regeneration      FLOAT; supplementary_planting   FLOAT; tending                  FLOAT; thinning                 FLOAT; BEGIN DROP TABLE IF EXISTS calculate_table; sql := 'CREATE TEMPORARY TABLE calculate_table AS SELECT  SUM(T1.area) area, T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code, T2.monitoring_type_code FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id'; sql := sql || ' LEFT JOIN tree_specie T9 ON T1.tree_spec_code::text=T9.tree_spec_code::text'; IF depart_level = 3 THEN sql:= sql || ' WHERE commune_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 2 THEN sql:=sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code WHERE T3.district_code=' || depart_id ; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 1 THEN sql:= sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code WHERE T4.province_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 0 THEN RAISE NOTICE 'sql_query:%',sql; ELSE RETURN; END IF; sql := sql || '	and T2.monitoring_type_id = 2 '; sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.tree_spec_code, T9.special_product, T1.nar_for_org_code, T1.forest_org_code, T1.plant_state_code, T2.monitoring_type_code '; RAISE NOTICE 'sql_query:%',sql; EXECUTE sql;  FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = 'forest_type' and id > 1 ORDER BY row_order LOOP result.code = rec.code; result.name = rec.name; total_area := 0; new_plantation := 0; replanting := 0; nature_regeneration := 0; supplementary_planting := 0; tending := 0; thinning := 0; FOR rec_result IN SELECT * FROM _formis_cal_forest2(rec,'monitoring_type_code') AS (monitoring_type_code integer,area numeric) LOOP total_area:=total_area+rec_result.area; IF rec_result.monitoring_type_code= 11 THEN new_plantation:=new_plantation+rec_result.area; ELSIF rec_result.monitoring_type_code= 12 THEN replanting:=replanting+rec_result.area; ELSIF rec_result.monitoring_type_code= 21 THEN nature_regeneration:=nature_regeneration+rec_result.area; ELSIF rec_result.monitoring_type_code= 22 THEN supplementary_planting:=supplementary_planting+rec_result.area; ELSIF rec_result.monitoring_type_code= 31 THEN tending:=tending+rec_result.area; ELSIF rec_result.monitoring_type_code= 32 THEN thinning:=thinning+rec_result.area; END IF; END LOOP; result.total_area := total_area; result.new_plantation = new_plantation; result.replanting = replanting; result.nature_regeneration = nature_regeneration; result.supplementary_planting = supplementary_planting; result.tending = tending; result.thinning = thinning; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_forest_mon5"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_forest_mon4" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                      TEXT; sql_query                TEXT; result                   _formis_forest_mon4; rec                      _formis_config_report; rec_result               record; total_area               FLOAT; new_plantation           FLOAT; replanting               FLOAT; nature_regeneration      FLOAT; supplementary_planting   FLOAT; tending                  FLOAT; thinning                 FLOAT; BEGIN DROP TABLE IF EXISTS calculate_table; sql := 'CREATE TEMPORARY TABLE calculate_table AS SELECT  SUM(T1.area) area, T2.monitoring_type_code, T1.forest_type_code,T1.forest_func_sub_code,T1.actor_type_code,T1.forest_use_sit_code FROM forest_monitoring T1 INNER JOIN monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id'; IF depart_level = 3 THEN sql:= sql || ' WHERE commune_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 2 THEN sql:=sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code WHERE T3.district_code=' || depart_id ; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 1 THEN sql:= sql || ' INNER JOIN commune T3 ON T1.commune_code=T3.commune_code INNER JOIN district T4 ON T3.district_code=T4.district_code WHERE T4.province_code=' || depart_id; sql:=	sql||' 	AND T1.date_time::date >=to_date ('''||start_date||''',''dd/MM/yyyy'')'; sql:=	sql||' 	AND T1.date_time::date <=to_date('''||end_date|| ''',''dd/MM/yyyy'')'; ELSIF depart_level = 0 THEN RAISE NOTICE 'sql_query:%',sql; ELSE RETURN; END IF; sql := sql || '	and T2.monitoring_type_id = 2 GROUP BY T2.monitoring_type_code, T1.forest_type_code,T1.forest_func_sub_code, T1.actor_type_code,T1.forest_use_sit_code';  EXECUTE sql;  FOR rec IN   SELECT code, name, type, forest_type_code_from, forest_type_code_to, p_forest_org_code, site_cond_code_from, site_cond_code_to, volume_per_ha_from, volume_per_ha_to, forest_type_special, unit, land_use_cert_code, conflict_sit_code, tree_specie_abbr, forest_use_sit_code, forest_use_sit_code_from, forest_use_sit_code_to, forest_func_sub_code, actor_type_code, tree_specie_code, nar_for_org_code, special_product, plant_state_code, forest_org_code, no_tree_spec_code FROM config_report WHERE type = 'mon3' ORDER BY row_order LOOP result.code = rec.code; result.name = rec.name; total_area := 0; new_plantation := 0; replanting := 0; nature_regeneration := 0; supplementary_planting := 0; tending := 0; thinning := 0; FOR rec_result IN SELECT * FROM _formis_cal_monitor_mon35(rec,'monitoring_type_code','mon5') AS (monitoring_type_code integer,area numeric) LOOP total_area:=total_area+rec_result.area; IF rec_result.monitoring_type_code= 11 THEN new_plantation:=new_plantation+rec_result.area; ELSIF rec_result.monitoring_type_code= 12 THEN replanting:=replanting+rec_result.area; ELSIF rec_result.monitoring_type_code= 21 THEN nature_regeneration:=nature_regeneration+rec_result.area; ELSIF rec_result.monitoring_type_code= 22 THEN supplementary_planting:=supplementary_planting+rec_result.area; ELSIF rec_result.monitoring_type_code= 31 THEN tending:=tending+rec_result.area; ELSIF rec_result.monitoring_type_code= 32 THEN thinning:=thinning+rec_result.area; END IF; END LOOP; result.total_area := total_area; result.new_plantation = new_plantation; result.replanting = replanting; result.nature_regeneration = nature_regeneration; result.supplementary_planting = supplementary_planting; result.tending = tending; result.thinning = thinning; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_function_origin_area"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_origin_function_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql            text; sql_execute    text; sql_distinct   text; result         _formis_origin_function_form; area_name      name; ng_rtn         NUMERIC; ng_rt          NUMERIC; ng_ccr         NUMERIC; dd_tn          NUMERIC; dd_rt          NUMERIC; dd_ccr         NUMERIC; ph_tn          NUMERIC; ph_rt          NUMERIC; ph_ccr         NUMERIC; sx_tn          NUMERIC; sx_rt          NUMERIC; sx_ccr         NUMERIC; nqh_tn         NUMERIC; nqh_rt         NUMERIC; nqh_ccr        NUMERIC; rec            record; rec2           record; BEGIN DROP TABLE IF EXISTS calculate_table;  sql := '	CREATE TEMPORARY TABLE calculate_table AS SELECT SUM(T1.area) area, T1.forest_func_sub_code,T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code,T1.site_cond_code,T1.forest_org_code,';  IF depart_level = 3 THEN            -- commune level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || 'T1.compt_code as code	FROM plot T1 '; sql := sql || ' WHERE  T1.commune_code=' || depart_id || ''; ELSE sql:=sql||' T1.compt_code as code	FROM plot_history T1 ';  sql := sql || '	INNER JOIN ( SELECT  MAX(datemodify) datemodify, plot_uuid FROM plot_history WHERE commune_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_uuid) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify = T2.datemodify';  sql := sql || ' WHERE  T1.commune_code=' || depart_id || ''; END IF;  sql_distinct:='select distinct(compt_code) as code, compt_code as name, 0 as area from plot where commune_code='  ||depart_id || ' order by compt_code'; ELSIF depart_level = 2 THEN                                                   -- district level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || 'T1.commune_code as code	FROM plot T1 '; sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code ';  sql := sql || ' WHERE  T4.district_code=' || depart_id; ELSE sql:=sql||' T1.commune_code as code	FROM plot_history T1 '; sql := sql || ' INNER JOIN (SELECT  MAX(datemodify) datemodify,plot_history.plot_uuid FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code	WHERE commune.district_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_uuid,plot_history.commune_code) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify = T2.datemodify '; sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' WHERE T4.district_code=' || depart_id || ''; END IF;  sql_distinct:='select commune_code as code, name as name,area from commune where district_code = '||depart_id ||' order by name'; ELSIF depart_level = 1 THEN                                                   -- province level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:=sql||' T4.district_code as code	FROM plot T1 '; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE T5.province_code=' || depart_id; ELSE sql:=sql||' T4.district_code as code	FROM plot_history T1 '; sql := sql || ' INNER JOIN (SELECT  MAX(datemodify) datemodify, plot_history.plot_uuid FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code INNER JOIN district ON commune.district_code=district.district_code WHERE district.province_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_uuid, plot_history.commune_code) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify=T2.datemodify'; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE  T5.province_code=' || depart_id || ''; END IF;  sql_distinct:='select district_code as code, name as name,area from district where province_code = '||depart_id ||' order by name'; ELSE  sql := sql || 'INNER JOIN (SELECT  MAX(datemodify) datemodify,plot_uuid FROM plot_history' || 'WHERE  (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_uuid ) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify=T2.datemodify';  END IF;  sql := sql || ' GROUP  BY T1.forest_func_sub_code, T1.forest_use_sit_code, T1.forest_type_code, T1.p_forest_org_code, T1.site_cond_code, T1.forest_org_code,code'; RAISE NOTICE 'sql: %', sql; EXECUTE sql;  FOR rec IN EXECUTE sql_distinct LOOP result.area_name = rec.name; result.code = rec.code; ng_rtn := 0; ng_rt := 0; ng_ccr := 0; dd_tn := 0; dd_rt := 0; dd_ccr := 0; ph_tn := 0; ph_rt := 0; ph_ccr := 0; sx_tn := 0; sx_rt := 0; sx_ccr := 0; nqh_tn := 0; nqh_rt := 0; nqh_ccr := 0;  FOR rec2 IN SELECT * FROM calculate_table LOOP IF rec2.code = rec.code THEN IF rec2.forest_use_sit_code in (0,1) THEN IF rec2.forest_org_code = 1 THEN ng_rtn := ng_rtn + rec2.area; ELSEIF rec2.forest_org_code = 2 THEN ng_rt := ng_rt + rec2.area; ELSEIF rec2.forest_org_code = 3 THEN if rec2.forest_use_sit_code = 0 then ng_ccr := ng_ccr + rec2.area; end if; END IF; END IF; IF rec2.forest_use_sit_code = 0 then IF rec2.forest_func_sub_code IN (5,6,7,8) THEN IF rec2.forest_org_code = 1 THEN dd_tn := dd_tn + rec2.area; ELSEIF rec2.forest_org_code = 2 THEN dd_rt := dd_rt + rec2.area; ELSEIF rec2.forest_org_code = 3 THEN dd_ccr := dd_ccr + rec2.area; END IF; ELSEIF rec2.forest_func_sub_code IN (1,2,3,4) THEN IF rec2.forest_org_code = 1 THEN ph_tn := ph_tn + rec2.area; ELSEIF rec2.forest_org_code = 2 THEN ph_rt := ph_rt + rec2.area; ELSEIF rec2.forest_org_code = 3 THEN ph_ccr := ph_ccr + rec2.area; END IF; ELSEIF rec2.forest_func_sub_code IN (9,10,11,12) THEN IF rec2.forest_org_code = 1 THEN sx_tn := sx_tn + rec2.area; ELSEIF rec2.forest_org_code = 2 THEN sx_rt := sx_rt + rec2.area; ELSEIF rec2.forest_org_code = 3 THEN sx_ccr := sx_ccr + rec2.area; END IF; END IF; elseif rec2.forest_use_sit_code = 1 then -- Ngoai quy hoach
 IF rec2.forest_org_code = 1 THEN nqh_tn := nqh_tn + rec2.area; ELSEIF rec2.forest_org_code = 2 THEN nqh_rt := nqh_rt + rec2.area; ELSEIF rec2.forest_org_code = 3 THEN nqh_ccr := nqh_ccr + rec2.area; END IF; end if;  END IF; END LOOP;  result.ng_rtn := ng_rtn; result.ng_rt := ng_rt; result.ng_ccr := ng_ccr; result.dd_tn := dd_tn; result.dd_rt := dd_rt; result.dd_ccr := dd_ccr; result.ph_tn := ph_tn; result.ph_rt := ph_rt; result.ph_ccr := ph_ccr; result.sx_tn := sx_tn; result.sx_rt := sx_rt; result.sx_ccr := sx_ccr; result.nqh_tn := nqh_tn; result.nqh_rt := nqh_rt; result.nqh_ccr := nqh_ccr; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_monitoring_area"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_forest_monitoring_reason" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql                       text; sql_execute               text; sql_distinct              text; result                    _formis_forest_monitoring_reason; code                      TEXT; area_name                 TEXT; new_plantation            FLOAT; harvesting                FLOAT; fire                      FLOAT; disease                   FLOAT; illegal_cut               FLOAT; hydropower                FLOAT; industry                  FLOAT; agriculture_aquaculture   FLOAT; construction              FLOAT; other_land_use            FLOAT; natural_regeneration      FLOAT; other_increase            FLOAT; other_reducing            FLOAT; total_area                FLOAT; rec                       record; rec2                      record; BEGIN DROP TABLE IF EXISTS calculate_table;  IF depart_level = 3 THEN sql := '	CREATE TEMPORARY TABLE calculate_table' || '  AS SELECT SUM(T1.area) area,T1.compt_code as code, T1.change_type_id,T2.monitoring_type_id,T2.monitoring_type_code FROM forest_monitoring T1 INNER JOIN  monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id INNER JOIN monitoring_type T3 ON T2.monitoring_type_id=T3.monitoring_type_id WHERE commune_code = ' || depart_id || ' AND T1.date_time>=to_date(''' || start_date || ''',''dd/MM/yyyy'')' || 'AND T1.date_time<=to_date(''' || end_date || ''',''dd/MM/yyyy'') AND T1.forest_org_code in (1,2,3) and T1.forest_use_sit_code in (0,1) ' || '	GROUP BY  code, T1.change_type_id,T2.monitoring_type_id,T2.monitoring_type_code'; sql_distinct := '	SELECT distinct(compt_code) as code, compt_code as name, 1 as area FROM plot WHERE commune_code=' || depart_id || ' ORDER  BY compt_code'; ELSIF depart_level = 2 THEN sql := '	CREATE TEMPORARY TABLE calculate_table' || '  AS	SELECT 	SUM(T1.area) area,commune.commune_code as code, T1.change_type_id,T2.monitoring_type_id,T2.monitoring_type_code FROM 	forest_monitoring T1 INNER JOIN  monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id INNER JOIN monitoring_type T3 ON T2.monitoring_type_id=T3.monitoring_type_id INNER JOIN commune   ON T1.commune_code=commune.commune_code WHERE commune.district_code = ' || depart_id || ' AND T1.date_time>=to_date(''' || start_date || ''',''dd/MM/yyyy'')' || 'AND T1.date_time<=to_date(''' || end_date || ''',''dd/MM/yyyy'') AND T1.forest_org_code in (1,2,3) and T1.forest_use_sit_code in (0,1) ' || '	GROUP BY  commune.commune_code, T1.change_type_id,T2.monitoring_type_id,T2.monitoring_type_code'; sql_distinct := 'SELECT commune_code as code, name as name,area FROM commune WHERE district_code = ' || depart_id || ' ORDER BY name'; ELSIF depart_level = 1 THEN sql := '	CREATE TEMPORARY TABLE calculate_table' || '  	AS 	SELECT SUM(T1.area) area,district.district_code as code,T1.change_type_id,T2.monitoring_type_id,T2.monitoring_type_code  FROM forest_monitoring T1  INNER JOIN  monitoring_change_type T2 ON T1.change_type_id=T2.change_type_id INNER JOIN monitoring_type T3 ON T2.monitoring_type_id=T3.monitoring_type_id INNER JOIN commune ON T1.commune_code=commune.commune_code INNER JOIN district ON commune.district_code=district.district_code WHERE district.province_code = ' || depart_id || ' AND T1.date_time>=to_date(''' || start_date || ''',''dd/MM/yyyy'')' || 'AND T1.date_time<=to_date(''' || end_date || ''',''dd/MM/yyyy'') AND T1.forest_org_code in (1,2,3) and T1.forest_use_sit_code in (0,1) ' || '	GROUP BY  code, T1.change_type_id,T2.monitoring_type_id,T2.monitoring_type_code '; sql_distinct := 'SELECT district_code as code, name as name,area FROM district WHERE province_code = ' || depart_id || ' ORDER BY name'; ELSIF depart_level = 0 THEN ELSE RETURN; END IF;  EXECUTE sql; RAISE NOTICE 'Selected sql: %', sql; RAISE NOTICE 'Selected sql_distinct: %', sql_distinct;  FOR rec IN EXECUTE sql_distinct LOOP result.area_name = rec.name; result.code = rec.code; new_plantation := 0; harvesting := 0; fire := 0; disease := 0; illegal_cut := 0; hydropower := 0; industry := 0; agriculture_aquaculture := 0; construction := 0; other_land_use := 0; natural_regeneration := 0; other_increase := 0; other_reducing := 0; total_area := 0; FOR rec2 IN SELECT * FROM calculate_table LOOP IF rec.code=rec2.code THEN IF rec2.monitoring_type_id = 2 THEN                                            -- Bien phap lam sinh
 IF rec2.monitoring_type_code = 11 THEN                                                  -- Trong moi
 total_area := total_area + rec2.area; new_plantation := rec2.area; END IF;  IF rec2.monitoring_type_code = 21 THEN                                 -- Xuc tien tai sinh tu nhien
 total_area := total_area + rec2.area; natural_regeneration := rec2.area; END IF; ELSIF rec2.monitoring_type_id = 3 THEN                                                        -- Rui ro
 IF rec2.monitoring_type_code = 1 THEN                                                  -- Chay rung
 total_area := total_area - rec2.area; fire := rec2.area; END IF;  IF rec2.monitoring_type_code = 2 THEN                                                  --  sau benh
 total_area := total_area - rec2.area; disease := rec2.area; END IF;  IF rec2.monitoring_type_code = 3 OR rec2.monitoring_type_code = 4 THEN                                       --  Khai thac trai phep
 total_area := total_area - rec2.area; illegal_cut := illegal_cut + rec2.area; END IF; ELSIF rec2.monitoring_type_id = 4 THEN                                   -- Chuyen doi muc dich su dung
 IF rec2.monitoring_type_code = 1 THEN                                                  -- Thuy dien
 total_area := total_area - rec2.area; industry := rec2.area; END IF;  IF rec2.monitoring_type_code = 2 THEN                                            -- Khu cong nghiep
 total_area := total_area - rec2.area; hydropower := rec2.area; END IF;  IF rec2.monitoring_type_code = 3 THEN                                            -- Lam nong nghiep
 total_area := total_area - rec2.area; agriculture_aquaculture := rec2.area; END IF;  IF rec2.monitoring_type_code = 4 THEN                              -- Xay dung cong trinh cong cong
 total_area := total_area - rec2.area; construction := rec2.area; END IF;  IF rec2.monitoring_type_code = 5 THEN                                              -- Muc dich khac
 total_area := total_area - rec2.area; other_land_use := rec2.area; END IF; ELSIF rec2.monitoring_type_id = 1 THEN                                                  -- Khai thac go
 IF rec2.monitoring_type_code = 1 THEN                                               -- Khai thac go
 total_area := total_area - rec2.area; harvesting := rec2.area; END IF;  /* IF rec2.monitoring_type_code = 2 THEN                                               -- Khai thac go
 total_area := total_area - rec2.area; END IF;  */ ELSIF rec2.monitoring_type_id = 5 THEN IF rec2.monitoring_type_code = 1 THEN                                               --Tang dien tich
 total_area := total_area + rec2.area; other_increase := rec2.area; END IF;  IF rec2.monitoring_type_code = 2 THEN                                               --Giam dien tich
 total_area := total_area - rec2.area; other_reducing := rec2.area; END IF;  END IF; END IF;  END LOOP;  result.new_plantation = new_plantation; result.harvesting = harvesting; result.fire = fire; result.disease = disease; result.illegal_cut = illegal_cut; result.hydropower = hydropower; result.industry = industry; result.agriculture_aquaculture = agriculture_aquaculture; result.construction = construction; result.other_land_use = other_land_use; result.natural_regeneration = natural_regeneration; result.other_increase = other_increase; result.other_reducing = other_reducing; result.total_area = total_area; RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<function name="_formis_tree_specie"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="formisadmin"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public._formis_tree_form" length="1"/>
	</return-type>
	<parameter name="depart_id">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="depart_level">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="report_type">
		<type name="name" length="0"/>
	</parameter>
	<parameter name="start_date">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="end_date">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[  DECLARE sql            text; sql_distinct   text; sql_1   text; result         _formis_tree_form; l_cay          name; tong           numeric; captuoi1       numeric; captuoi2       numeric; captuoi3       numeric; captuoi4       numeric; captuoi5       numeric; rec            record; rec2           record; curYear        int; age_class      int; mdsd           CHARACTER VARYING (200); loai_cay_name  text; BEGIN SELECT extract (YEAR FROM current_date) INTO curYear;  DROP TABLE IF EXISTS calculate_table;   sql := '	CREATE TEMPORARY TABLE calculate_table AS SELECT  '; IF report_type = '5' OR report_type ='5a'  OR report_type ='5b' OR report_type ='5c' OR report_type ='5d' THEN sql := sql || ' SUM(T1.area) area'; ELSIF  report_type = '5_vol' OR report_type ='5a_vol'  OR report_type ='5b_vol' OR report_type ='5c_vol' OR report_type ='5d_vol' THEN sql := sql || ' SUM(T1.volume_per_plot) area'; END IF;   IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql:= sql || ' ,( SELECT array_to_string(array_agg(ts.tree_spec_code), ''' || '+' || '''' || ') AS array_to_string FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code) AS tree_spec_code,' ; sql:= sql || ' ( SELECT ts.age_class FROM tree_specie ts, plot_tree_specie pts WHERE pts.tree_spec_code = ts.tree_spec_code AND pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code limit 1) AS age_class,' ; sql := sql || ' T1.planting_year, T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code, T8.forest_func_main_code '; sql := sql || ' FROM plot T1 LEFT JOIN forest_function T8  ON T8.forest_func_sub_code=T1.forest_func_sub_code '; ELSE sql := sql || ', T1.tree_spec_code, T6.age_class, T8.forest_func_main_code, T8.forest_func_def,T1.planting_year, T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code'; sql := sql || ' FROM plot_history T1'; sql := sql || '  LEFT JOIN forest_function T8  ON T8.forest_func_sub_code=T1.forest_func_sub_code LEFT JOIN tree_specie T6 ON T6.tree_spec_code::text = T1.tree_spec_code::text '; END IF;  IF depart_level = 3 THEN                                                    -- commune level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' WHERE T1.commune_code=' || depart_id || '  and  exists ( SELECT (1) FROM plot_tree_specie pts WHERE pts.commune_code = T1.commune_code AND pts.compt_code = T1.compt_code AND pts.sub_compt_code = T1.sub_compt_code AND pts.plot_code = T1.plot_code) '; ELSE sql := sql || '	INNER JOIN ( SELECT   MAX(datemodify) datemodify, plot_uuid FROM plot_history WHERE commune_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_uuid) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify = T2.datemodify ';  sql := sql || ' WHERE T1.commune_code=' || depart_id || ' AND T1.tree_spec_code is not null';  sql_distinct := 'select tree_spec_code from plot_history where commune_code = ' ||  depart_id || ' and tree_spec_code is not null ' ; sql_distinct := sql_distinct || ' group by tree_spec_code order by  tree_spec_code;'; END IF;  ELSIF depart_level = 2 THEN                                                   -- district level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' WHERE  T4.district_code=' || depart_id || ' AND T1.tree_spec_code is not null'; ELSE sql := sql || ' INNER JOIN (SELECT  MAX(datemodify) datemodify, plot_history.plot_uuid FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code WHERE commune.district_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_history.plot_uuid, plot_history.commune_code) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify=T2.datemodify '; sql := sql || ' INNER JOIN commune T4 ON T1.commune_code=T4.commune_code '; sql := sql || ' WHERE  T4.district_code=' || depart_id || ' AND T1.tree_spec_code is not null'; END IF;  sql_distinct := 'select tree_spec_code from plot_history left join commune on commune.commune_code =  plot_history.commune_code where commune.district_code = ' ||  depart_id || ' and tree_spec_code is not null ' ;  sql_distinct := sql_distinct || ' group by tree_spec_code order by  tree_spec_code;';  ELSIF depart_level = 1 THEN                                                   -- province level
 IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE  T5.province_code=' || depart_id || ' AND T1.tree_spec_code is not null'; ELSE sql := sql || ' INNER JOIN (SELECT  MAX(datemodify) datemodify,plot_history.plot_uuid FROM plot_history INNER JOIN commune ON plot_history.commune_code=commune.commune_code INNER JOIN district ON commune.district_code=district.district_code WHERE district.province_code=' || depart_id || ' AND (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' 	GROUP BY plot_history.plot_uuid, plot_history.commune_code ) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify=T2.datemodify'; sql := sql || '	INNER JOIN commune T4 ON T1.commune_code=T4.commune_code INNER JOIN district T5 ON T4.district_code=T5.district_code'; sql := sql || ' WHERE  T5.province_code=' || depart_id || ' AND T1.tree_spec_code is not null'; END IF;  sql_distinct := 'select distinct(tree_spec_code) from plot_history where commune_code in (select commune_code from commune where district_code in (select district_code from district where province_code= ' || depart_id || ')) and tree_spec_code is not null order by tree_spec_code;'; ELSE IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN RAISE NOTICE 'Selected tree_specie: %', sql; ELSE sql := sql || '	INNER JOIN (	SELECT  MAX(datemodify) datemodify,plot_uuid FROM plot_history ' || ' WHERE (dateapproval >=to_date(''' || start_date || ''',''dd/MM/yyyy'') AND dateapproval  <=to_date(''' || end_date || ''',''dd/MM/yyyy'') OR dateapproval <=to_date(''' || start_date || ''',''dd/MM/yyyy''))' || ' GROUP BY plot_uuid ) T2 ON T1.plot_uuid = T2.plot_uuid AND T1.datemodify=T2.datemodify'; END IF;   sql_distinct := '	select distinct(tree_spec_code) from plot_history tree_spec_code is not null order by tree_spec_code '; END IF;  IF CURRENT_DATE <= to_date (end_date, 'dd/MM/yyyy') THEN sql := sql || ' GROUP  BY tree_spec_code, age_class, T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code,T1.planting_year,T8.forest_func_main_code order by T1.forest_func_sub_code'; ELSE sql := sql || ' GROUP  BY T1.tree_spec_code, T6.age_class, T8.forest_func_main_code,T8.forest_func_def, T1.forest_org_code,T1.forest_type_code,T1.forest_func_sub_code,T1.forest_use_sit_code,T1.planting_year order by T8.forest_func_main_code'; END IF;    RAISE NOTICE 'Selected tree_specie: %', sql; EXECUTE sql; sql_distinct := 'select distinct(T1.tree_spec_code), T1.forest_func_main_code from calculate_table T1 where 1 = 1 '; if report_type ='5a' or report_type ='5a_vol' then sql_distinct := sql_distinct || ' and T1.forest_func_sub_code >= 1 and T1.forest_func_sub_code <= 4 '; elsif report_type ='5b' or report_type ='5b_vol' then sql_distinct := sql_distinct || ' and T1.forest_func_sub_code >= 5 and T1.forest_func_sub_code <= 8 '; elsif report_type ='5c' or report_type ='5c_vol' then sql_distinct := sql_distinct || ' and T1.forest_func_sub_code >= 9 and T1.forest_func_sub_code <= 12 '; elsif report_type ='5d' or report_type ='5d_vol' then sql_distinct := sql_distinct || ' and T1.forest_use_sit_code = 1 '; end if; sql_distinct := sql_distinct || '  order by T1.tree_spec_code'; RAISE NOTICE 'Selected species: %', sql_distinct; FOR rec IN EXECUTE sql_distinct LOOP l_cay := rec.tree_spec_code; tong := 0; captuoi1 := 0; captuoi2 := 0; captuoi3 := 0; captuoi4 := 0; captuoi5 := 0; sql_1 := 'select * from _formis_get_tree_spec_abbr('''|| l_cay ||''')'; EXECUTE sql_1 into loai_cay_name; result.tree_name = loai_cay_name; age_class := 0; if rec.forest_func_main_code in (1,2,3) then if rec.forest_func_main_code = 1 THEN mdsd = 'Rá»«ng phÃ²ng há»™'; elsif rec.forest_func_main_code = 2 THEN mdsd = 'Rá»«ng Ä‘áº·c dá»¥ng'; elsif rec.forest_func_main_code = 3 THEN mdsd = 'Rá»«ng sáº£n xuáº¥t'; end if; FOR rec2 IN SELECT * FROM calculate_table LOOP age_class = rec2.age_class;  IF age_class = 0 THEN age_class = 3; END IF;  IF lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) and rec2.forest_func_main_code = rec.forest_func_main_code THEN tong := tong + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) and rec2.forest_func_main_code = rec.forest_func_main_code AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) <= 1 THEN captuoi1 := captuoi1 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) and rec2.forest_func_main_code = rec.forest_func_main_code AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) = 2 THEN captuoi2 := captuoi2 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) and rec2.forest_func_main_code = rec.forest_func_main_code AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) = 3 THEN captuoi3 := captuoi3 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) and rec2.forest_func_main_code = rec.forest_func_main_code AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) = 4 THEN captuoi4 := captuoi4 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) and rec2.forest_func_main_code = rec.forest_func_main_code AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) >= 5 THEN captuoi5 := captuoi5 + rec2.area; END IF;  END LOOP; else mdsd = 'NgoÃ i quy hoáº¡ch'; FOR rec2 IN SELECT * FROM calculate_table where forest_func_main_code is null LOOP age_class = rec2.age_class; IF age_class = 0 THEN age_class = 3; END IF;  IF lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) THEN tong := tong + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) <= 1 THEN captuoi1 := captuoi1 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) = 2 THEN captuoi2 := captuoi2 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) = 3 THEN captuoi3 := captuoi3 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) = 4 THEN captuoi4 := captuoi4 + rec2.area; END IF;  IF     lower (trim (rec2.tree_spec_code)) = lower (trim (l_cay)) AND (floor( (curYear  - rec2.planting_year) / age_class) + 1) >= 5 THEN captuoi5 := captuoi5 + rec2.area; END IF;  END LOOP;  end if;     result.tong = tong; result.captuoi1 = captuoi1; result.captuoi2 = captuoi2; result.captuoi3 = captuoi3; result.captuoi4 = captuoi4; result.captuoi5 = captuoi5; result.mdsd = mdsd; --rec2.forest_func_def;
 RETURN NEXT result; END LOOP;  RETURN; END; ]]></definition>
</function>

<index name="ccsp_u_index" table="public.plot"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="plot_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="sub_compt_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="compt_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="commune_code"/>
		</idxelement>
</index>

<index name="commune_geom_gist" table="public.commune"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="gist" factor="90">
		<idxelement use-sorting="false">
			<column name="geom"/>
		</idxelement>
</index>

<index name="compartment_geom_gist" table="public.compartment"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="gist" factor="90">
		<idxelement use-sorting="false">
			<column name="geom"/>
		</idxelement>
</index>

<index name="district_geom_gist" table="public.district"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="gist" factor="90">
		<idxelement use-sorting="false">
			<column name="geom"/>
		</idxelement>
</index>

<index name="fki_compartment_commune_fk" table="public.compartment"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="commune_code"/>
		</idxelement>
</index>

<index name="fki_district_province_fk" table="public.district"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="province_code"/>
		</idxelement>
</index>

<index name="fki_dlp_location" table="public.dept_location_per"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="location_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="level"/>
		</idxelement>
</index>

<index name="fki_plot_assgn_stat_fk" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="prot_contr_code"/>
		</idxelement>
</index>

<index name="fki_plot_litigi_stat_fk" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="conflict_sit_code"/>
		</idxelement>
</index>

<index name="fki_plot_use_purpose_fk" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="forest_func_sub_code"/>
		</idxelement>
</index>

<index name="fki_plot_use_right_stat_fk" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="land_use_cert_code"/>
		</idxelement>
</index>

<index name="fki_province_eco_zone_fk" table="public.province"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="eco_zone_code"/>
		</idxelement>
</index>

<index name="fki_role_per_per" table="public.role_permission"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="permission_id"/>
		</idxelement>
</index>

<index name="fki_role_permission_role" table="public.role_permission"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="role_id"/>
		</idxelement>
</index>

<index name="fki_user_role_role" table="public.user_role"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="role_id"/>
		</idxelement>
</index>

<index name="fki_user_role_use" table="public.user_role"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="user_id"/>
		</idxelement>
</index>

<index name="fki_users_department" table="public.users"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="department_id"/>
		</idxelement>
</index>

<index name="idx_fuo_cc_foui" table="public.forest_actor"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="commune_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="actor_id"/>
		</idxelement>
</index>

<index name="plot_commune_code_idx" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="commune_code"/>
		</idxelement>
</index>

<index name="plot_forest_type_code_idx" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="forest_type_code"/>
		</idxelement>
</index>

<index name="plot_actor_id_idx" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="actor_id"/>
		</idxelement>
</index>

<index name="plot_actor_id_conflict_idx" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="actor_id_conflict"/>
		</idxelement>
</index>

<index name="plot_actor_id_prot_idx" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="actor_id_prot"/>
		</idxelement>
</index>

<index name="plot_geom_gist" table="public.plot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="gist" factor="90">
		<idxelement use-sorting="false">
			<column name="geom"/>
		</idxelement>
</index>

<index name="plot_history_dateapproval_idx" table="public.plot_history"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="dateapproval"/>
		</idxelement>
</index>

<index name="plot_history_datemodify_idx" table="public.plot_history"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="datemodify"/>
		</idxelement>
</index>

<index name="plot_history_geom_gist" table="public.plot_history"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="gist" factor="90">
		<idxelement use-sorting="false">
			<column name="geom"/>
		</idxelement>
</index>

<index name="plot_history_plot_code_sub_compt_code_compt_code_commune_co_idx" table="public.plot_history"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="plot_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="sub_compt_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="compt_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="commune_code"/>
		</idxelement>
</index>

<index name="plot_history_plot_uuid_idx" table="public.plot_history"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="plot_uuid"/>
		</idxelement>
</index>

<index name="plot_history_actor_id_idx" table="public.plot_history"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="actor_id"/>
		</idxelement>
</index>

<index name="plot_history_actor_id_conflict_idx" table="public.plot_history"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="actor_id_conflict"/>
		</idxelement>
</index>

<index name="plot_history_actor_id_prot_idx" table="public.plot_history"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="actor_id_prot"/>
		</idxelement>
</index>

<index name="plot_tree_specie_commune_code_compt_code_sub_compt_code_plo_idx" table="public.plot_tree_specie"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="commune_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="compt_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="sub_compt_code"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="plot_code"/>
		</idxelement>
</index>

<index name="plot_tree_specie_tree_spec_code_idx" table="public.plot_tree_specie"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="tree_spec_code"/>
		</idxelement>
</index>

<index name="province_geom_gist" table="public.province"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="gist" factor="90">
		<idxelement use-sorting="false">
			<column name="geom"/>
		</idxelement>
</index>

<index name="report_group_reports_fk" table="public.report_group_reports"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="group_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="layer_id"/>
		</idxelement>
</index>

<index name="sub_compartment_geom_gist" table="public.sub_compartment"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="gist" factor="90">
		<idxelement use-sorting="false">
			<column name="geom"/>
		</idxelement>
</index>

<index name="forest_monitoring_plot_uuid_idx" table="public.forest_monitoring"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="plot_uuid"/>
		</idxelement>
</index>

<index name="forest_monitoring_plot_history_uuid_idx" table="public.forest_monitoring"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="plot_history_uuid"/>
		</idxelement>
</index>

<index name="forest_monitoring_actor_id_idx" table="public.forest_monitoring"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="actor_id"/>
		</idxelement>
</index>

<index name="forest_monitoring_actor_id_after_idx" table="public.forest_monitoring"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="actor_id_after"/>
		</idxelement>
</index>

<table name="version">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="1320" y="4380"/>
	<column name="version" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="script" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="update_date" default-value="now()">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="version_pkey" type="pk-constr" table="public.version">
		<columns names="version,script" ref-type="src-columns"/>
	</constraint>
</table>

<table name="change_log">
	<schema name="public"/>
	<role name="formisadmin"/>
	<position x="60" y="4680"/>
	<column name="version" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="script" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="script_name">
		<type name="character varying" length="100"/>
	</column>
	<column name="description">
		<type name="character varying" length="1000"/>
	</column>
	<column name="update_date" not-null="true" default-value="now()">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="change_log_pkey" type="pk-constr" table="public.change_log">
		<columns names="version,script,update_date" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_channel">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="60"/>
	<column name="channel_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="processing_order" not-null="true" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="max_batch_size" not-null="true" default-value="1000">
		<type name="integer" length="0"/>
	</column>
	<column name="max_batch_to_send" not-null="true" default-value="60">
		<type name="integer" length="0"/>
	</column>
	<column name="max_data_to_route" not-null="true" default-value="100000">
		<type name="integer" length="0"/>
	</column>
	<column name="extract_period_millis" not-null="true" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="enabled" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="use_old_data_to_route" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="use_row_data_to_route" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="use_pk_data_to_route" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="reload_flag" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="file_sync_flag" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="contains_big_lob" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="batch_algorithm" not-null="true" default-value="'default'">
		<type name="character varying" length="50"/>
	</column>
	<column name="data_loader_type" not-null="true" default-value="'default'">
		<type name="character varying" length="50"/>
	</column>
	<column name="description">
		<type name="character varying" length="255"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_channel_pkey" type="pk-constr" table="symds.sym_channel">
		<columns names="channel_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_conflict">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2900" y="60"/>
	<column name="conflict_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="source_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="target_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="target_channel_id">
		<type name="character varying" length="128"/>
	</column>
	<column name="target_catalog_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_schema_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_table_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="detect_type" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="detect_expression">
		<type name="text" length="0"/>
	</column>
	<column name="resolve_type" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="ping_back" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="resolve_changes_only" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="resolve_row_only" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_conflict_pkey" type="pk-constr" table="symds.sym_conflict">
		<columns names="conflict_id" ref-type="src-columns"/>
	</constraint>
</table>

<sequence name="sym_data_data_id_seq"
	 start="1" increment="1"
	 min-value="1" max-value="9223372036854775807"
	 cache="1" cycle="false">
	<schema name="symds"/>
	<role name="formisuser"/>
</sequence>

<table name="sym_data">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3320" y="60"/>
	<column name="data_id" not-null="true" sequence="symds.sym_data_data_id_seq">
		<type name="bigint" length="0"/>
	</column>
	<column name="table_name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="event_type" not-null="true">
		<type name="character" length="1"/>
	</column>
	<column name="row_data">
		<type name="text" length="0"/>
	</column>
	<column name="pk_data">
		<type name="text" length="0"/>
	</column>
	<column name="old_data">
		<type name="text" length="0"/>
	</column>
	<column name="trigger_hist_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="channel_id">
		<type name="character varying" length="128"/>
	</column>
	<column name="transaction_id">
		<type name="character varying" length="255"/>
	</column>
	<column name="source_node_id">
		<type name="character varying" length="50"/>
	</column>
	<column name="external_data">
		<type name="character varying" length="50"/>
	</column>
	<column name="node_list">
		<type name="character varying" length="255"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_data_pkey" type="pk-constr" table="symds.sym_data">
		<columns names="data_id" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_d_channel_id" table="symds.sym_data"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="data_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="channel_id"/>
		</idxelement>
</index>

<table name="sym_data_event">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3680" y="60"/>
	<column name="data_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="batch_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="router_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_data_event_pkey" type="pk-constr" table="symds.sym_data_event">
		<columns names="data_id,batch_id,router_id" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_de_batchid" table="symds.sym_data_event"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="batch_id"/>
		</idxelement>
</index>

<table name="sym_data_gap">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="4020" y="60"/>
	<column name="start_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="end_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="status">
		<type name="character" length="2"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_hostname">
		<type name="character varying" length="255"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_data_gap_pkey" type="pk-constr" table="symds.sym_data_gap">
		<columns names="start_id,end_id" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_dg_status" table="symds.sym_data_gap"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="status"/>
		</idxelement>
</index>

<table name="sym_extension">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="460"/>
	<column name="extension_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="extension_type" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="interface_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="enabled" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="extension_order" not-null="true" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="extension_text">
		<type name="text" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_extension_pkey" type="pk-constr" table="symds.sym_extension">
		<columns names="extension_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_extract_request">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2860" y="460"/>
	<column name="request_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="status">
		<type name="character" length="2"/>
	</column>
	<column name="start_batch_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="end_batch_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="router_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_extract_request_pkey" type="pk-constr" table="symds.sym_extract_request">
		<columns names="request_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_file_incoming">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3240" y="460"/>
	<column name="relative_dir" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="file_name" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="last_event_type" not-null="true">
		<type name="character" length="1"/>
	</column>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="file_modified_time">
		<type name="bigint" length="0"/>
	</column>
	<constraint name="sym_file_incoming_pkey" type="pk-constr" table="symds.sym_file_incoming">
		<columns names="relative_dir,file_name" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_file_snapshot">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3600" y="460"/>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="router_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="relative_dir" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="file_name" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="channel_id" not-null="true" default-value="'filesync'">
		<type name="character varying" length="128"/>
	</column>
	<column name="reload_channel_id" not-null="true" default-value="'filesync_reload'">
		<type name="character varying" length="128"/>
	</column>
	<column name="last_event_type" not-null="true">
		<type name="character" length="1"/>
	</column>
	<column name="crc32_checksum">
		<type name="bigint" length="0"/>
	</column>
	<column name="file_size">
		<type name="bigint" length="0"/>
	</column>
	<column name="file_modified_time">
		<type name="bigint" length="0"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_file_snapshot_pkey" type="pk-constr" table="symds.sym_file_snapshot">
		<columns names="trigger_id,router_id,relative_dir,file_name" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_f_snpsht_chid" table="symds.sym_file_snapshot"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="reload_channel_id"/>
		</idxelement>
</index>

<table name="sym_file_trigger">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="4000" y="460"/>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="channel_id" not-null="true" default-value="'filesync'">
		<type name="character varying" length="128"/>
	</column>
	<column name="reload_channel_id" not-null="true" default-value="'filesync_reload'">
		<type name="character varying" length="128"/>
	</column>
	<column name="base_dir" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="recurse" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="includes_files">
		<type name="character varying" length="255"/>
	</column>
	<column name="excludes_files">
		<type name="character varying" length="255"/>
	</column>
	<column name="sync_on_create" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_on_modified" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_on_delete" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_on_ctl_file" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="delete_after_sync" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="before_copy_script">
		<type name="text" length="0"/>
	</column>
	<column name="after_copy_script">
		<type name="text" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_file_trigger_pkey" type="pk-constr" table="symds.sym_file_trigger">
		<columns names="trigger_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_file_trigger_router">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="840"/>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="router_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="enabled" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="initial_load_enabled" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="target_base_dir">
		<type name="character varying" length="255"/>
	</column>
	<column name="conflict_strategy" not-null="true" default-value="'source_wins'">
		<type name="character varying" length="128"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_file_trigger_router_pkey" type="pk-constr" table="symds.sym_file_trigger_router">
		<columns names="trigger_id,router_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_grouplet">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2900" y="840"/>
	<column name="grouplet_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="grouplet_link_policy" not-null="true" default-value="'I'::bpchar">
		<type name="character" length="1"/>
	</column>
	<column name="description">
		<type name="character varying" length="255"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_grouplet_pkey" type="pk-constr" table="symds.sym_grouplet">
		<columns names="grouplet_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_grouplet_link">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3280" y="840"/>
	<column name="grouplet_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="external_id" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_grouplet_link_pkey" type="pk-constr" table="symds.sym_grouplet_link">
		<columns names="grouplet_id,external_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_incoming_batch">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3660" y="840"/>
	<column name="batch_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="channel_id">
		<type name="character varying" length="128"/>
	</column>
	<column name="status">
		<type name="character" length="2"/>
	</column>
	<column name="error_flag" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="network_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="filter_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="database_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="failed_row_number" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="failed_line_number" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="byte_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="statement_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="fallback_insert_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="fallback_update_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="ignore_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="missing_delete_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="skip_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="sql_state">
		<type name="character varying" length="10"/>
	</column>
	<column name="sql_code" not-null="true" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="sql_message">
		<type name="text" length="0"/>
	</column>
	<column name="last_update_hostname">
		<type name="character varying" length="255"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_incoming_batch_pkey" type="pk-constr" table="symds.sym_incoming_batch">
		<columns names="batch_id,node_id" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_ib_time_status" table="symds.sym_incoming_batch"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="create_time"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="status"/>
		</idxelement>
</index>

<index name="sym_idx_ib_in_error" table="symds.sym_incoming_batch"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="error_flag"/>
		</idxelement>
</index>

<table name="sym_incoming_error">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="4060" y="840"/>
	<column name="batch_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="failed_row_number" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="failed_line_number" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="target_catalog_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_schema_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_table_name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="event_type" not-null="true">
		<type name="character" length="1"/>
	</column>
	<column name="binary_encoding" not-null="true" default-value="'HEX'">
		<type name="character varying" length="10"/>
	</column>
	<column name="column_names" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="pk_column_names" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="row_data">
		<type name="text" length="0"/>
	</column>
	<column name="old_data">
		<type name="text" length="0"/>
	</column>
	<column name="cur_data">
		<type name="text" length="0"/>
	</column>
	<column name="resolve_data">
		<type name="text" length="0"/>
	</column>
	<column name="resolve_ignore" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="conflict_id">
		<type name="character varying" length="50"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_incoming_error_pkey" type="pk-constr" table="symds.sym_incoming_error">
		<columns names="batch_id,node_id,failed_row_number" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_load_filter">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="1300"/>
	<column name="load_filter_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="load_filter_type" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="source_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="target_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="target_catalog_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_schema_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_table_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="filter_on_update" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="filter_on_insert" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="filter_on_delete" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="before_write_script">
		<type name="text" length="0"/>
	</column>
	<column name="after_write_script">
		<type name="text" length="0"/>
	</column>
	<column name="batch_complete_script">
		<type name="text" length="0"/>
	</column>
	<column name="batch_commit_script">
		<type name="text" length="0"/>
	</column>
	<column name="batch_rollback_script">
		<type name="text" length="0"/>
	</column>
	<column name="handle_error_script">
		<type name="text" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="load_filter_order" not-null="true" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="fail_on_error" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<constraint name="sym_load_filter_pkey" type="pk-constr" table="symds.sym_load_filter">
		<columns names="load_filter_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_lock">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2880" y="1300"/>
	<column name="lock_action" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="lock_type" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="locking_server_id">
		<type name="character varying" length="255"/>
	</column>
	<column name="lock_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="shared_count" not-null="true" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="shared_enable" not-null="true" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="last_lock_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_locking_server_id">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="sym_lock_pkey" type="pk-constr" table="symds.sym_lock">
		<columns names="lock_action" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3280" y="1300"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="external_id" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="sync_enabled" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_url">
		<type name="character varying" length="255"/>
	</column>
	<column name="schema_version">
		<type name="character varying" length="50"/>
	</column>
	<column name="symmetric_version">
		<type name="character varying" length="50"/>
	</column>
	<column name="database_type">
		<type name="character varying" length="50"/>
	</column>
	<column name="database_version">
		<type name="character varying" length="50"/>
	</column>
	<column name="heartbeat_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="timezone_offset">
		<type name="character varying" length="6"/>
	</column>
	<column name="batch_to_send_count" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="batch_in_error_count" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="created_at_node_id">
		<type name="character varying" length="50"/>
	</column>
	<column name="deployment_type">
		<type name="character varying" length="50"/>
	</column>
	<constraint name="sym_node_pkey" type="pk-constr" table="symds.sym_node">
		<columns names="node_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node_communication">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3680" y="1300"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="communication_type" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="lock_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="locking_server_id">
		<type name="character varying" length="255"/>
	</column>
	<column name="last_lock_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_lock_millis" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="success_count" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="fail_count" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_success_count" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_fail_count" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_success_millis" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_fail_millis" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<constraint name="sym_node_communication_pkey" type="pk-constr" table="symds.sym_node_communication">
		<columns names="node_id,communication_type" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node_channel_ctl">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="4060" y="1300"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="channel_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="suspend_enabled" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="ignore_enabled" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="last_extract_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_node_channel_ctl_pkey" type="pk-constr" table="symds.sym_node_channel_ctl">
		<columns names="node_id,channel_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node_group">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="1740"/>
	<column name="node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="description">
		<type name="character varying" length="255"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_node_group_pkey" type="pk-constr" table="symds.sym_node_group">
		<columns names="node_group_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node_group_channel_wnd">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2860" y="1740"/>
	<column name="node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="channel_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="start_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="end_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="enabled" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<constraint name="sym_node_group_channel_wnd_pkey" type="pk-constr" table="symds.sym_node_group_channel_wnd">
		<columns names="node_group_id,channel_id,start_time,end_time" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node_group_link">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3320" y="1740"/>
	<column name="source_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="target_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="data_event_action" not-null="true" default-value="'W'::bpchar">
		<type name="character" length="1"/>
	</column>
	<column name="sync_config_enabled" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_node_group_link_pkey" type="pk-constr" table="symds.sym_node_group_link">
		<columns names="source_node_group_id,target_node_group_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node_host">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3760" y="1740"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="host_name" not-null="true">
		<type name="character varying" length="60"/>
	</column>
	<column name="ip_address">
		<type name="character varying" length="50"/>
	</column>
	<column name="os_user">
		<type name="character varying" length="50"/>
	</column>
	<column name="os_name">
		<type name="character varying" length="50"/>
	</column>
	<column name="os_arch">
		<type name="character varying" length="50"/>
	</column>
	<column name="os_version">
		<type name="character varying" length="50"/>
	</column>
	<column name="available_processors" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="free_memory_bytes" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_memory_bytes" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="max_memory_bytes" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="java_version">
		<type name="character varying" length="50"/>
	</column>
	<column name="java_vendor">
		<type name="character varying" length="255"/>
	</column>
	<column name="jdbc_version">
		<type name="character varying" length="255"/>
	</column>
	<column name="symmetric_version">
		<type name="character varying" length="50"/>
	</column>
	<column name="timezone_offset">
		<type name="character varying" length="6"/>
	</column>
	<column name="heartbeat_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_restart_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_node_host_pkey" type="pk-constr" table="symds.sym_node_host">
		<columns names="node_id,host_name" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node_host_channel_stats">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="4140" y="1740"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="host_name" not-null="true">
		<type name="character varying" length="60"/>
	</column>
	<column name="channel_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="start_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="end_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="data_routed" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_unrouted" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_event_inserted" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_extracted" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_bytes_extracted" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_extracted_errors" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_bytes_sent" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_sent" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_sent_errors" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_loaded" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_bytes_loaded" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_loaded_errors" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<constraint name="sym_node_host_channel_stats_pkey" type="pk-constr" table="symds.sym_node_host_channel_stats">
		<columns names="node_id,host_name,channel_id,start_time,end_time" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_nd_hst_chnl_sts" table="symds.sym_node_host_channel_stats"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="node_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="start_time"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="end_time"/>
		</idxelement>
</index>

<table name="sym_node_host_job_stats">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="2140"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="host_name" not-null="true">
		<type name="character varying" length="60"/>
	</column>
	<column name="job_name" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="start_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="end_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="processed_count" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<constraint name="sym_node_host_job_stats_pkey" type="pk-constr" table="symds.sym_node_host_job_stats">
		<columns names="node_id,host_name,job_name,start_time,end_time" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_nd_hst_job" table="symds.sym_node_host_job_stats"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="node_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="start_time"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="end_time"/>
		</idxelement>
</index>

<table name="sym_node_host_stats">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2860" y="2140"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="host_name" not-null="true">
		<type name="character varying" length="60"/>
	</column>
	<column name="start_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="end_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="restarted" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="nodes_pulled" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_nodes_pull_time" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="nodes_pushed" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_nodes_push_time" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="nodes_rejected" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="nodes_registered" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="nodes_loaded" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="nodes_disabled" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="purged_data_rows" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="purged_data_event_rows" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="purged_batch_outgoing_rows" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="purged_batch_incoming_rows" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="triggers_created_count">
		<type name="bigint" length="0"/>
	</column>
	<column name="triggers_rebuilt_count">
		<type name="bigint" length="0"/>
	</column>
	<column name="triggers_removed_count">
		<type name="bigint" length="0"/>
	</column>
	<constraint name="sym_node_host_stats_pkey" type="pk-constr" table="symds.sym_node_host_stats">
		<columns names="node_id,host_name,start_time,end_time" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_nd_hst_sts" table="symds.sym_node_host_stats"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="node_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="start_time"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="end_time"/>
		</idxelement>
</index>

<table name="sym_node_identity">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3280" y="2140"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<constraint name="sym_node_identity_pkey" type="pk-constr" table="symds.sym_node_identity">
		<columns names="node_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_node_security">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3620" y="2140"/>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="node_password" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="registration_enabled" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="registration_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="initial_load_enabled" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="initial_load_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="initial_load_id">
		<type name="bigint" length="0"/>
	</column>
	<column name="initial_load_create_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="rev_initial_load_enabled" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="rev_initial_load_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="rev_initial_load_id">
		<type name="bigint" length="0"/>
	</column>
	<column name="rev_initial_load_create_by">
		<type name="character varying" length="255"/>
	</column>
	<column name="created_at_node_id">
		<type name="character varying" length="50"/>
	</column>
	<constraint name="sym_node_security_pkey" type="pk-constr" table="symds.sym_node_security">
		<columns names="node_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_outgoing_batch">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="4060" y="2140"/>
	<column name="batch_id" not-null="true">
		<type name="bigint" length="0"/>
	</column>
	<column name="node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="channel_id">
		<type name="character varying" length="128"/>
	</column>
	<column name="status">
		<type name="character" length="2"/>
	</column>
	<column name="load_id">
		<type name="bigint" length="0"/>
	</column>
	<column name="extract_job_flag" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="load_flag" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="error_flag" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="common_flag" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="ignore_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="byte_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="extract_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="sent_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="load_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="data_event_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="reload_event_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="insert_event_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="update_event_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="delete_event_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="other_event_count" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="router_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="network_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="filter_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="load_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="extract_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="transform_extract_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="transform_load_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_extract_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="total_load_millis" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="sql_state">
		<type name="character varying" length="10"/>
	</column>
	<column name="sql_code" not-null="true" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="sql_message">
		<type name="text" length="0"/>
	</column>
	<column name="failed_data_id" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="failed_line_number" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="last_update_hostname">
		<type name="character varying" length="255"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="create_by">
		<type name="character varying" length="255"/>
	</column>
	<constraint name="sym_outgoing_batch_pkey" type="pk-constr" table="symds.sym_outgoing_batch">
		<columns names="batch_id,node_id" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_ob_node_status" table="symds.sym_outgoing_batch"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="node_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="status"/>
		</idxelement>
</index>

<index name="sym_idx_ob_status" table="symds.sym_outgoing_batch"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="status"/>
		</idxelement>
</index>

<index name="sym_idx_ob_in_error" table="symds.sym_outgoing_batch"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="error_flag"/>
		</idxelement>
</index>

<table name="sym_parameter">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="2820"/>
	<column name="external_id" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="param_key" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="param_value">
		<type name="text" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_parameter_pkey" type="pk-constr" table="symds.sym_parameter">
		<columns names="external_id,node_group_id,param_key" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_registration_redirect">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2860" y="2820"/>
	<column name="registrant_external_id" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="registration_node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<constraint name="sym_registration_redirect_pkey" type="pk-constr" table="symds.sym_registration_redirect">
		<columns names="registrant_external_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_registration_request">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3280" y="2820"/>
	<column name="node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="external_id" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="status" not-null="true">
		<type name="character" length="2"/>
	</column>
	<column name="host_name" not-null="true">
		<type name="character varying" length="60"/>
	</column>
	<column name="ip_address" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="attempt_count" default-value="0">
		<type name="integer" length="0"/>
	</column>
	<column name="registered_node_id">
		<type name="character varying" length="50"/>
	</column>
	<column name="error_message">
		<type name="text" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_registration_request_pkey" type="pk-constr" table="symds.sym_registration_request">
		<columns names="node_group_id,external_id,create_time" ref-type="src-columns"/>
	</constraint>
</table>

<index name="sym_idx_reg_req_1" table="symds.sym_registration_request"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="node_group_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="external_id"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="status"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="host_name"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="ip_address"/>
		</idxelement>
</index>

<index name="sym_idx_reg_req_2" table="symds.sym_registration_request"
	 concurrent="false" unique="false" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="status"/>
		</idxelement>
</index>

<table name="sym_router">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3660" y="2820"/>
	<column name="router_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="target_catalog_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_schema_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_table_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="source_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="target_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="router_type">
		<type name="character varying" length="50"/>
	</column>
	<column name="router_expression">
		<type name="text" length="0"/>
	</column>
	<column name="sync_on_update" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_on_insert" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_on_delete" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="use_source_catalog_schema" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_router_pkey" type="pk-constr" table="symds.sym_router">
		<columns names="router_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_sequence">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="4100" y="2820"/>
	<column name="sequence_name" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="current_value" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="increment_by" not-null="true" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="min_value" not-null="true" default-value="1">
		<type name="bigint" length="0"/>
	</column>
	<column name="max_value" not-null="true" default-value="9999999999">
		<type name="bigint" length="0"/>
	</column>
	<column name="cycle" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_sequence_pkey" type="pk-constr" table="symds.sym_sequence">
		<columns names="sequence_name" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_table_reload_request">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="3200"/>
	<column name="target_node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="source_node_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="router_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="reload_select">
		<type name="text" length="0"/>
	</column>
	<column name="reload_delete_stmt">
		<type name="text" length="0"/>
	</column>
	<column name="reload_enabled" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="reload_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_table_reload_request_pkey" type="pk-constr" table="symds.sym_table_reload_request">
		<columns names="target_node_id,source_node_id,trigger_id,router_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_transform_table">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2900" y="3200"/>
	<column name="transform_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="source_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="target_node_group_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="transform_point" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="source_catalog_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="source_schema_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="source_table_name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_catalog_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_schema_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="target_table_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="update_first" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="update_action" default-value="'UPDATE_COL'">
		<type name="character varying" length="255"/>
	</column>
	<column name="delete_action" not-null="true">
		<type name="character varying" length="10"/>
	</column>
	<column name="transform_order" not-null="true" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="column_policy" not-null="true" default-value="'SPECIFIED'">
		<type name="character varying" length="10"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_transform_table_pkey" type="pk-constr" table="symds.sym_transform_table">
		<columns names="transform_id,source_node_group_id,target_node_group_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_transform_column">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3340" y="3200"/>
	<column name="transform_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="include_on" not-null="true" default-value="'*'::bpchar">
		<type name="character" length="1"/>
	</column>
	<column name="target_column_name" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="source_column_name">
		<type name="character varying" length="128"/>
	</column>
	<column name="pk" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="transform_type" default-value="'copy'">
		<type name="character varying" length="50"/>
	</column>
	<column name="transform_expression">
		<type name="text" length="0"/>
	</column>
	<column name="transform_order" not-null="true" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="create_time">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_transform_column_pkey" type="pk-constr" table="symds.sym_transform_column">
		<columns names="transform_id,include_on,target_column_name" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_trigger">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="3740" y="3200"/>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="source_catalog_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="source_schema_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="source_table_name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="channel_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="reload_channel_id" not-null="true" default-value="'reload'">
		<type name="character varying" length="128"/>
	</column>
	<column name="sync_on_update" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_on_insert" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_on_delete" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="sync_on_incoming_batch" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="name_for_update_trigger">
		<type name="character varying" length="255"/>
	</column>
	<column name="name_for_insert_trigger">
		<type name="character varying" length="255"/>
	</column>
	<column name="name_for_delete_trigger">
		<type name="character varying" length="255"/>
	</column>
	<column name="sync_on_update_condition">
		<type name="text" length="0"/>
	</column>
	<column name="sync_on_insert_condition">
		<type name="text" length="0"/>
	</column>
	<column name="sync_on_delete_condition">
		<type name="text" length="0"/>
	</column>
	<column name="custom_on_update_text">
		<type name="text" length="0"/>
	</column>
	<column name="custom_on_insert_text">
		<type name="text" length="0"/>
	</column>
	<column name="custom_on_delete_text">
		<type name="text" length="0"/>
	</column>
	<column name="external_select">
		<type name="text" length="0"/>
	</column>
	<column name="tx_id_expression">
		<type name="text" length="0"/>
	</column>
	<column name="channel_expression">
		<type name="text" length="0"/>
	</column>
	<column name="excluded_column_names">
		<type name="text" length="0"/>
	</column>
	<column name="sync_key_names">
		<type name="text" length="0"/>
	</column>
	<column name="use_stream_lobs" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="use_capture_lobs" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="use_capture_old_data" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="use_handle_key_updates" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_trigger_pkey" type="pk-constr" table="symds.sym_trigger">
		<columns names="trigger_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_trigger_hist">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="4200" y="3200"/>
	<column name="trigger_hist_id" not-null="true">
		<type name="integer" length="0"/>
	</column>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="source_table_name" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="source_catalog_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="source_schema_name">
		<type name="character varying" length="255"/>
	</column>
	<column name="name_for_update_trigger">
		<type name="character varying" length="255"/>
	</column>
	<column name="name_for_insert_trigger">
		<type name="character varying" length="255"/>
	</column>
	<column name="name_for_delete_trigger">
		<type name="character varying" length="255"/>
	</column>
	<column name="table_hash" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="trigger_row_hash" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="trigger_template_hash" not-null="true" default-value="0">
		<type name="bigint" length="0"/>
	</column>
	<column name="column_names" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="pk_column_names" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="last_trigger_build_reason" not-null="true">
		<type name="character" length="1"/>
	</column>
	<column name="error_message">
		<type name="text" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="inactive_time">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_trigger_hist_pkey" type="pk-constr" table="symds.sym_trigger_hist">
		<columns names="trigger_hist_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_trigger_router">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2500" y="3800"/>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="router_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="enabled" not-null="true" default-value="1">
		<type name="smallint" length="0"/>
	</column>
	<column name="initial_load_order" not-null="true" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="initial_load_select">
		<type name="text" length="0"/>
	</column>
	<column name="initial_load_delete_stmt">
		<type name="text" length="0"/>
	</column>
	<column name="initial_load_batch_count" default-value="1">
		<type name="integer" length="0"/>
	</column>
	<column name="ping_back_enabled" not-null="true" default-value="0">
		<type name="smallint" length="0"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_trigger_router_pkey" type="pk-constr" table="symds.sym_trigger_router">
		<columns names="trigger_id,router_id" ref-type="src-columns"/>
	</constraint>
</table>

<table name="sym_trigger_router_grouplet">
	<schema name="symds"/>
	<role name="formisuser"/>
	<position x="2920" y="3800"/>
	<column name="grouplet_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="trigger_id" not-null="true">
		<type name="character varying" length="128"/>
	</column>
	<column name="router_id" not-null="true">
		<type name="character varying" length="50"/>
	</column>
	<column name="applies_when" not-null="true">
		<type name="character" length="1"/>
	</column>
	<column name="create_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<column name="last_update_by">
		<type name="character varying" length="50"/>
	</column>
	<column name="last_update_time" not-null="true">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="sym_trigger_router_grouplet_pkey" type="pk-constr" table="symds.sym_trigger_router_grouplet">
		<columns names="grouplet_id,trigger_id,router_id,applies_when" ref-type="src-columns"/>
	</constraint>
</table>

<function name="sym_triggers_disabled"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="integer" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                                                     DECLARE                                                                                                                                                                                                  triggerDisabled INTEGER;                                                                                                                                                                             BEGIN                                                                                                                                                                                                    select current_setting('symmetric.triggers_disabled') into triggerDisabled;                                                                                                                            return triggerDisabled;                                                                                                                                                                              EXCEPTION WHEN OTHERS THEN                                                                                                                                                                               return 0;                                                                                                                                                                                            END;                                                                                                                                                                                                   ]]></definition>
</function>

<function name="sym_node_disabled"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="character varying" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                                                     DECLARE                                                                                                                                                                                                  nodeId VARCHAR(50);                                                                                                                                                                                  BEGIN                                                                                                                                                                                                    select current_setting('symmetric.node_disabled') into nodeId;                                                                                                                                         return nodeId;                                                                                                                                                                                       EXCEPTION WHEN OTHERS THEN                                                                                                                                                                               return '';                                                                                                                                                                                           END;                                                                                                                                                                                                   ]]></definition>
</function>

<function name="sym_largeobject"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<parameter name="objectid">
		<type name="oid" length="0"/>
	</parameter>
	<definition><![CDATA[                                                                                                                                            DECLARE                                                                                                                                                                                                  encodedBlob text;                                                                                                                                                                                      encodedBlobPage text;                                                                                                                                                                                BEGIN                                                                                                                                                                                                    encodedBlob := '';                                                                                                                                                                                     FOR encodedBlobPage IN SELECT pg_catalog.encode(data, 'escape')                                                                                                                                                   FROM pg_largeobject WHERE loid = objectId ORDER BY pageno LOOP                                                                                                                                           encodedBlob := encodedBlob || encodedBlobPage;                                                                                                                                                       END LOOP;                                                                                                                                                                                              RETURN pg_catalog.encode(pg_catalog.decode(encodedBlob, 'escape'), 'base64');                                                                                                                                              EXCEPTION WHEN OTHERS THEN                                                                                                                                                                               RETURN '';                                                                                                                                                                                           END                                                                                                                                                                                                    ]]></definition>
</function>

<function name="fsym_on_i_for_sym_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_router',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      2,                                                                                                                                             
                                      
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_catalog_name" is null then '' else '"' || replace(replace(cast(new."target_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_schema_name" is null then '' else '"' || replace(replace(cast(new."target_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_table_name" is null then '' else '"' || replace(replace(cast(new."target_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_type" is null then '' else '"' || replace(replace(cast(new."router_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_expression" is null then '' else '"' || replace(replace(cast(new."router_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_update" is null then '' else '"' || cast(cast(new."sync_on_update" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_insert" is null then '' else '"' || cast(cast(new."sync_on_insert" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_delete" is null then '' else '"' || cast(cast(new."sync_on_delete" as numeric) as varchar) || '"' end||','||
          case when new."use_source_catalog_schema" is null then '' else '"' || cast(cast(new."use_source_catalog_schema" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_router">
		<function signature="symds.fsym_on_i_for_sym_rtr_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_catalog_name" is null then '' else '"' || replace(replace(cast(new."target_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_schema_name" is null then '' else '"' || replace(replace(cast(new."target_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_table_name" is null then '' else '"' || replace(replace(cast(new."target_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_type" is null then '' else '"' || replace(replace(cast(new."router_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_expression" is null then '' else '"' || replace(replace(cast(new."router_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_update" is null then '' else '"' || cast(cast(new."sync_on_update" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_insert" is null then '' else '"' || cast(cast(new."sync_on_insert" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_delete" is null then '' else '"' || cast(cast(new."sync_on_delete" as numeric) as varchar) || '"' end||','||
          case when new."use_source_catalog_schema" is null then '' else '"' || cast(cast(new."use_source_catalog_schema" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_router',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      2,                                                                                                                                             
                                      
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_router">
		<function signature="symds.fsym_on_u_for_sym_rtr_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_router',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      2,                                                                                                                                             
                                      
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_router">
		<function signature="symds.fsym_on_d_for_sym_rtr_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_trnsfrm_tbl_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_transform_table',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      3,                                                                                                                                             
                                      
          case when new."transform_id" is null then '' else '"' || replace(replace(cast(new."transform_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."transform_point" is null then '' else '"' || replace(replace(cast(new."transform_point" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_catalog_name" is null then '' else '"' || replace(replace(cast(new."source_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_schema_name" is null then '' else '"' || replace(replace(cast(new."source_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_table_name" is null then '' else '"' || replace(replace(cast(new."source_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_catalog_name" is null then '' else '"' || replace(replace(cast(new."target_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_schema_name" is null then '' else '"' || replace(replace(cast(new."target_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_table_name" is null then '' else '"' || replace(replace(cast(new."target_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."update_first" is null then '' else '"' || cast(cast(new."update_first" as numeric) as varchar) || '"' end||','||
          case when new."update_action" is null then '' else '"' || replace(replace(cast(new."update_action" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."delete_action" is null then '' else '"' || replace(replace(cast(new."delete_action" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."transform_order" is null then '' else '"' || cast(cast(new."transform_order" as numeric) as varchar) || '"' end||','||
          case when new."column_policy" is null then '' else '"' || replace(replace(cast(new."column_policy" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_trnsfrm_tbl_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_transform_table">
		<function signature="symds.fsym_on_i_for_sym_trnsfrm_tbl_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_trnsfrm_tbl_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."transform_id" is null then '' else '"' || replace(replace(cast(new."transform_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."transform_point" is null then '' else '"' || replace(replace(cast(new."transform_point" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_catalog_name" is null then '' else '"' || replace(replace(cast(new."source_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_schema_name" is null then '' else '"' || replace(replace(cast(new."source_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_table_name" is null then '' else '"' || replace(replace(cast(new."source_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_catalog_name" is null then '' else '"' || replace(replace(cast(new."target_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_schema_name" is null then '' else '"' || replace(replace(cast(new."target_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_table_name" is null then '' else '"' || replace(replace(cast(new."target_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."update_first" is null then '' else '"' || cast(cast(new."update_first" as numeric) as varchar) || '"' end||','||
          case when new."update_action" is null then '' else '"' || replace(replace(cast(new."update_action" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."delete_action" is null then '' else '"' || replace(replace(cast(new."delete_action" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."transform_order" is null then '' else '"' || cast(cast(new."transform_order" as numeric) as varchar) || '"' end||','||
          case when new."column_policy" is null then '' else '"' || replace(replace(cast(new."column_policy" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_transform_table',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      3,                                                                                                                                             
                                      
          case when old."transform_id" is null then '' else '"' || replace(replace(cast(old."transform_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."source_node_group_id" is null then '' else '"' || replace(replace(cast(old."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."target_node_group_id" is null then '' else '"' || replace(replace(cast(old."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_trnsfrm_tbl_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_transform_table">
		<function signature="symds.fsym_on_u_for_sym_trnsfrm_tbl_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_trnsfrm_tbl_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_transform_table',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      3,                                                                                                                                             
                                      
          case when old."transform_id" is null then '' else '"' || replace(replace(cast(old."transform_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."source_node_group_id" is null then '' else '"' || replace(replace(cast(old."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."target_node_group_id" is null then '' else '"' || replace(replace(cast(old."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_trnsfrm_tbl_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_transform_table">
		<function signature="symds.fsym_on_d_for_sym_trnsfrm_tbl_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_prmtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_parameter',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      4,                                                                                                                                             
                                      
          case when new."external_id" is null then '' else '"' || replace(replace(cast(new."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."param_key" is null then '' else '"' || replace(replace(cast(new."param_key" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."param_value" is null then '' else '"' || replace(replace(cast(new."param_value" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_prmtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_parameter">
		<function signature="symds.fsym_on_i_for_sym_prmtr_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_prmtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."external_id" is null then '' else '"' || replace(replace(cast(new."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."param_key" is null then '' else '"' || replace(replace(cast(new."param_key" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."param_value" is null then '' else '"' || replace(replace(cast(new."param_value" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_parameter',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      4,                                                                                                                                             
                                      
          case when old."external_id" is null then '' else '"' || replace(replace(cast(old."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."node_group_id" is null then '' else '"' || replace(replace(cast(old."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."param_key" is null then '' else '"' || replace(replace(cast(old."param_key" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_prmtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_parameter">
		<function signature="symds.fsym_on_u_for_sym_prmtr_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_prmtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_parameter',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      4,                                                                                                                                             
                                      
          case when old."external_id" is null then '' else '"' || replace(replace(cast(old."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."node_group_id" is null then '' else '"' || replace(replace(cast(old."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."param_key" is null then '' else '"' || replace(replace(cast(old."param_key" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_prmtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_parameter">
		<function signature="symds.fsym_on_d_for_sym_prmtr_str()"/>
</trigger>

<function name="fsym_on_i_for_l_p_frst_ctr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'forest_actor',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      5,                                                                                                                                             
                                      
          case when new."commune_code" is null then '' else '"' || cast(cast(new."commune_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id" is null then '' else '"' || cast(cast(new."actor_id" as numeric) as varchar) || '"' end||','||
          case when new."actor_type_code" is null then '' else '"' || cast(cast(new."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_name" is null then '' else '"' || replace(replace(cast(new."actor_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."actor_address" is null then '' else '"' || replace(replace(cast(new."actor_address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."additional_info" is null then '' else '"' || replace(replace(cast(new."additional_info" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."ts_created" is null then '' else '"' || to_char(new."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."ts_modified" is null then '' else '"' || to_char(new."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_l_p_frst_ctr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.forest_actor">
		<function signature="public.fsym_on_i_for_l_p_frst_ctr_str()"/>
</trigger>

<function name="fsym_on_u_for_l_p_frst_ctr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    var_row_data := 
          case when new."commune_code" is null then '' else '"' || cast(cast(new."commune_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id" is null then '' else '"' || cast(cast(new."actor_id" as numeric) as varchar) || '"' end||','||
          case when new."actor_type_code" is null then '' else '"' || cast(cast(new."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_name" is null then '' else '"' || replace(replace(cast(new."actor_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."actor_address" is null then '' else '"' || replace(replace(cast(new."actor_address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."additional_info" is null then '' else '"' || replace(replace(cast(new."additional_info" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."ts_created" is null then '' else '"' || to_char(new."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."ts_modified" is null then '' else '"' || to_char(new."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := 
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end||','||
          case when old."actor_type_code" is null then '' else '"' || cast(cast(old."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_name" is null then '' else '"' || replace(replace(cast(old."actor_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."actor_address" is null then '' else '"' || replace(replace(cast(old."actor_address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."additional_info" is null then '' else '"' || replace(replace(cast(old."additional_info" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."ts_created" is null then '' else '"' || to_char(old."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."ts_modified" is null then '' else '"' || to_char(old."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'forest_actor',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      5,                                                                                                                                             
                                      
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_l_p_frst_ctr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.forest_actor">
		<function signature="public.fsym_on_u_for_l_p_frst_ctr_str()"/>
</trigger>

<function name="fsym_on_d_for_l_p_frst_ctr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'forest_actor',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      5,                                                                                                                                             
                                      
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end||','||
          case when old."actor_type_code" is null then '' else '"' || cast(cast(old."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_name" is null then '' else '"' || replace(replace(cast(old."actor_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."actor_address" is null then '' else '"' || replace(replace(cast(old."actor_address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."additional_info" is null then '' else '"' || replace(replace(cast(old."additional_info" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."ts_created" is null then '' else '"' || to_char(old."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."ts_modified" is null then '' else '"' || to_char(old."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_l_p_frst_ctr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="public.forest_actor">
		<function signature="public.fsym_on_d_for_l_p_frst_ctr_str()"/>
</trigger>

<function name="fsym_on_i_for_l_p_frst_mntrng_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'forest_monitoring',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      6,                                                                                                                                             
                                      
          case when new."forest_monitoring_uuid" is null then '' else '"' || replace(replace(cast(new."forest_monitoring_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_uuid" is null then '' else '"' || replace(replace(cast(new."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_history_uuid" is null then '' else '"' || replace(replace(cast(new."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."commune_code" is null then '' else '"' || cast(cast(new."commune_code" as numeric) as varchar) || '"' end||','||
          case when new."compt_code" is null then '' else '"' || replace(replace(cast(new."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sub_compt_code" is null then '' else '"' || replace(replace(cast(new."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_code" is null then '' else '"' || replace(replace(cast(new."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."change_type_id" is null then '' else '"' || cast(cast(new."change_type_id" as numeric) as varchar) || '"' end||','||
          case when new."date_time" is null then '' else '"' || to_char(new."date_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."area" is null then '' else '"' || cast(cast(new."area" as numeric) as varchar) || '"' end||','||
          case when new."volume" is null then '' else '"' || cast(cast(new."volume" as numeric) as varchar) || '"' end||','||
          case when new."stems_no" is null then '' else '"' || cast(cast(new."stems_no" as numeric) as varchar) || '"' end||','||
          case when new."description" is null then '' else '"' || replace(replace(cast(new."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."regeneration" is null then '' else '"' || cast(cast(new."regeneration" as numeric) as varchar) || '"' end||','||
          case when new."other_silvicultural" is null then '' else '"' || cast(cast(new."other_silvicultural" as numeric) as varchar) || '"' end||','||
          case when new."method_plantation" is null then '' else '"' || cast(cast(new."method_plantation" as numeric) as varchar) || '"' end||','||
          case when new."density_wood" is null then '' else '"' || cast(cast(new."density_wood" as numeric) as varchar) || '"' end||','||
          case when new."density_bamboo" is null then '' else '"' || cast(cast(new."density_bamboo" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_thin" is null then '' else '"' || cast(cast(new."stems_no_thin" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_bamboo_thin" is null then '' else '"' || cast(cast(new."stems_no_bamboo_thin" as numeric) as varchar) || '"' end||','||
          case when new."forest_type_code" is null then '' else '"' || cast(cast(new."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code" is null then '' else '"' || cast(cast(new."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_org_code" is null then '' else '"' || cast(cast(new."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code" is null then '' else '"' || cast(cast(new."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_type_code" is null then '' else '"' || cast(cast(new."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id" is null then '' else '"' || cast(cast(new."actor_id" as numeric) as varchar) || '"' end||','||
          case when new."site_cond_code" is null then '' else '"' || cast(cast(new."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when new."p_forest_org_code" is null then '' else '"' || cast(cast(new."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."tree_spec_code" is null then '' else '"' || replace(replace(cast(new."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."nar_for_org_code" is null then '' else '"' || cast(cast(new."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_cert_code" is null then '' else '"' || cast(cast(new."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when new."conflict_sit_code" is null then '' else '"' || cast(cast(new."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."plant_state_code" is null then '' else '"' || cast(cast(new."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_type_code_after" is null then '' else '"' || cast(cast(new."forest_type_code_after" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code_after" is null then '' else '"' || cast(cast(new."forest_func_sub_code_after" as numeric) as varchar) || '"' end||','||
          case when new."forest_org_code_after" is null then '' else '"' || cast(cast(new."forest_org_code_after" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code_after" is null then '' else '"' || cast(cast(new."forest_use_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when new."actor_type_code_after" is null then '' else '"' || cast(cast(new."actor_type_code_after" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_after" is null then '' else '"' || cast(cast(new."actor_id_after" as numeric) as varchar) || '"' end||','||
          case when new."site_cond_code_after" is null then '' else '"' || cast(cast(new."site_cond_code_after" as numeric) as varchar) || '"' end||','||
          case when new."p_forest_org_code_after" is null then '' else '"' || cast(cast(new."p_forest_org_code_after" as numeric) as varchar) || '"' end||','||
          case when new."tree_spec_code_after" is null then '' else '"' || replace(replace(cast(new."tree_spec_code_after" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."nar_for_org_code_after" is null then '' else '"' || cast(cast(new."nar_for_org_code_after" as numeric) as varchar) || '"' end||','||
          case when new."land_use_cert_code_after" is null then '' else '"' || cast(cast(new."land_use_cert_code_after" as numeric) as varchar) || '"' end||','||
          case when new."conflict_sit_code_after" is null then '' else '"' || cast(cast(new."conflict_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when new."plant_state_code_after" is null then '' else '"' || cast(cast(new."plant_state_code_after" as numeric) as varchar) || '"' end||','||
          case when new."ts_created" is null then '' else '"' || to_char(new."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."ts_modified" is null then '' else '"' || to_char(new."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_l_p_frst_mntrng_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.forest_monitoring">
		<function signature="public.fsym_on_i_for_l_p_frst_mntrng_str()"/>
</trigger>

<function name="fsym_on_u_for_l_p_frst_mntrng_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    var_row_data := 
          case when new."forest_monitoring_uuid" is null then '' else '"' || replace(replace(cast(new."forest_monitoring_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_uuid" is null then '' else '"' || replace(replace(cast(new."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_history_uuid" is null then '' else '"' || replace(replace(cast(new."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."commune_code" is null then '' else '"' || cast(cast(new."commune_code" as numeric) as varchar) || '"' end||','||
          case when new."compt_code" is null then '' else '"' || replace(replace(cast(new."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sub_compt_code" is null then '' else '"' || replace(replace(cast(new."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_code" is null then '' else '"' || replace(replace(cast(new."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."change_type_id" is null then '' else '"' || cast(cast(new."change_type_id" as numeric) as varchar) || '"' end||','||
          case when new."date_time" is null then '' else '"' || to_char(new."date_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."area" is null then '' else '"' || cast(cast(new."area" as numeric) as varchar) || '"' end||','||
          case when new."volume" is null then '' else '"' || cast(cast(new."volume" as numeric) as varchar) || '"' end||','||
          case when new."stems_no" is null then '' else '"' || cast(cast(new."stems_no" as numeric) as varchar) || '"' end||','||
          case when new."description" is null then '' else '"' || replace(replace(cast(new."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."regeneration" is null then '' else '"' || cast(cast(new."regeneration" as numeric) as varchar) || '"' end||','||
          case when new."other_silvicultural" is null then '' else '"' || cast(cast(new."other_silvicultural" as numeric) as varchar) || '"' end||','||
          case when new."method_plantation" is null then '' else '"' || cast(cast(new."method_plantation" as numeric) as varchar) || '"' end||','||
          case when new."density_wood" is null then '' else '"' || cast(cast(new."density_wood" as numeric) as varchar) || '"' end||','||
          case when new."density_bamboo" is null then '' else '"' || cast(cast(new."density_bamboo" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_thin" is null then '' else '"' || cast(cast(new."stems_no_thin" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_bamboo_thin" is null then '' else '"' || cast(cast(new."stems_no_bamboo_thin" as numeric) as varchar) || '"' end||','||
          case when new."forest_type_code" is null then '' else '"' || cast(cast(new."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code" is null then '' else '"' || cast(cast(new."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_org_code" is null then '' else '"' || cast(cast(new."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code" is null then '' else '"' || cast(cast(new."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_type_code" is null then '' else '"' || cast(cast(new."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id" is null then '' else '"' || cast(cast(new."actor_id" as numeric) as varchar) || '"' end||','||
          case when new."site_cond_code" is null then '' else '"' || cast(cast(new."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when new."p_forest_org_code" is null then '' else '"' || cast(cast(new."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."tree_spec_code" is null then '' else '"' || replace(replace(cast(new."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."nar_for_org_code" is null then '' else '"' || cast(cast(new."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_cert_code" is null then '' else '"' || cast(cast(new."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when new."conflict_sit_code" is null then '' else '"' || cast(cast(new."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."plant_state_code" is null then '' else '"' || cast(cast(new."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_type_code_after" is null then '' else '"' || cast(cast(new."forest_type_code_after" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code_after" is null then '' else '"' || cast(cast(new."forest_func_sub_code_after" as numeric) as varchar) || '"' end||','||
          case when new."forest_org_code_after" is null then '' else '"' || cast(cast(new."forest_org_code_after" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code_after" is null then '' else '"' || cast(cast(new."forest_use_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when new."actor_type_code_after" is null then '' else '"' || cast(cast(new."actor_type_code_after" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_after" is null then '' else '"' || cast(cast(new."actor_id_after" as numeric) as varchar) || '"' end||','||
          case when new."site_cond_code_after" is null then '' else '"' || cast(cast(new."site_cond_code_after" as numeric) as varchar) || '"' end||','||
          case when new."p_forest_org_code_after" is null then '' else '"' || cast(cast(new."p_forest_org_code_after" as numeric) as varchar) || '"' end||','||
          case when new."tree_spec_code_after" is null then '' else '"' || replace(replace(cast(new."tree_spec_code_after" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."nar_for_org_code_after" is null then '' else '"' || cast(cast(new."nar_for_org_code_after" as numeric) as varchar) || '"' end||','||
          case when new."land_use_cert_code_after" is null then '' else '"' || cast(cast(new."land_use_cert_code_after" as numeric) as varchar) || '"' end||','||
          case when new."conflict_sit_code_after" is null then '' else '"' || cast(cast(new."conflict_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when new."plant_state_code_after" is null then '' else '"' || cast(cast(new."plant_state_code_after" as numeric) as varchar) || '"' end||','||
          case when new."ts_created" is null then '' else '"' || to_char(new."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."ts_modified" is null then '' else '"' || to_char(new."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := 
          case when old."forest_monitoring_uuid" is null then '' else '"' || replace(replace(cast(old."forest_monitoring_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_uuid" is null then '' else '"' || replace(replace(cast(old."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_history_uuid" is null then '' else '"' || replace(replace(cast(old."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."compt_code" is null then '' else '"' || replace(replace(cast(old."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."sub_compt_code" is null then '' else '"' || replace(replace(cast(old."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_code" is null then '' else '"' || replace(replace(cast(old."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."change_type_id" is null then '' else '"' || cast(cast(old."change_type_id" as numeric) as varchar) || '"' end||','||
          case when old."date_time" is null then '' else '"' || to_char(old."date_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."area" is null then '' else '"' || cast(cast(old."area" as numeric) as varchar) || '"' end||','||
          case when old."volume" is null then '' else '"' || cast(cast(old."volume" as numeric) as varchar) || '"' end||','||
          case when old."stems_no" is null then '' else '"' || cast(cast(old."stems_no" as numeric) as varchar) || '"' end||','||
          case when old."description" is null then '' else '"' || replace(replace(cast(old."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."regeneration" is null then '' else '"' || cast(cast(old."regeneration" as numeric) as varchar) || '"' end||','||
          case when old."other_silvicultural" is null then '' else '"' || cast(cast(old."other_silvicultural" as numeric) as varchar) || '"' end||','||
          case when old."method_plantation" is null then '' else '"' || cast(cast(old."method_plantation" as numeric) as varchar) || '"' end||','||
          case when old."density_wood" is null then '' else '"' || cast(cast(old."density_wood" as numeric) as varchar) || '"' end||','||
          case when old."density_bamboo" is null then '' else '"' || cast(cast(old."density_bamboo" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_thin" is null then '' else '"' || cast(cast(old."stems_no_thin" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_bamboo_thin" is null then '' else '"' || cast(cast(old."stems_no_bamboo_thin" as numeric) as varchar) || '"' end||','||
          case when old."forest_type_code" is null then '' else '"' || cast(cast(old."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code" is null then '' else '"' || cast(cast(old."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_org_code" is null then '' else '"' || cast(cast(old."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code" is null then '' else '"' || cast(cast(old."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_type_code" is null then '' else '"' || cast(cast(old."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end||','||
          case when old."site_cond_code" is null then '' else '"' || cast(cast(old."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when old."p_forest_org_code" is null then '' else '"' || cast(cast(old."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."tree_spec_code" is null then '' else '"' || replace(replace(cast(old."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."nar_for_org_code" is null then '' else '"' || cast(cast(old."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_cert_code" is null then '' else '"' || cast(cast(old."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when old."conflict_sit_code" is null then '' else '"' || cast(cast(old."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."plant_state_code" is null then '' else '"' || cast(cast(old."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_type_code_after" is null then '' else '"' || cast(cast(old."forest_type_code_after" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code_after" is null then '' else '"' || cast(cast(old."forest_func_sub_code_after" as numeric) as varchar) || '"' end||','||
          case when old."forest_org_code_after" is null then '' else '"' || cast(cast(old."forest_org_code_after" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code_after" is null then '' else '"' || cast(cast(old."forest_use_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when old."actor_type_code_after" is null then '' else '"' || cast(cast(old."actor_type_code_after" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_after" is null then '' else '"' || cast(cast(old."actor_id_after" as numeric) as varchar) || '"' end||','||
          case when old."site_cond_code_after" is null then '' else '"' || cast(cast(old."site_cond_code_after" as numeric) as varchar) || '"' end||','||
          case when old."p_forest_org_code_after" is null then '' else '"' || cast(cast(old."p_forest_org_code_after" as numeric) as varchar) || '"' end||','||
          case when old."tree_spec_code_after" is null then '' else '"' || replace(replace(cast(old."tree_spec_code_after" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."nar_for_org_code_after" is null then '' else '"' || cast(cast(old."nar_for_org_code_after" as numeric) as varchar) || '"' end||','||
          case when old."land_use_cert_code_after" is null then '' else '"' || cast(cast(old."land_use_cert_code_after" as numeric) as varchar) || '"' end||','||
          case when old."conflict_sit_code_after" is null then '' else '"' || cast(cast(old."conflict_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when old."plant_state_code_after" is null then '' else '"' || cast(cast(old."plant_state_code_after" as numeric) as varchar) || '"' end||','||
          case when old."ts_created" is null then '' else '"' || to_char(old."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."ts_modified" is null then '' else '"' || to_char(old."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'forest_monitoring',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      6,                                                                                                                                             
                                      
          case when old."forest_monitoring_uuid" is null then '' else '"' || replace(replace(cast(old."forest_monitoring_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_l_p_frst_mntrng_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.forest_monitoring">
		<function signature="public.fsym_on_u_for_l_p_frst_mntrng_str()"/>
</trigger>

<function name="fsym_on_d_for_l_p_frst_mntrng_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'forest_monitoring',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      6,                                                                                                                                             
                                      
          case when old."forest_monitoring_uuid" is null then '' else '"' || replace(replace(cast(old."forest_monitoring_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      
          case when old."forest_monitoring_uuid" is null then '' else '"' || replace(replace(cast(old."forest_monitoring_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_uuid" is null then '' else '"' || replace(replace(cast(old."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_history_uuid" is null then '' else '"' || replace(replace(cast(old."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."compt_code" is null then '' else '"' || replace(replace(cast(old."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."sub_compt_code" is null then '' else '"' || replace(replace(cast(old."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_code" is null then '' else '"' || replace(replace(cast(old."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."change_type_id" is null then '' else '"' || cast(cast(old."change_type_id" as numeric) as varchar) || '"' end||','||
          case when old."date_time" is null then '' else '"' || to_char(old."date_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."area" is null then '' else '"' || cast(cast(old."area" as numeric) as varchar) || '"' end||','||
          case when old."volume" is null then '' else '"' || cast(cast(old."volume" as numeric) as varchar) || '"' end||','||
          case when old."stems_no" is null then '' else '"' || cast(cast(old."stems_no" as numeric) as varchar) || '"' end||','||
          case when old."description" is null then '' else '"' || replace(replace(cast(old."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."regeneration" is null then '' else '"' || cast(cast(old."regeneration" as numeric) as varchar) || '"' end||','||
          case when old."other_silvicultural" is null then '' else '"' || cast(cast(old."other_silvicultural" as numeric) as varchar) || '"' end||','||
          case when old."method_plantation" is null then '' else '"' || cast(cast(old."method_plantation" as numeric) as varchar) || '"' end||','||
          case when old."density_wood" is null then '' else '"' || cast(cast(old."density_wood" as numeric) as varchar) || '"' end||','||
          case when old."density_bamboo" is null then '' else '"' || cast(cast(old."density_bamboo" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_thin" is null then '' else '"' || cast(cast(old."stems_no_thin" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_bamboo_thin" is null then '' else '"' || cast(cast(old."stems_no_bamboo_thin" as numeric) as varchar) || '"' end||','||
          case when old."forest_type_code" is null then '' else '"' || cast(cast(old."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code" is null then '' else '"' || cast(cast(old."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_org_code" is null then '' else '"' || cast(cast(old."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code" is null then '' else '"' || cast(cast(old."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_type_code" is null then '' else '"' || cast(cast(old."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end||','||
          case when old."site_cond_code" is null then '' else '"' || cast(cast(old."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when old."p_forest_org_code" is null then '' else '"' || cast(cast(old."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."tree_spec_code" is null then '' else '"' || replace(replace(cast(old."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."nar_for_org_code" is null then '' else '"' || cast(cast(old."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_cert_code" is null then '' else '"' || cast(cast(old."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when old."conflict_sit_code" is null then '' else '"' || cast(cast(old."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."plant_state_code" is null then '' else '"' || cast(cast(old."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_type_code_after" is null then '' else '"' || cast(cast(old."forest_type_code_after" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code_after" is null then '' else '"' || cast(cast(old."forest_func_sub_code_after" as numeric) as varchar) || '"' end||','||
          case when old."forest_org_code_after" is null then '' else '"' || cast(cast(old."forest_org_code_after" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code_after" is null then '' else '"' || cast(cast(old."forest_use_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when old."actor_type_code_after" is null then '' else '"' || cast(cast(old."actor_type_code_after" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_after" is null then '' else '"' || cast(cast(old."actor_id_after" as numeric) as varchar) || '"' end||','||
          case when old."site_cond_code_after" is null then '' else '"' || cast(cast(old."site_cond_code_after" as numeric) as varchar) || '"' end||','||
          case when old."p_forest_org_code_after" is null then '' else '"' || cast(cast(old."p_forest_org_code_after" as numeric) as varchar) || '"' end||','||
          case when old."tree_spec_code_after" is null then '' else '"' || replace(replace(cast(old."tree_spec_code_after" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."nar_for_org_code_after" is null then '' else '"' || cast(cast(old."nar_for_org_code_after" as numeric) as varchar) || '"' end||','||
          case when old."land_use_cert_code_after" is null then '' else '"' || cast(cast(old."land_use_cert_code_after" as numeric) as varchar) || '"' end||','||
          case when old."conflict_sit_code_after" is null then '' else '"' || cast(cast(old."conflict_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when old."plant_state_code_after" is null then '' else '"' || cast(cast(old."plant_state_code_after" as numeric) as varchar) || '"' end||','||
          case when old."ts_created" is null then '' else '"' || to_char(old."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."ts_modified" is null then '' else '"' || to_char(old."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_l_p_frst_mntrng_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="public.forest_monitoring">
		<function signature="public.fsym_on_d_for_l_p_frst_mntrng_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_fl_trggr_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_file_trigger_router',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      7,                                                                                                                                             
                                      
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_enabled" is null then '' else '"' || cast(cast(new."initial_load_enabled" as numeric) as varchar) || '"' end||','||
          case when new."target_base_dir" is null then '' else '"' || replace(replace(cast(new."target_base_dir" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."conflict_strategy" is null then '' else '"' || replace(replace(cast(new."conflict_strategy" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_fl_trggr_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_file_trigger_router">
		<function signature="symds.fsym_on_i_for_sym_fl_trggr_rtr_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_fl_trggr_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_enabled" is null then '' else '"' || cast(cast(new."initial_load_enabled" as numeric) as varchar) || '"' end||','||
          case when new."target_base_dir" is null then '' else '"' || replace(replace(cast(new."target_base_dir" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."conflict_strategy" is null then '' else '"' || replace(replace(cast(new."conflict_strategy" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_file_trigger_router',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      7,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_fl_trggr_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_file_trigger_router">
		<function signature="symds.fsym_on_u_for_sym_fl_trggr_rtr_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_fl_trggr_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_file_trigger_router',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      7,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_fl_trggr_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_file_trigger_router">
		<function signature="symds.fsym_on_d_for_sym_fl_trggr_rtr_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_tbl_rld_rqst_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_table_reload_request',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      8,                                                                                                                                             
                                      
          case when new."target_node_id" is null then '' else '"' || replace(replace(cast(new."target_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_id" is null then '' else '"' || replace(replace(cast(new."source_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_select" is null then '' else '"' || replace(replace(cast(new."reload_select" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_delete_stmt" is null then '' else '"' || replace(replace(cast(new."reload_delete_stmt" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_enabled" is null then '' else '"' || cast(cast(new."reload_enabled" as numeric) as varchar) || '"' end||','||
          case when new."reload_time" is null then '' else '"' || to_char(new."reload_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_tbl_rld_rqst_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_table_reload_request">
		<function signature="symds.fsym_on_i_for_sym_tbl_rld_rqst_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_tbl_rld_rqst_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."target_node_id" is null then '' else '"' || replace(replace(cast(new."target_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_id" is null then '' else '"' || replace(replace(cast(new."source_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_select" is null then '' else '"' || replace(replace(cast(new."reload_select" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_delete_stmt" is null then '' else '"' || replace(replace(cast(new."reload_delete_stmt" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_enabled" is null then '' else '"' || cast(cast(new."reload_enabled" as numeric) as varchar) || '"' end||','||
          case when new."reload_time" is null then '' else '"' || to_char(new."reload_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_table_reload_request',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      8,                                                                                                                                             
                                      
          case when old."target_node_id" is null then '' else '"' || replace(replace(cast(old."target_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."source_node_id" is null then '' else '"' || replace(replace(cast(old."source_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_tbl_rld_rqst_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_table_reload_request">
		<function signature="symds.fsym_on_u_for_sym_tbl_rld_rqst_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_tbl_rld_rqst_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_table_reload_request',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      8,                                                                                                                                             
                                      
          case when old."target_node_id" is null then '' else '"' || replace(replace(cast(old."target_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."source_node_id" is null then '' else '"' || replace(replace(cast(old."source_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_tbl_rld_rqst_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_table_reload_request">
		<function signature="symds.fsym_on_d_for_sym_tbl_rld_rqst_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_grplt_lnk_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_grouplet_link',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      10,                                                                                                                                             
                                      
          case when new."grouplet_id" is null then '' else '"' || replace(replace(cast(new."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."external_id" is null then '' else '"' || replace(replace(cast(new."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_grplt_lnk_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_grouplet_link">
		<function signature="symds.fsym_on_i_for_sym_grplt_lnk_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_grplt_lnk_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."grouplet_id" is null then '' else '"' || replace(replace(cast(new."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."external_id" is null then '' else '"' || replace(replace(cast(new."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_grouplet_link',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      10,                                                                                                                                             
                                      
          case when old."grouplet_id" is null then '' else '"' || replace(replace(cast(old."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."external_id" is null then '' else '"' || replace(replace(cast(old."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_grplt_lnk_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_grouplet_link">
		<function signature="symds.fsym_on_u_for_sym_grplt_lnk_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_grplt_lnk_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_grouplet_link',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      10,                                                                                                                                             
                                      
          case when old."grouplet_id" is null then '' else '"' || replace(replace(cast(old."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."external_id" is null then '' else '"' || replace(replace(cast(old."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_grplt_lnk_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_grouplet_link">
		<function signature="symds.fsym_on_d_for_sym_grplt_lnk_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_grplt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_grouplet',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      11,                                                                                                                                             
                                      
          case when new."grouplet_id" is null then '' else '"' || replace(replace(cast(new."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."grouplet_link_policy" is null then '' else '"' || replace(replace(cast(new."grouplet_link_policy" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."description" is null then '' else '"' || replace(replace(cast(new."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_grplt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_grouplet">
		<function signature="symds.fsym_on_i_for_sym_grplt_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_grplt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."grouplet_id" is null then '' else '"' || replace(replace(cast(new."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."grouplet_link_policy" is null then '' else '"' || replace(replace(cast(new."grouplet_link_policy" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."description" is null then '' else '"' || replace(replace(cast(new."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_grouplet',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      11,                                                                                                                                             
                                      
          case when old."grouplet_id" is null then '' else '"' || replace(replace(cast(old."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_grplt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_grouplet">
		<function signature="symds.fsym_on_u_for_sym_grplt_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_grplt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_grouplet',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      11,                                                                                                                                             
                                      
          case when old."grouplet_id" is null then '' else '"' || replace(replace(cast(old."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_grplt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_grouplet">
		<function signature="symds.fsym_on_d_for_sym_grplt_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_fl_snpsht_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_file_snapshot',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      12,                                                                                                                                             
                                      
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."relative_dir" is null then '' else '"' || replace(replace(cast(new."relative_dir" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."file_name" is null then '' else '"' || replace(replace(cast(new."file_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_channel_id" is null then '' else '"' || replace(replace(cast(new."reload_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_event_type" is null then '' else '"' || replace(replace(cast(new."last_event_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."crc32_checksum" is null then '' else '"' || cast(cast(new."crc32_checksum" as numeric) as varchar) || '"' end||','||
          case when new."file_size" is null then '' else '"' || cast(cast(new."file_size" as numeric) as varchar) || '"' end||','||
          case when new."file_modified_time" is null then '' else '"' || cast(cast(new."file_modified_time" as numeric) as varchar) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      new.channel_id,                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_fl_snpsht_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_file_snapshot">
		<function signature="symds.fsym_on_i_for_sym_fl_snpsht_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_fl_snpsht_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    var_row_data := 
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."relative_dir" is null then '' else '"' || replace(replace(cast(new."relative_dir" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."file_name" is null then '' else '"' || replace(replace(cast(new."file_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_channel_id" is null then '' else '"' || replace(replace(cast(new."reload_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_event_type" is null then '' else '"' || replace(replace(cast(new."last_event_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."crc32_checksum" is null then '' else '"' || cast(cast(new."crc32_checksum" as numeric) as varchar) || '"' end||','||
          case when new."file_size" is null then '' else '"' || cast(cast(new."file_size" as numeric) as varchar) || '"' end||','||
          case when new."file_modified_time" is null then '' else '"' || cast(cast(new."file_modified_time" as numeric) as varchar) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := 
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."relative_dir" is null then '' else '"' || replace(replace(cast(old."relative_dir" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."file_name" is null then '' else '"' || replace(replace(cast(old."file_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."channel_id" is null then '' else '"' || replace(replace(cast(old."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."reload_channel_id" is null then '' else '"' || replace(replace(cast(old."reload_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."last_event_type" is null then '' else '"' || replace(replace(cast(old."last_event_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."crc32_checksum" is null then '' else '"' || cast(cast(old."crc32_checksum" as numeric) as varchar) || '"' end||','||
          case when old."file_size" is null then '' else '"' || cast(cast(old."file_size" as numeric) as varchar) || '"' end||','||
          case when old."file_modified_time" is null then '' else '"' || cast(cast(old."file_modified_time" as numeric) as varchar) || '"' end||','||
          case when old."last_update_time" is null then '' else '"' || to_char(old."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."last_update_by" is null then '' else '"' || replace(replace(cast(old."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."create_time" is null then '' else '"' || to_char(old."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_file_snapshot',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      12,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."relative_dir" is null then '' else '"' || replace(replace(cast(old."relative_dir" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."file_name" is null then '' else '"' || replace(replace(cast(old."file_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      new.channel_id,                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_fl_snpsht_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_file_snapshot">
		<function signature="symds.fsym_on_u_for_sym_fl_snpsht_str()"/>
</trigger>

<function name="fsym_on_i_for_l_p_cnfg_mymps_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'config_mymaps',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      13,                                                                                                                                             
                                      
          case when new."user_id" is null then '' else '"' || cast(cast(new."user_id" as numeric) as varchar) || '"' end||','||
          case when new."config_style_id" is null then '' else '"' || cast(cast(new."config_style_id" as numeric) as varchar) || '"' end||','||
          case when new."year_filter" is null then '' else '"' || cast(cast(new."year_filter" as numeric) as varchar) || '"' end||','||
          case when new."layer_name" is null then '' else '"' || replace(replace(cast(new."layer_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_l_p_cnfg_mymps_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.config_mymaps">
		<function signature="public.fsym_on_i_for_l_p_cnfg_mymps_str()"/>
</trigger>

<function name="fsym_on_u_for_l_p_cnfg_mymps_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    var_row_data := 
          case when new."user_id" is null then '' else '"' || cast(cast(new."user_id" as numeric) as varchar) || '"' end||','||
          case when new."config_style_id" is null then '' else '"' || cast(cast(new."config_style_id" as numeric) as varchar) || '"' end||','||
          case when new."year_filter" is null then '' else '"' || cast(cast(new."year_filter" as numeric) as varchar) || '"' end||','||
          case when new."layer_name" is null then '' else '"' || replace(replace(cast(new."layer_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end; 
                                    var_old_data := 
          case when old."user_id" is null then '' else '"' || cast(cast(old."user_id" as numeric) as varchar) || '"' end||','||
          case when old."config_style_id" is null then '' else '"' || cast(cast(old."config_style_id" as numeric) as varchar) || '"' end||','||
          case when old."year_filter" is null then '' else '"' || cast(cast(old."year_filter" as numeric) as varchar) || '"' end||','||
          case when old."layer_name" is null then '' else '"' || replace(replace(cast(old."layer_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'config_mymaps',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      13,                                                                                                                                             
                                      
          case when old."user_id" is null then '' else '"' || cast(cast(old."user_id" as numeric) as varchar) || '"' end||','||
          case when old."config_style_id" is null then '' else '"' || cast(cast(old."config_style_id" as numeric) as varchar) || '"' end||','||
          case when old."year_filter" is null then '' else '"' || cast(cast(old."year_filter" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_l_p_cnfg_mymps_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.config_mymaps">
		<function signature="public.fsym_on_u_for_l_p_cnfg_mymps_str()"/>
</trigger>

<function name="fsym_on_d_for_l_p_cnfg_mymps_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'config_mymaps',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      13,                                                                                                                                             
                                      
          case when old."user_id" is null then '' else '"' || cast(cast(old."user_id" as numeric) as varchar) || '"' end||','||
          case when old."config_style_id" is null then '' else '"' || cast(cast(old."config_style_id" as numeric) as varchar) || '"' end||','||
          case when old."year_filter" is null then '' else '"' || cast(cast(old."year_filter" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      
          case when old."user_id" is null then '' else '"' || cast(cast(old."user_id" as numeric) as varchar) || '"' end||','||
          case when old."config_style_id" is null then '' else '"' || cast(cast(old."config_style_id" as numeric) as varchar) || '"' end||','||
          case when old."year_filter" is null then '' else '"' || cast(cast(old."year_filter" as numeric) as varchar) || '"' end||','||
          case when old."layer_name" is null then '' else '"' || replace(replace(cast(old."layer_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_l_p_cnfg_mymps_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="public.config_mymaps">
		<function signature="public.fsym_on_d_for_l_p_cnfg_mymps_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_fl_trggr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_file_trigger',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      14,                                                                                                                                             
                                      
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_channel_id" is null then '' else '"' || replace(replace(cast(new."reload_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."base_dir" is null then '' else '"' || replace(replace(cast(new."base_dir" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."recurse" is null then '' else '"' || cast(cast(new."recurse" as numeric) as varchar) || '"' end||','||
          case when new."includes_files" is null then '' else '"' || replace(replace(cast(new."includes_files" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."excludes_files" is null then '' else '"' || replace(replace(cast(new."excludes_files" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_create" is null then '' else '"' || cast(cast(new."sync_on_create" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_modified" is null then '' else '"' || cast(cast(new."sync_on_modified" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_delete" is null then '' else '"' || cast(cast(new."sync_on_delete" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_ctl_file" is null then '' else '"' || cast(cast(new."sync_on_ctl_file" as numeric) as varchar) || '"' end||','||
          case when new."delete_after_sync" is null then '' else '"' || cast(cast(new."delete_after_sync" as numeric) as varchar) || '"' end||','||
          case when new."before_copy_script" is null then '' else '"' || replace(replace(cast(new."before_copy_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."after_copy_script" is null then '' else '"' || replace(replace(cast(new."after_copy_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_fl_trggr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_file_trigger">
		<function signature="symds.fsym_on_i_for_sym_fl_trggr_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_fl_trggr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_channel_id" is null then '' else '"' || replace(replace(cast(new."reload_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."base_dir" is null then '' else '"' || replace(replace(cast(new."base_dir" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."recurse" is null then '' else '"' || cast(cast(new."recurse" as numeric) as varchar) || '"' end||','||
          case when new."includes_files" is null then '' else '"' || replace(replace(cast(new."includes_files" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."excludes_files" is null then '' else '"' || replace(replace(cast(new."excludes_files" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_create" is null then '' else '"' || cast(cast(new."sync_on_create" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_modified" is null then '' else '"' || cast(cast(new."sync_on_modified" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_delete" is null then '' else '"' || cast(cast(new."sync_on_delete" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_ctl_file" is null then '' else '"' || cast(cast(new."sync_on_ctl_file" as numeric) as varchar) || '"' end||','||
          case when new."delete_after_sync" is null then '' else '"' || cast(cast(new."delete_after_sync" as numeric) as varchar) || '"' end||','||
          case when new."before_copy_script" is null then '' else '"' || replace(replace(cast(new."before_copy_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."after_copy_script" is null then '' else '"' || replace(replace(cast(new."after_copy_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_file_trigger',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      14,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_fl_trggr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_file_trigger">
		<function signature="symds.fsym_on_u_for_sym_fl_trggr_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_fl_trggr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_file_trigger',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      14,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_fl_trggr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_file_trigger">
		<function signature="symds.fsym_on_d_for_sym_fl_trggr_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_trnsfrm_clmn_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_transform_column',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      15,                                                                                                                                             
                                      
          case when new."transform_id" is null then '' else '"' || replace(replace(cast(new."transform_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."include_on" is null then '' else '"' || replace(replace(cast(new."include_on" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_column_name" is null then '' else '"' || replace(replace(cast(new."target_column_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_column_name" is null then '' else '"' || replace(replace(cast(new."source_column_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."pk" is null then '' else '"' || cast(cast(new."pk" as numeric) as varchar) || '"' end||','||
          case when new."transform_type" is null then '' else '"' || replace(replace(cast(new."transform_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."transform_expression" is null then '' else '"' || replace(replace(cast(new."transform_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."transform_order" is null then '' else '"' || cast(cast(new."transform_order" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_trnsfrm_clmn_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_transform_column">
		<function signature="symds.fsym_on_i_for_sym_trnsfrm_clmn_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_trnsfrm_clmn_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."transform_id" is null then '' else '"' || replace(replace(cast(new."transform_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."include_on" is null then '' else '"' || replace(replace(cast(new."include_on" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_column_name" is null then '' else '"' || replace(replace(cast(new."target_column_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_column_name" is null then '' else '"' || replace(replace(cast(new."source_column_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."pk" is null then '' else '"' || cast(cast(new."pk" as numeric) as varchar) || '"' end||','||
          case when new."transform_type" is null then '' else '"' || replace(replace(cast(new."transform_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."transform_expression" is null then '' else '"' || replace(replace(cast(new."transform_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."transform_order" is null then '' else '"' || cast(cast(new."transform_order" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_transform_column',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      15,                                                                                                                                             
                                      
          case when old."transform_id" is null then '' else '"' || replace(replace(cast(old."transform_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."include_on" is null then '' else '"' || replace(replace(cast(old."include_on" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."target_column_name" is null then '' else '"' || replace(replace(cast(old."target_column_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_trnsfrm_clmn_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_transform_column">
		<function signature="symds.fsym_on_u_for_sym_trnsfrm_clmn_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_trnsfrm_clmn_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_transform_column',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      15,                                                                                                                                             
                                      
          case when old."transform_id" is null then '' else '"' || replace(replace(cast(old."transform_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."include_on" is null then '' else '"' || replace(replace(cast(old."include_on" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."target_column_name" is null then '' else '"' || replace(replace(cast(old."target_column_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_trnsfrm_clmn_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_transform_column">
		<function signature="symds.fsym_on_d_for_sym_trnsfrm_clmn_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_trggr_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_trigger_router',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      16,                                                                                                                                             
                                      
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_order" is null then '' else '"' || cast(cast(new."initial_load_order" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_select" is null then '' else '"' || replace(replace(cast(new."initial_load_select" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."initial_load_delete_stmt" is null then '' else '"' || replace(replace(cast(new."initial_load_delete_stmt" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."initial_load_batch_count" is null then '' else '"' || cast(cast(new."initial_load_batch_count" as numeric) as varchar) || '"' end||','||
          case when new."ping_back_enabled" is null then '' else '"' || cast(cast(new."ping_back_enabled" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_trggr_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_trigger_router">
		<function signature="symds.fsym_on_i_for_sym_trggr_rtr_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_trggr_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_order" is null then '' else '"' || cast(cast(new."initial_load_order" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_select" is null then '' else '"' || replace(replace(cast(new."initial_load_select" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."initial_load_delete_stmt" is null then '' else '"' || replace(replace(cast(new."initial_load_delete_stmt" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."initial_load_batch_count" is null then '' else '"' || cast(cast(new."initial_load_batch_count" as numeric) as varchar) || '"' end||','||
          case when new."ping_back_enabled" is null then '' else '"' || cast(cast(new."ping_back_enabled" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_trigger_router',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      16,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_trggr_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_trigger_router">
		<function signature="symds.fsym_on_u_for_sym_trggr_rtr_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_trggr_rtr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_trigger_router',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      16,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_trggr_rtr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_trigger_router">
		<function signature="symds.fsym_on_d_for_sym_trggr_rtr_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_nd_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_node',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      17,                                                                                                                                             
                                      
          case when new."node_id" is null then '' else '"' || replace(replace(cast(new."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."external_id" is null then '' else '"' || replace(replace(cast(new."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_enabled" is null then '' else '"' || cast(cast(new."sync_enabled" as numeric) as varchar) || '"' end||','||
          case when new."sync_url" is null then '' else '"' || replace(replace(cast(new."sync_url" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."schema_version" is null then '' else '"' || replace(replace(cast(new."schema_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."symmetric_version" is null then '' else '"' || replace(replace(cast(new."symmetric_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."database_type" is null then '' else '"' || replace(replace(cast(new."database_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."database_version" is null then '' else '"' || replace(replace(cast(new."database_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."heartbeat_time" is null then '' else '"' || to_char(new."heartbeat_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."timezone_offset" is null then '' else '"' || replace(replace(cast(new."timezone_offset" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."batch_to_send_count" is null then '' else '"' || cast(cast(new."batch_to_send_count" as numeric) as varchar) || '"' end||','||
          case when new."batch_in_error_count" is null then '' else '"' || cast(cast(new."batch_in_error_count" as numeric) as varchar) || '"' end||','||
          case when new."created_at_node_id" is null then '' else '"' || replace(replace(cast(new."created_at_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."deployment_type" is null then '' else '"' || replace(replace(cast(new."deployment_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_nd_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_node">
		<function signature="symds.fsym_on_i_for_sym_nd_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_nd_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."node_id" is null then '' else '"' || replace(replace(cast(new."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."external_id" is null then '' else '"' || replace(replace(cast(new."external_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_enabled" is null then '' else '"' || cast(cast(new."sync_enabled" as numeric) as varchar) || '"' end||','||
          case when new."sync_url" is null then '' else '"' || replace(replace(cast(new."sync_url" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."schema_version" is null then '' else '"' || replace(replace(cast(new."schema_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."symmetric_version" is null then '' else '"' || replace(replace(cast(new."symmetric_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."database_type" is null then '' else '"' || replace(replace(cast(new."database_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."database_version" is null then '' else '"' || replace(replace(cast(new."database_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."heartbeat_time" is null then '' else '"' || to_char(new."heartbeat_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."timezone_offset" is null then '' else '"' || replace(replace(cast(new."timezone_offset" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."batch_to_send_count" is null then '' else '"' || cast(cast(new."batch_to_send_count" as numeric) as varchar) || '"' end||','||
          case when new."batch_in_error_count" is null then '' else '"' || cast(cast(new."batch_in_error_count" as numeric) as varchar) || '"' end||','||
          case when new."created_at_node_id" is null then '' else '"' || replace(replace(cast(new."created_at_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."deployment_type" is null then '' else '"' || replace(replace(cast(new."deployment_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_node',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      17,                                                                                                                                             
                                      
          case when old."node_id" is null then '' else '"' || replace(replace(cast(old."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_nd_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_node">
		<function signature="symds.fsym_on_u_for_sym_nd_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_nd_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_node',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      17,                                                                                                                                             
                                      
          case when old."node_id" is null then '' else '"' || replace(replace(cast(old."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_nd_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_node">
		<function signature="symds.fsym_on_d_for_sym_nd_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_nd_grp_chnnl_wnd_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_node_group_channel_wnd',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      18,                                                                                                                                             
                                      
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."start_time" is null then '' else '"' || to_char(new."start_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."end_time" is null then '' else '"' || to_char(new."end_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_nd_grp_chnnl_wnd_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_node_group_channel_wnd">
		<function signature="symds.fsym_on_i_for_sym_nd_grp_chnnl_wnd_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_nd_grp_chnnl_wnd_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."start_time" is null then '' else '"' || to_char(new."start_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."end_time" is null then '' else '"' || to_char(new."end_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_node_group_channel_wnd',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      18,                                                                                                                                             
                                      
          case when old."node_group_id" is null then '' else '"' || replace(replace(cast(old."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."channel_id" is null then '' else '"' || replace(replace(cast(old."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."start_time" is null then '' else '"' || to_char(old."start_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."end_time" is null then '' else '"' || to_char(old."end_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_nd_grp_chnnl_wnd_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_node_group_channel_wnd">
		<function signature="symds.fsym_on_u_for_sym_nd_grp_chnnl_wnd_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_nd_grp_chnnl_wnd_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_node_group_channel_wnd',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      18,                                                                                                                                             
                                      
          case when old."node_group_id" is null then '' else '"' || replace(replace(cast(old."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."channel_id" is null then '' else '"' || replace(replace(cast(old."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."start_time" is null then '' else '"' || to_char(old."start_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."end_time" is null then '' else '"' || to_char(old."end_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_nd_grp_chnnl_wnd_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_node_group_channel_wnd">
		<function signature="symds.fsym_on_d_for_sym_nd_grp_chnnl_wnd_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_nd_grp_lnk_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_node_group_link',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      19,                                                                                                                                             
                                      
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."data_event_action" is null then '' else '"' || replace(replace(cast(new."data_event_action" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_config_enabled" is null then '' else '"' || cast(cast(new."sync_config_enabled" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_nd_grp_lnk_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_node_group_link">
		<function signature="symds.fsym_on_i_for_sym_nd_grp_lnk_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_nd_grp_lnk_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."data_event_action" is null then '' else '"' || replace(replace(cast(new."data_event_action" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_config_enabled" is null then '' else '"' || cast(cast(new."sync_config_enabled" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_node_group_link',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      19,                                                                                                                                             
                                      
          case when old."source_node_group_id" is null then '' else '"' || replace(replace(cast(old."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."target_node_group_id" is null then '' else '"' || replace(replace(cast(old."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_nd_grp_lnk_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_node_group_link">
		<function signature="symds.fsym_on_u_for_sym_nd_grp_lnk_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_nd_grp_lnk_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_node_group_link',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      19,                                                                                                                                             
                                      
          case when old."source_node_group_id" is null then '' else '"' || replace(replace(cast(old."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."target_node_group_id" is null then '' else '"' || replace(replace(cast(old."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_nd_grp_lnk_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_node_group_link">
		<function signature="symds.fsym_on_d_for_sym_nd_grp_lnk_str()"/>
</trigger>

<function name="fsym_on_i_for_l_p_srs_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'users',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      20,                                                                                                                                             
                                      
          case when new."user_id" is null then '' else '"' || cast(cast(new."user_id" as numeric) as varchar) || '"' end||','||
          case when new."user_name" is null then '' else '"' || replace(replace(cast(new."user_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."full_name" is null then '' else '"' || replace(replace(cast(new."full_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."tel" is null then '' else '"' || replace(replace(cast(new."tel" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."email" is null then '' else '"' || replace(replace(cast(new."email" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."created_date" is null then '' else '"' || to_char(new."created_date", 'YYYY-MM-DD HH24:MI:SS') || '"' end||','||
          case when new."modify_date" is null then '' else '"' || to_char(new."modify_date", 'YYYY-MM-DD HH24:MI:SS') || '"' end||','||
          case when new."address" is null then '' else '"' || replace(replace(cast(new."address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."password" is null then '' else '"' || replace(replace(cast(new."password" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."status" is null then '' else '"' || cast(cast(new."status" as numeric) as varchar) || '"' end||','||
          case when new."department_id" is null then '' else '"' || cast(cast(new."department_id" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_l_p_srs_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.users">
		<function signature="public.fsym_on_i_for_l_p_srs_str()"/>
</trigger>

<function name="fsym_on_u_for_l_p_srs_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    var_row_data := 
          case when new."user_id" is null then '' else '"' || cast(cast(new."user_id" as numeric) as varchar) || '"' end||','||
          case when new."user_name" is null then '' else '"' || replace(replace(cast(new."user_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."full_name" is null then '' else '"' || replace(replace(cast(new."full_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."tel" is null then '' else '"' || replace(replace(cast(new."tel" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."email" is null then '' else '"' || replace(replace(cast(new."email" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."created_date" is null then '' else '"' || to_char(new."created_date", 'YYYY-MM-DD HH24:MI:SS') || '"' end||','||
          case when new."modify_date" is null then '' else '"' || to_char(new."modify_date", 'YYYY-MM-DD HH24:MI:SS') || '"' end||','||
          case when new."address" is null then '' else '"' || replace(replace(cast(new."address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."password" is null then '' else '"' || replace(replace(cast(new."password" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."status" is null then '' else '"' || cast(cast(new."status" as numeric) as varchar) || '"' end||','||
          case when new."department_id" is null then '' else '"' || cast(cast(new."department_id" as numeric) as varchar) || '"' end; 
                                    var_old_data := 
          case when old."user_id" is null then '' else '"' || cast(cast(old."user_id" as numeric) as varchar) || '"' end||','||
          case when old."user_name" is null then '' else '"' || replace(replace(cast(old."user_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."full_name" is null then '' else '"' || replace(replace(cast(old."full_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."tel" is null then '' else '"' || replace(replace(cast(old."tel" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."email" is null then '' else '"' || replace(replace(cast(old."email" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."created_date" is null then '' else '"' || to_char(old."created_date", 'YYYY-MM-DD HH24:MI:SS') || '"' end||','||
          case when old."modify_date" is null then '' else '"' || to_char(old."modify_date", 'YYYY-MM-DD HH24:MI:SS') || '"' end||','||
          case when old."address" is null then '' else '"' || replace(replace(cast(old."address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."password" is null then '' else '"' || replace(replace(cast(old."password" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."status" is null then '' else '"' || cast(cast(old."status" as numeric) as varchar) || '"' end||','||
          case when old."department_id" is null then '' else '"' || cast(cast(old."department_id" as numeric) as varchar) || '"' end; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'users',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      20,                                                                                                                                             
                                      
          case when old."user_id" is null then '' else '"' || cast(cast(old."user_id" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_l_p_srs_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.users">
		<function signature="public.fsym_on_u_for_l_p_srs_str()"/>
</trigger>

<function name="fsym_on_d_for_l_p_srs_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'users',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      20,                                                                                                                                             
                                      
          case when old."user_id" is null then '' else '"' || cast(cast(old."user_id" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      
          case when old."user_id" is null then '' else '"' || cast(cast(old."user_id" as numeric) as varchar) || '"' end||','||
          case when old."user_name" is null then '' else '"' || replace(replace(cast(old."user_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."full_name" is null then '' else '"' || replace(replace(cast(old."full_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."tel" is null then '' else '"' || replace(replace(cast(old."tel" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."email" is null then '' else '"' || replace(replace(cast(old."email" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."created_date" is null then '' else '"' || to_char(old."created_date", 'YYYY-MM-DD HH24:MI:SS') || '"' end||','||
          case when old."modify_date" is null then '' else '"' || to_char(old."modify_date", 'YYYY-MM-DD HH24:MI:SS') || '"' end||','||
          case when old."address" is null then '' else '"' || replace(replace(cast(old."address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."password" is null then '' else '"' || replace(replace(cast(old."password" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."status" is null then '' else '"' || cast(cast(old."status" as numeric) as varchar) || '"' end||','||
          case when old."department_id" is null then '' else '"' || cast(cast(old."department_id" as numeric) as varchar) || '"' end,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_l_p_srs_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="public.users">
		<function signature="public.fsym_on_d_for_l_p_srs_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_nd_grp_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_node_group',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      21,                                                                                                                                             
                                      
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."description" is null then '' else '"' || replace(replace(cast(new."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_nd_grp_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_node_group">
		<function signature="symds.fsym_on_i_for_sym_nd_grp_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_nd_grp_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."description" is null then '' else '"' || replace(replace(cast(new."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_node_group',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      21,                                                                                                                                             
                                      
          case when old."node_group_id" is null then '' else '"' || replace(replace(cast(old."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_nd_grp_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_node_group">
		<function signature="symds.fsym_on_u_for_sym_nd_grp_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_nd_grp_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_node_group',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      21,                                                                                                                                             
                                      
          case when old."node_group_id" is null then '' else '"' || replace(replace(cast(old."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_nd_grp_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_node_group">
		<function signature="symds.fsym_on_d_for_sym_nd_grp_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_nd_scrty_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_node_security',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      22,                                                                                                                                             
                                      
          case when new."node_id" is null then '' else '"' || replace(replace(cast(new."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."node_password" is null then '' else '"' || replace(replace(cast(new."node_password" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."registration_enabled" is null then '' else '"' || cast(cast(new."registration_enabled" as numeric) as varchar) || '"' end||','||
          case when new."registration_time" is null then '' else '"' || to_char(new."registration_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."initial_load_enabled" is null then '' else '"' || cast(cast(new."initial_load_enabled" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_time" is null then '' else '"' || to_char(new."initial_load_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."initial_load_id" is null then '' else '"' || cast(cast(new."initial_load_id" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_create_by" is null then '' else '"' || replace(replace(cast(new."initial_load_create_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."rev_initial_load_enabled" is null then '' else '"' || cast(cast(new."rev_initial_load_enabled" as numeric) as varchar) || '"' end||','||
          case when new."rev_initial_load_time" is null then '' else '"' || to_char(new."rev_initial_load_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."rev_initial_load_id" is null then '' else '"' || cast(cast(new."rev_initial_load_id" as numeric) as varchar) || '"' end||','||
          case when new."rev_initial_load_create_by" is null then '' else '"' || replace(replace(cast(new."rev_initial_load_create_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."created_at_node_id" is null then '' else '"' || replace(replace(cast(new."created_at_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_nd_scrty_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_node_security">
		<function signature="symds.fsym_on_i_for_sym_nd_scrty_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_nd_scrty_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."node_id" is null then '' else '"' || replace(replace(cast(new."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."node_password" is null then '' else '"' || replace(replace(cast(new."node_password" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."registration_enabled" is null then '' else '"' || cast(cast(new."registration_enabled" as numeric) as varchar) || '"' end||','||
          case when new."registration_time" is null then '' else '"' || to_char(new."registration_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."initial_load_enabled" is null then '' else '"' || cast(cast(new."initial_load_enabled" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_time" is null then '' else '"' || to_char(new."initial_load_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."initial_load_id" is null then '' else '"' || cast(cast(new."initial_load_id" as numeric) as varchar) || '"' end||','||
          case when new."initial_load_create_by" is null then '' else '"' || replace(replace(cast(new."initial_load_create_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."rev_initial_load_enabled" is null then '' else '"' || cast(cast(new."rev_initial_load_enabled" as numeric) as varchar) || '"' end||','||
          case when new."rev_initial_load_time" is null then '' else '"' || to_char(new."rev_initial_load_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."rev_initial_load_id" is null then '' else '"' || cast(cast(new."rev_initial_load_id" as numeric) as varchar) || '"' end||','||
          case when new."rev_initial_load_create_by" is null then '' else '"' || replace(replace(cast(new."rev_initial_load_create_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."created_at_node_id" is null then '' else '"' || replace(replace(cast(new."created_at_node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_node_security',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      22,                                                                                                                                             
                                      
          case when old."node_id" is null then '' else '"' || replace(replace(cast(old."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_nd_scrty_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_node_security">
		<function signature="symds.fsym_on_u_for_sym_nd_scrty_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_nd_scrty_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_node_security',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      22,                                                                                                                                             
                                      
          case when old."node_id" is null then '' else '"' || replace(replace(cast(old."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_nd_scrty_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_node_security">
		<function signature="symds.fsym_on_d_for_sym_nd_scrty_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_ld_fltr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_load_filter',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      23,                                                                                                                                             
                                      
          case when new."load_filter_id" is null then '' else '"' || replace(replace(cast(new."load_filter_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."load_filter_type" is null then '' else '"' || replace(replace(cast(new."load_filter_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_catalog_name" is null then '' else '"' || replace(replace(cast(new."target_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_schema_name" is null then '' else '"' || replace(replace(cast(new."target_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_table_name" is null then '' else '"' || replace(replace(cast(new."target_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."filter_on_update" is null then '' else '"' || cast(cast(new."filter_on_update" as numeric) as varchar) || '"' end||','||
          case when new."filter_on_insert" is null then '' else '"' || cast(cast(new."filter_on_insert" as numeric) as varchar) || '"' end||','||
          case when new."filter_on_delete" is null then '' else '"' || cast(cast(new."filter_on_delete" as numeric) as varchar) || '"' end||','||
          case when new."before_write_script" is null then '' else '"' || replace(replace(cast(new."before_write_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."after_write_script" is null then '' else '"' || replace(replace(cast(new."after_write_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."batch_complete_script" is null then '' else '"' || replace(replace(cast(new."batch_complete_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."batch_commit_script" is null then '' else '"' || replace(replace(cast(new."batch_commit_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."batch_rollback_script" is null then '' else '"' || replace(replace(cast(new."batch_rollback_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."handle_error_script" is null then '' else '"' || replace(replace(cast(new."handle_error_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."load_filter_order" is null then '' else '"' || cast(cast(new."load_filter_order" as numeric) as varchar) || '"' end||','||
          case when new."fail_on_error" is null then '' else '"' || cast(cast(new."fail_on_error" as numeric) as varchar) || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_ld_fltr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_load_filter">
		<function signature="symds.fsym_on_i_for_sym_ld_fltr_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_ld_fltr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."load_filter_id" is null then '' else '"' || replace(replace(cast(new."load_filter_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."load_filter_type" is null then '' else '"' || replace(replace(cast(new."load_filter_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_catalog_name" is null then '' else '"' || replace(replace(cast(new."target_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_schema_name" is null then '' else '"' || replace(replace(cast(new."target_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_table_name" is null then '' else '"' || replace(replace(cast(new."target_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."filter_on_update" is null then '' else '"' || cast(cast(new."filter_on_update" as numeric) as varchar) || '"' end||','||
          case when new."filter_on_insert" is null then '' else '"' || cast(cast(new."filter_on_insert" as numeric) as varchar) || '"' end||','||
          case when new."filter_on_delete" is null then '' else '"' || cast(cast(new."filter_on_delete" as numeric) as varchar) || '"' end||','||
          case when new."before_write_script" is null then '' else '"' || replace(replace(cast(new."before_write_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."after_write_script" is null then '' else '"' || replace(replace(cast(new."after_write_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."batch_complete_script" is null then '' else '"' || replace(replace(cast(new."batch_complete_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."batch_commit_script" is null then '' else '"' || replace(replace(cast(new."batch_commit_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."batch_rollback_script" is null then '' else '"' || replace(replace(cast(new."batch_rollback_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."handle_error_script" is null then '' else '"' || replace(replace(cast(new."handle_error_script" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."load_filter_order" is null then '' else '"' || cast(cast(new."load_filter_order" as numeric) as varchar) || '"' end||','||
          case when new."fail_on_error" is null then '' else '"' || cast(cast(new."fail_on_error" as numeric) as varchar) || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_load_filter',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      23,                                                                                                                                             
                                      
          case when old."load_filter_id" is null then '' else '"' || replace(replace(cast(old."load_filter_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_ld_fltr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_load_filter">
		<function signature="symds.fsym_on_u_for_sym_ld_fltr_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_ld_fltr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_load_filter',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      23,                                                                                                                                             
                                      
          case when old."load_filter_id" is null then '' else '"' || replace(replace(cast(old."load_filter_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_ld_fltr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_load_filter">
		<function signature="symds.fsym_on_d_for_sym_ld_fltr_str()"/>
</trigger>

<function name="fsym_on_i_for_l_p_plt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'plot',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      24,                                                                                                                                             
                                      
          case when new."plot_uuid" is null then '' else '"' || replace(replace(cast(new."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."commune_code" is null then '' else '"' || cast(cast(new."commune_code" as numeric) as varchar) || '"' end||','||
          case when new."compt_code" is null then '' else '"' || replace(replace(cast(new."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sub_compt_code" is null then '' else '"' || replace(replace(cast(new."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_code" is null then '' else '"' || replace(replace(cast(new."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."parcel_code" is null then '' else '"' || cast(cast(new."parcel_code" as numeric) as varchar) || '"' end||','||
          case when new."map_sheet" is null then '' else '"' || replace(replace(cast(new."map_sheet" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."village" is null then '' else '"' || replace(replace(cast(new."village" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."area" is null then '' else '"' || cast(cast(new."area" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code" is null then '' else '"' || cast(cast(new."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code" is null then '' else '"' || cast(cast(new."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when new."site_cond_code" is null then '' else '"' || cast(cast(new."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_type_code" is null then '' else '"' || cast(cast(new."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_org_code" is null then '' else '"' || cast(cast(new."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."nar_for_org_code" is null then '' else '"' || cast(cast(new."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when new."p_forest_org_code" is null then '' else '"' || cast(cast(new."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."plant_state_code" is null then '' else '"' || cast(cast(new."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when new."tree_spec_code" is null then '' else '"' || replace(replace(cast(new."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."planting_year" is null then '' else '"' || cast(cast(new."planting_year" as numeric) as varchar) || '"' end||','||
          case when new."avg_year_canopy" is null then '' else '"' || cast(cast(new."avg_year_canopy" as numeric) as varchar) || '"' end||','||
          case when new."volume_per_ha" is null then '' else '"' || cast(cast(new."volume_per_ha" as numeric) as varchar) || '"' end||','||
          case when new."volume_per_plot" is null then '' else '"' || cast(cast(new."volume_per_plot" as numeric) as varchar) || '"' end||','||
          case when new."stem_per_ha" is null then '' else '"' || cast(cast(new."stem_per_ha" as numeric) as varchar) || '"' end||','||
          case when new."stem_per_plot" is null then '' else '"' || cast(cast(new."stem_per_plot" as numeric) as varchar) || '"' end||','||
          case when new."actor_id" is null then '' else '"' || cast(cast(new."actor_id" as numeric) as varchar) || '"' end||','||
          case when new."actor_type_code" is null then '' else '"' || cast(cast(new."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_cert_code" is null then '' else '"' || cast(cast(new."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_terune" is null then '' else '"' || cast(cast(new."land_use_terune" as numeric) as varchar) || '"' end||','||
          case when new."conflict_sit_code" is null then '' else '"' || cast(cast(new."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_conflict" is null then '' else '"' || cast(cast(new."actor_id_conflict" as numeric) as varchar) || '"' end||','||
          case when new."prot_contr_code" is null then '' else '"' || cast(cast(new."prot_contr_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_prot" is null then '' else '"' || cast(cast(new."actor_id_prot" as numeric) as varchar) || '"' end||','||
          case when new."old_plot_code" is null then '' else '"' || replace(replace(cast(new."old_plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."pos_status_code" is null then '' else '"' || cast(cast(new."pos_status_code" as numeric) as varchar) || '"' end||','||
          case when new."desc" is null then '' else '"' || replace(replace(cast(new."desc" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."geom" is null then '' else '"' || replace(replace(cast(ST_AsEWKT(new."geom") as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."change_type_id" is null then '' else '"' || cast(cast(new."change_type_id" as numeric) as varchar) || '"' end||','||
          case when new."date_time" is null then '' else '"' || to_char(new."date_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."area_affected" is null then '' else '"' || cast(cast(new."area_affected" as numeric) as varchar) || '"' end||','||
          case when new."volume_affected" is null then '' else '"' || cast(cast(new."volume_affected" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_affected" is null then '' else '"' || cast(cast(new."stems_no_affected" as numeric) as varchar) || '"' end||','||
          case when new."method_plantation" is null then '' else '"' || cast(cast(new."method_plantation" as numeric) as varchar) || '"' end||','||
          case when new."density_wood" is null then '' else '"' || cast(cast(new."density_wood" as numeric) as varchar) || '"' end||','||
          case when new."density_bamboo" is null then '' else '"' || cast(cast(new."density_bamboo" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_thin" is null then '' else '"' || cast(cast(new."stems_no_thin" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_bamboo_thin" is null then '' else '"' || cast(cast(new."stems_no_bamboo_thin" as numeric) as varchar) || '"' end||','||
          case when new."desc_monitor" is null then '' else '"' || replace(replace(cast(new."desc_monitor" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."change_type_id_last" is null then '' else '"' || cast(cast(new."change_type_id_last" as numeric) as varchar) || '"' end||','||
          case when new."ts_created" is null then '' else '"' || to_char(new."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."ts_modified" is null then '' else '"' || to_char(new."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_l_p_plt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.plot">
		<function signature="public.fsym_on_i_for_l_p_plt_str()"/>
</trigger>

<function name="fsym_on_u_for_l_p_plt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    var_row_data := 
          case when new."plot_uuid" is null then '' else '"' || replace(replace(cast(new."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."commune_code" is null then '' else '"' || cast(cast(new."commune_code" as numeric) as varchar) || '"' end||','||
          case when new."compt_code" is null then '' else '"' || replace(replace(cast(new."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sub_compt_code" is null then '' else '"' || replace(replace(cast(new."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_code" is null then '' else '"' || replace(replace(cast(new."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."parcel_code" is null then '' else '"' || cast(cast(new."parcel_code" as numeric) as varchar) || '"' end||','||
          case when new."map_sheet" is null then '' else '"' || replace(replace(cast(new."map_sheet" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."village" is null then '' else '"' || replace(replace(cast(new."village" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."area" is null then '' else '"' || cast(cast(new."area" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code" is null then '' else '"' || cast(cast(new."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code" is null then '' else '"' || cast(cast(new."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when new."site_cond_code" is null then '' else '"' || cast(cast(new."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_type_code" is null then '' else '"' || cast(cast(new."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_org_code" is null then '' else '"' || cast(cast(new."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."nar_for_org_code" is null then '' else '"' || cast(cast(new."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when new."p_forest_org_code" is null then '' else '"' || cast(cast(new."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."plant_state_code" is null then '' else '"' || cast(cast(new."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when new."tree_spec_code" is null then '' else '"' || replace(replace(cast(new."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."planting_year" is null then '' else '"' || cast(cast(new."planting_year" as numeric) as varchar) || '"' end||','||
          case when new."avg_year_canopy" is null then '' else '"' || cast(cast(new."avg_year_canopy" as numeric) as varchar) || '"' end||','||
          case when new."volume_per_ha" is null then '' else '"' || cast(cast(new."volume_per_ha" as numeric) as varchar) || '"' end||','||
          case when new."volume_per_plot" is null then '' else '"' || cast(cast(new."volume_per_plot" as numeric) as varchar) || '"' end||','||
          case when new."stem_per_ha" is null then '' else '"' || cast(cast(new."stem_per_ha" as numeric) as varchar) || '"' end||','||
          case when new."stem_per_plot" is null then '' else '"' || cast(cast(new."stem_per_plot" as numeric) as varchar) || '"' end||','||
          case when new."actor_id" is null then '' else '"' || cast(cast(new."actor_id" as numeric) as varchar) || '"' end||','||
          case when new."actor_type_code" is null then '' else '"' || cast(cast(new."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_cert_code" is null then '' else '"' || cast(cast(new."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_terune" is null then '' else '"' || cast(cast(new."land_use_terune" as numeric) as varchar) || '"' end||','||
          case when new."conflict_sit_code" is null then '' else '"' || cast(cast(new."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_conflict" is null then '' else '"' || cast(cast(new."actor_id_conflict" as numeric) as varchar) || '"' end||','||
          case when new."prot_contr_code" is null then '' else '"' || cast(cast(new."prot_contr_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_prot" is null then '' else '"' || cast(cast(new."actor_id_prot" as numeric) as varchar) || '"' end||','||
          case when new."old_plot_code" is null then '' else '"' || replace(replace(cast(new."old_plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."pos_status_code" is null then '' else '"' || cast(cast(new."pos_status_code" as numeric) as varchar) || '"' end||','||
          case when new."desc" is null then '' else '"' || replace(replace(cast(new."desc" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."geom" is null then '' else '"' || replace(replace(cast(ST_AsEWKT(new."geom") as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."change_type_id" is null then '' else '"' || cast(cast(new."change_type_id" as numeric) as varchar) || '"' end||','||
          case when new."date_time" is null then '' else '"' || to_char(new."date_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."area_affected" is null then '' else '"' || cast(cast(new."area_affected" as numeric) as varchar) || '"' end||','||
          case when new."volume_affected" is null then '' else '"' || cast(cast(new."volume_affected" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_affected" is null then '' else '"' || cast(cast(new."stems_no_affected" as numeric) as varchar) || '"' end||','||
          case when new."method_plantation" is null then '' else '"' || cast(cast(new."method_plantation" as numeric) as varchar) || '"' end||','||
          case when new."density_wood" is null then '' else '"' || cast(cast(new."density_wood" as numeric) as varchar) || '"' end||','||
          case when new."density_bamboo" is null then '' else '"' || cast(cast(new."density_bamboo" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_thin" is null then '' else '"' || cast(cast(new."stems_no_thin" as numeric) as varchar) || '"' end||','||
          case when new."stems_no_bamboo_thin" is null then '' else '"' || cast(cast(new."stems_no_bamboo_thin" as numeric) as varchar) || '"' end||','||
          case when new."desc_monitor" is null then '' else '"' || replace(replace(cast(new."desc_monitor" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."change_type_id_last" is null then '' else '"' || cast(cast(new."change_type_id_last" as numeric) as varchar) || '"' end||','||
          case when new."ts_created" is null then '' else '"' || to_char(new."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."ts_modified" is null then '' else '"' || to_char(new."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := 
          case when old."plot_uuid" is null then '' else '"' || replace(replace(cast(old."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."compt_code" is null then '' else '"' || replace(replace(cast(old."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."sub_compt_code" is null then '' else '"' || replace(replace(cast(old."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_code" is null then '' else '"' || replace(replace(cast(old."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."parcel_code" is null then '' else '"' || cast(cast(old."parcel_code" as numeric) as varchar) || '"' end||','||
          case when old."map_sheet" is null then '' else '"' || replace(replace(cast(old."map_sheet" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."village" is null then '' else '"' || replace(replace(cast(old."village" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."area" is null then '' else '"' || cast(cast(old."area" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code" is null then '' else '"' || cast(cast(old."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code" is null then '' else '"' || cast(cast(old."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when old."site_cond_code" is null then '' else '"' || cast(cast(old."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_type_code" is null then '' else '"' || cast(cast(old."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_org_code" is null then '' else '"' || cast(cast(old."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."nar_for_org_code" is null then '' else '"' || cast(cast(old."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when old."p_forest_org_code" is null then '' else '"' || cast(cast(old."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."plant_state_code" is null then '' else '"' || cast(cast(old."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when old."tree_spec_code" is null then '' else '"' || replace(replace(cast(old."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."planting_year" is null then '' else '"' || cast(cast(old."planting_year" as numeric) as varchar) || '"' end||','||
          case when old."avg_year_canopy" is null then '' else '"' || cast(cast(old."avg_year_canopy" as numeric) as varchar) || '"' end||','||
          case when old."volume_per_ha" is null then '' else '"' || cast(cast(old."volume_per_ha" as numeric) as varchar) || '"' end||','||
          case when old."volume_per_plot" is null then '' else '"' || cast(cast(old."volume_per_plot" as numeric) as varchar) || '"' end||','||
          case when old."stem_per_ha" is null then '' else '"' || cast(cast(old."stem_per_ha" as numeric) as varchar) || '"' end||','||
          case when old."stem_per_plot" is null then '' else '"' || cast(cast(old."stem_per_plot" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end||','||
          case when old."actor_type_code" is null then '' else '"' || cast(cast(old."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_cert_code" is null then '' else '"' || cast(cast(old."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_terune" is null then '' else '"' || cast(cast(old."land_use_terune" as numeric) as varchar) || '"' end||','||
          case when old."conflict_sit_code" is null then '' else '"' || cast(cast(old."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_conflict" is null then '' else '"' || cast(cast(old."actor_id_conflict" as numeric) as varchar) || '"' end||','||
          case when old."prot_contr_code" is null then '' else '"' || cast(cast(old."prot_contr_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_prot" is null then '' else '"' || cast(cast(old."actor_id_prot" as numeric) as varchar) || '"' end||','||
          case when old."old_plot_code" is null then '' else '"' || replace(replace(cast(old."old_plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."pos_status_code" is null then '' else '"' || cast(cast(old."pos_status_code" as numeric) as varchar) || '"' end||','||
          case when old."desc" is null then '' else '"' || replace(replace(cast(old."desc" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."geom" is null then '' else '"' || replace(replace(cast(ST_AsEWKT(old."geom") as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."change_type_id" is null then '' else '"' || cast(cast(old."change_type_id" as numeric) as varchar) || '"' end||','||
          case when old."date_time" is null then '' else '"' || to_char(old."date_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."area_affected" is null then '' else '"' || cast(cast(old."area_affected" as numeric) as varchar) || '"' end||','||
          case when old."volume_affected" is null then '' else '"' || cast(cast(old."volume_affected" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_affected" is null then '' else '"' || cast(cast(old."stems_no_affected" as numeric) as varchar) || '"' end||','||
          case when old."method_plantation" is null then '' else '"' || cast(cast(old."method_plantation" as numeric) as varchar) || '"' end||','||
          case when old."density_wood" is null then '' else '"' || cast(cast(old."density_wood" as numeric) as varchar) || '"' end||','||
          case when old."density_bamboo" is null then '' else '"' || cast(cast(old."density_bamboo" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_thin" is null then '' else '"' || cast(cast(old."stems_no_thin" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_bamboo_thin" is null then '' else '"' || cast(cast(old."stems_no_bamboo_thin" as numeric) as varchar) || '"' end||','||
          case when old."desc_monitor" is null then '' else '"' || replace(replace(cast(old."desc_monitor" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."change_type_id_last" is null then '' else '"' || cast(cast(old."change_type_id_last" as numeric) as varchar) || '"' end||','||
          case when old."ts_created" is null then '' else '"' || to_char(old."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."ts_modified" is null then '' else '"' || to_char(old."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'plot',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      24,                                                                                                                                             
                                      
          case when old."plot_uuid" is null then '' else '"' || replace(replace(cast(old."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_l_p_plt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.plot">
		<function signature="public.fsym_on_u_for_l_p_plt_str()"/>
</trigger>

<function name="fsym_on_d_for_l_p_plt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'plot',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      24,                                                                                                                                             
                                      
          case when old."plot_uuid" is null then '' else '"' || replace(replace(cast(old."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      
          case when old."plot_uuid" is null then '' else '"' || replace(replace(cast(old."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."compt_code" is null then '' else '"' || replace(replace(cast(old."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."sub_compt_code" is null then '' else '"' || replace(replace(cast(old."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_code" is null then '' else '"' || replace(replace(cast(old."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."parcel_code" is null then '' else '"' || cast(cast(old."parcel_code" as numeric) as varchar) || '"' end||','||
          case when old."map_sheet" is null then '' else '"' || replace(replace(cast(old."map_sheet" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."village" is null then '' else '"' || replace(replace(cast(old."village" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."area" is null then '' else '"' || cast(cast(old."area" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code" is null then '' else '"' || cast(cast(old."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code" is null then '' else '"' || cast(cast(old."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when old."site_cond_code" is null then '' else '"' || cast(cast(old."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_type_code" is null then '' else '"' || cast(cast(old."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_org_code" is null then '' else '"' || cast(cast(old."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."nar_for_org_code" is null then '' else '"' || cast(cast(old."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when old."p_forest_org_code" is null then '' else '"' || cast(cast(old."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."plant_state_code" is null then '' else '"' || cast(cast(old."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when old."tree_spec_code" is null then '' else '"' || replace(replace(cast(old."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."planting_year" is null then '' else '"' || cast(cast(old."planting_year" as numeric) as varchar) || '"' end||','||
          case when old."avg_year_canopy" is null then '' else '"' || cast(cast(old."avg_year_canopy" as numeric) as varchar) || '"' end||','||
          case when old."volume_per_ha" is null then '' else '"' || cast(cast(old."volume_per_ha" as numeric) as varchar) || '"' end||','||
          case when old."volume_per_plot" is null then '' else '"' || cast(cast(old."volume_per_plot" as numeric) as varchar) || '"' end||','||
          case when old."stem_per_ha" is null then '' else '"' || cast(cast(old."stem_per_ha" as numeric) as varchar) || '"' end||','||
          case when old."stem_per_plot" is null then '' else '"' || cast(cast(old."stem_per_plot" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end||','||
          case when old."actor_type_code" is null then '' else '"' || cast(cast(old."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_cert_code" is null then '' else '"' || cast(cast(old."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_terune" is null then '' else '"' || cast(cast(old."land_use_terune" as numeric) as varchar) || '"' end||','||
          case when old."conflict_sit_code" is null then '' else '"' || cast(cast(old."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_conflict" is null then '' else '"' || cast(cast(old."actor_id_conflict" as numeric) as varchar) || '"' end||','||
          case when old."prot_contr_code" is null then '' else '"' || cast(cast(old."prot_contr_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_prot" is null then '' else '"' || cast(cast(old."actor_id_prot" as numeric) as varchar) || '"' end||','||
          case when old."old_plot_code" is null then '' else '"' || replace(replace(cast(old."old_plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."pos_status_code" is null then '' else '"' || cast(cast(old."pos_status_code" as numeric) as varchar) || '"' end||','||
          case when old."desc" is null then '' else '"' || replace(replace(cast(old."desc" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."geom" is null then '' else '"' || replace(replace(cast(ST_AsEWKT(old."geom") as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."change_type_id" is null then '' else '"' || cast(cast(old."change_type_id" as numeric) as varchar) || '"' end||','||
          case when old."date_time" is null then '' else '"' || to_char(old."date_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."area_affected" is null then '' else '"' || cast(cast(old."area_affected" as numeric) as varchar) || '"' end||','||
          case when old."volume_affected" is null then '' else '"' || cast(cast(old."volume_affected" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_affected" is null then '' else '"' || cast(cast(old."stems_no_affected" as numeric) as varchar) || '"' end||','||
          case when old."method_plantation" is null then '' else '"' || cast(cast(old."method_plantation" as numeric) as varchar) || '"' end||','||
          case when old."density_wood" is null then '' else '"' || cast(cast(old."density_wood" as numeric) as varchar) || '"' end||','||
          case when old."density_bamboo" is null then '' else '"' || cast(cast(old."density_bamboo" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_thin" is null then '' else '"' || cast(cast(old."stems_no_thin" as numeric) as varchar) || '"' end||','||
          case when old."stems_no_bamboo_thin" is null then '' else '"' || cast(cast(old."stems_no_bamboo_thin" as numeric) as varchar) || '"' end||','||
          case when old."desc_monitor" is null then '' else '"' || replace(replace(cast(old."desc_monitor" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."change_type_id_last" is null then '' else '"' || cast(cast(old."change_type_id_last" as numeric) as varchar) || '"' end||','||
          case when old."ts_created" is null then '' else '"' || to_char(old."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."ts_modified" is null then '' else '"' || to_char(old."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_l_p_plt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="public.plot">
		<function signature="public.fsym_on_d_for_l_p_plt_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_xtnsn_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_extension',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      25,                                                                                                                                             
                                      
          case when new."extension_id" is null then '' else '"' || replace(replace(cast(new."extension_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."extension_type" is null then '' else '"' || replace(replace(cast(new."extension_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."interface_name" is null then '' else '"' || replace(replace(cast(new."interface_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end||','||
          case when new."extension_order" is null then '' else '"' || cast(cast(new."extension_order" as numeric) as varchar) || '"' end||','||
          case when new."extension_text" is null then '' else '"' || replace(replace(cast(new."extension_text" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_xtnsn_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_extension">
		<function signature="symds.fsym_on_i_for_sym_xtnsn_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_xtnsn_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."extension_id" is null then '' else '"' || replace(replace(cast(new."extension_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."extension_type" is null then '' else '"' || replace(replace(cast(new."extension_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."interface_name" is null then '' else '"' || replace(replace(cast(new."interface_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."node_group_id" is null then '' else '"' || replace(replace(cast(new."node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end||','||
          case when new."extension_order" is null then '' else '"' || cast(cast(new."extension_order" as numeric) as varchar) || '"' end||','||
          case when new."extension_text" is null then '' else '"' || replace(replace(cast(new."extension_text" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_extension',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      25,                                                                                                                                             
                                      
          case when old."extension_id" is null then '' else '"' || replace(replace(cast(old."extension_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_xtnsn_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_extension">
		<function signature="symds.fsym_on_u_for_sym_xtnsn_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_xtnsn_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_extension',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      25,                                                                                                                                             
                                      
          case when old."extension_id" is null then '' else '"' || replace(replace(cast(old."extension_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_xtnsn_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_extension">
		<function signature="symds.fsym_on_d_for_sym_xtnsn_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_cnflct_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_conflict',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      26,                                                                                                                                             
                                      
          case when new."conflict_id" is null then '' else '"' || replace(replace(cast(new."conflict_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_channel_id" is null then '' else '"' || replace(replace(cast(new."target_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_catalog_name" is null then '' else '"' || replace(replace(cast(new."target_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_schema_name" is null then '' else '"' || replace(replace(cast(new."target_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_table_name" is null then '' else '"' || replace(replace(cast(new."target_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."detect_type" is null then '' else '"' || replace(replace(cast(new."detect_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."detect_expression" is null then '' else '"' || replace(replace(cast(new."detect_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."resolve_type" is null then '' else '"' || replace(replace(cast(new."resolve_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."ping_back" is null then '' else '"' || replace(replace(cast(new."ping_back" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."resolve_changes_only" is null then '' else '"' || cast(cast(new."resolve_changes_only" as numeric) as varchar) || '"' end||','||
          case when new."resolve_row_only" is null then '' else '"' || cast(cast(new."resolve_row_only" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_cnflct_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_conflict">
		<function signature="symds.fsym_on_i_for_sym_cnflct_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_cnflct_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."conflict_id" is null then '' else '"' || replace(replace(cast(new."conflict_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_node_group_id" is null then '' else '"' || replace(replace(cast(new."source_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_node_group_id" is null then '' else '"' || replace(replace(cast(new."target_node_group_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_channel_id" is null then '' else '"' || replace(replace(cast(new."target_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_catalog_name" is null then '' else '"' || replace(replace(cast(new."target_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_schema_name" is null then '' else '"' || replace(replace(cast(new."target_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."target_table_name" is null then '' else '"' || replace(replace(cast(new."target_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."detect_type" is null then '' else '"' || replace(replace(cast(new."detect_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."detect_expression" is null then '' else '"' || replace(replace(cast(new."detect_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."resolve_type" is null then '' else '"' || replace(replace(cast(new."resolve_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."ping_back" is null then '' else '"' || replace(replace(cast(new."ping_back" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."resolve_changes_only" is null then '' else '"' || cast(cast(new."resolve_changes_only" as numeric) as varchar) || '"' end||','||
          case when new."resolve_row_only" is null then '' else '"' || cast(cast(new."resolve_row_only" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_conflict',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      26,                                                                                                                                             
                                      
          case when old."conflict_id" is null then '' else '"' || replace(replace(cast(old."conflict_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_cnflct_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_conflict">
		<function signature="symds.fsym_on_u_for_sym_cnflct_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_cnflct_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_conflict',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      26,                                                                                                                                             
                                      
          case when old."conflict_id" is null then '' else '"' || replace(replace(cast(old."conflict_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_cnflct_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_conflict">
		<function signature="symds.fsym_on_d_for_sym_cnflct_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_trggr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_trigger',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      27,                                                                                                                                             
                                      
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_catalog_name" is null then '' else '"' || replace(replace(cast(new."source_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_schema_name" is null then '' else '"' || replace(replace(cast(new."source_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_table_name" is null then '' else '"' || replace(replace(cast(new."source_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_channel_id" is null then '' else '"' || replace(replace(cast(new."reload_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_update" is null then '' else '"' || cast(cast(new."sync_on_update" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_insert" is null then '' else '"' || cast(cast(new."sync_on_insert" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_delete" is null then '' else '"' || cast(cast(new."sync_on_delete" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_incoming_batch" is null then '' else '"' || cast(cast(new."sync_on_incoming_batch" as numeric) as varchar) || '"' end||','||
          case when new."name_for_update_trigger" is null then '' else '"' || replace(replace(cast(new."name_for_update_trigger" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."name_for_insert_trigger" is null then '' else '"' || replace(replace(cast(new."name_for_insert_trigger" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."name_for_delete_trigger" is null then '' else '"' || replace(replace(cast(new."name_for_delete_trigger" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_update_condition" is null then '' else '"' || replace(replace(cast(new."sync_on_update_condition" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_insert_condition" is null then '' else '"' || replace(replace(cast(new."sync_on_insert_condition" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_delete_condition" is null then '' else '"' || replace(replace(cast(new."sync_on_delete_condition" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."custom_on_update_text" is null then '' else '"' || replace(replace(cast(new."custom_on_update_text" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."custom_on_insert_text" is null then '' else '"' || replace(replace(cast(new."custom_on_insert_text" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."custom_on_delete_text" is null then '' else '"' || replace(replace(cast(new."custom_on_delete_text" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."external_select" is null then '' else '"' || replace(replace(cast(new."external_select" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."tx_id_expression" is null then '' else '"' || replace(replace(cast(new."tx_id_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_expression" is null then '' else '"' || replace(replace(cast(new."channel_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."excluded_column_names" is null then '' else '"' || replace(replace(cast(new."excluded_column_names" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_key_names" is null then '' else '"' || replace(replace(cast(new."sync_key_names" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."use_stream_lobs" is null then '' else '"' || cast(cast(new."use_stream_lobs" as numeric) as varchar) || '"' end||','||
          case when new."use_capture_lobs" is null then '' else '"' || cast(cast(new."use_capture_lobs" as numeric) as varchar) || '"' end||','||
          case when new."use_capture_old_data" is null then '' else '"' || cast(cast(new."use_capture_old_data" as numeric) as varchar) || '"' end||','||
          case when new."use_handle_key_updates" is null then '' else '"' || cast(cast(new."use_handle_key_updates" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_trggr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_trigger">
		<function signature="symds.fsym_on_i_for_sym_trggr_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_trggr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_catalog_name" is null then '' else '"' || replace(replace(cast(new."source_catalog_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_schema_name" is null then '' else '"' || replace(replace(cast(new."source_schema_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."source_table_name" is null then '' else '"' || replace(replace(cast(new."source_table_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."reload_channel_id" is null then '' else '"' || replace(replace(cast(new."reload_channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_update" is null then '' else '"' || cast(cast(new."sync_on_update" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_insert" is null then '' else '"' || cast(cast(new."sync_on_insert" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_delete" is null then '' else '"' || cast(cast(new."sync_on_delete" as numeric) as varchar) || '"' end||','||
          case when new."sync_on_incoming_batch" is null then '' else '"' || cast(cast(new."sync_on_incoming_batch" as numeric) as varchar) || '"' end||','||
          case when new."name_for_update_trigger" is null then '' else '"' || replace(replace(cast(new."name_for_update_trigger" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."name_for_insert_trigger" is null then '' else '"' || replace(replace(cast(new."name_for_insert_trigger" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."name_for_delete_trigger" is null then '' else '"' || replace(replace(cast(new."name_for_delete_trigger" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_update_condition" is null then '' else '"' || replace(replace(cast(new."sync_on_update_condition" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_insert_condition" is null then '' else '"' || replace(replace(cast(new."sync_on_insert_condition" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_on_delete_condition" is null then '' else '"' || replace(replace(cast(new."sync_on_delete_condition" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."custom_on_update_text" is null then '' else '"' || replace(replace(cast(new."custom_on_update_text" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."custom_on_insert_text" is null then '' else '"' || replace(replace(cast(new."custom_on_insert_text" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."custom_on_delete_text" is null then '' else '"' || replace(replace(cast(new."custom_on_delete_text" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."external_select" is null then '' else '"' || replace(replace(cast(new."external_select" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."tx_id_expression" is null then '' else '"' || replace(replace(cast(new."tx_id_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."channel_expression" is null then '' else '"' || replace(replace(cast(new."channel_expression" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."excluded_column_names" is null then '' else '"' || replace(replace(cast(new."excluded_column_names" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sync_key_names" is null then '' else '"' || replace(replace(cast(new."sync_key_names" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."use_stream_lobs" is null then '' else '"' || cast(cast(new."use_stream_lobs" as numeric) as varchar) || '"' end||','||
          case when new."use_capture_lobs" is null then '' else '"' || cast(cast(new."use_capture_lobs" as numeric) as varchar) || '"' end||','||
          case when new."use_capture_old_data" is null then '' else '"' || cast(cast(new."use_capture_old_data" as numeric) as varchar) || '"' end||','||
          case when new."use_handle_key_updates" is null then '' else '"' || cast(cast(new."use_handle_key_updates" as numeric) as varchar) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_trigger',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      27,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_trggr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_trigger">
		<function signature="symds.fsym_on_u_for_sym_trggr_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_trggr_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_trigger',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      27,                                                                                                                                             
                                      
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_trggr_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_trigger">
		<function signature="symds.fsym_on_d_for_sym_trggr_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_chnnl_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_channel',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      28,                                                                                                                                             
                                      
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."processing_order" is null then '' else '"' || cast(cast(new."processing_order" as numeric) as varchar) || '"' end||','||
          case when new."max_batch_size" is null then '' else '"' || cast(cast(new."max_batch_size" as numeric) as varchar) || '"' end||','||
          case when new."max_batch_to_send" is null then '' else '"' || cast(cast(new."max_batch_to_send" as numeric) as varchar) || '"' end||','||
          case when new."max_data_to_route" is null then '' else '"' || cast(cast(new."max_data_to_route" as numeric) as varchar) || '"' end||','||
          case when new."extract_period_millis" is null then '' else '"' || cast(cast(new."extract_period_millis" as numeric) as varchar) || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end||','||
          case when new."use_old_data_to_route" is null then '' else '"' || cast(cast(new."use_old_data_to_route" as numeric) as varchar) || '"' end||','||
          case when new."use_row_data_to_route" is null then '' else '"' || cast(cast(new."use_row_data_to_route" as numeric) as varchar) || '"' end||','||
          case when new."use_pk_data_to_route" is null then '' else '"' || cast(cast(new."use_pk_data_to_route" as numeric) as varchar) || '"' end||','||
          case when new."reload_flag" is null then '' else '"' || cast(cast(new."reload_flag" as numeric) as varchar) || '"' end||','||
          case when new."file_sync_flag" is null then '' else '"' || cast(cast(new."file_sync_flag" as numeric) as varchar) || '"' end||','||
          case when new."contains_big_lob" is null then '' else '"' || cast(cast(new."contains_big_lob" as numeric) as varchar) || '"' end||','||
          case when new."batch_algorithm" is null then '' else '"' || replace(replace(cast(new."batch_algorithm" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."data_loader_type" is null then '' else '"' || replace(replace(cast(new."data_loader_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."description" is null then '' else '"' || replace(replace(cast(new."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_chnnl_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_channel">
		<function signature="symds.fsym_on_i_for_sym_chnnl_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_chnnl_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."channel_id" is null then '' else '"' || replace(replace(cast(new."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."processing_order" is null then '' else '"' || cast(cast(new."processing_order" as numeric) as varchar) || '"' end||','||
          case when new."max_batch_size" is null then '' else '"' || cast(cast(new."max_batch_size" as numeric) as varchar) || '"' end||','||
          case when new."max_batch_to_send" is null then '' else '"' || cast(cast(new."max_batch_to_send" as numeric) as varchar) || '"' end||','||
          case when new."max_data_to_route" is null then '' else '"' || cast(cast(new."max_data_to_route" as numeric) as varchar) || '"' end||','||
          case when new."extract_period_millis" is null then '' else '"' || cast(cast(new."extract_period_millis" as numeric) as varchar) || '"' end||','||
          case when new."enabled" is null then '' else '"' || cast(cast(new."enabled" as numeric) as varchar) || '"' end||','||
          case when new."use_old_data_to_route" is null then '' else '"' || cast(cast(new."use_old_data_to_route" as numeric) as varchar) || '"' end||','||
          case when new."use_row_data_to_route" is null then '' else '"' || cast(cast(new."use_row_data_to_route" as numeric) as varchar) || '"' end||','||
          case when new."use_pk_data_to_route" is null then '' else '"' || cast(cast(new."use_pk_data_to_route" as numeric) as varchar) || '"' end||','||
          case when new."reload_flag" is null then '' else '"' || cast(cast(new."reload_flag" as numeric) as varchar) || '"' end||','||
          case when new."file_sync_flag" is null then '' else '"' || cast(cast(new."file_sync_flag" as numeric) as varchar) || '"' end||','||
          case when new."contains_big_lob" is null then '' else '"' || cast(cast(new."contains_big_lob" as numeric) as varchar) || '"' end||','||
          case when new."batch_algorithm" is null then '' else '"' || replace(replace(cast(new."batch_algorithm" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."data_loader_type" is null then '' else '"' || replace(replace(cast(new."data_loader_type" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."description" is null then '' else '"' || replace(replace(cast(new."description" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_channel',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      28,                                                                                                                                             
                                      
          case when old."channel_id" is null then '' else '"' || replace(replace(cast(old."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_chnnl_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_channel">
		<function signature="symds.fsym_on_u_for_sym_chnnl_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_chnnl_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_channel',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      28,                                                                                                                                             
                                      
          case when old."channel_id" is null then '' else '"' || replace(replace(cast(old."channel_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_chnnl_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_channel">
		<function signature="symds.fsym_on_d_for_sym_chnnl_str()"/>
</trigger>

<function name="fsym_on_i_for_l_p_plt_hstry_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'plot_history',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      29,                                                                                                                                             
                                      
          case when new."plot_history_uuid" is null then '' else '"' || replace(replace(cast(new."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_uuid" is null then '' else '"' || replace(replace(cast(new."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_code" is null then '' else '"' || replace(replace(cast(new."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sub_compt_code" is null then '' else '"' || replace(replace(cast(new."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."compt_code" is null then '' else '"' || replace(replace(cast(new."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."commune_code" is null then '' else '"' || cast(cast(new."commune_code" as numeric) as varchar) || '"' end||','||
          case when new."parcel_code" is null then '' else '"' || cast(cast(new."parcel_code" as numeric) as varchar) || '"' end||','||
          case when new."map_sheet" is null then '' else '"' || replace(replace(cast(new."map_sheet" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."village" is null then '' else '"' || replace(replace(cast(new."village" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."area" is null then '' else '"' || cast(cast(new."area" as numeric) as varchar) || '"' end||','||
          case when new."forest_org_code" is null then '' else '"' || cast(cast(new."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_type_code" is null then '' else '"' || cast(cast(new."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when new."planting_year" is null then '' else '"' || cast(cast(new."planting_year" as numeric) as varchar) || '"' end||','||
          case when new."avg_year_canopy" is null then '' else '"' || cast(cast(new."avg_year_canopy" as numeric) as varchar) || '"' end||','||
          case when new."p_forest_org_code" is null then '' else '"' || cast(cast(new."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."plant_state_code" is null then '' else '"' || cast(cast(new."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when new."volume_per_ha" is null then '' else '"' || cast(cast(new."volume_per_ha" as numeric) as varchar) || '"' end||','||
          case when new."stem_per_ha" is null then '' else '"' || cast(cast(new."stem_per_ha" as numeric) as varchar) || '"' end||','||
          case when new."volume_per_plot" is null then '' else '"' || cast(cast(new."volume_per_plot" as numeric) as varchar) || '"' end||','||
          case when new."stem_per_plot" is null then '' else '"' || cast(cast(new."stem_per_plot" as numeric) as varchar) || '"' end||','||
          case when new."site_cond_code" is null then '' else '"' || cast(cast(new."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code" is null then '' else '"' || cast(cast(new."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code_after" is null then '' else '"' || cast(cast(new."forest_func_sub_code_after" as numeric) as varchar) || '"' end||','||
          case when new."conflict_sit_code" is null then '' else '"' || cast(cast(new."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_cert_code" is null then '' else '"' || cast(cast(new."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_terune" is null then '' else '"' || cast(cast(new."land_use_terune" as numeric) as varchar) || '"' end||','||
          case when new."prot_contr_code" is null then '' else '"' || cast(cast(new."prot_contr_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code" is null then '' else '"' || cast(cast(new."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code_after" is null then '' else '"' || cast(cast(new."forest_use_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when new."nar_for_org_code" is null then '' else '"' || cast(cast(new."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when new."old_plot_code" is null then '' else '"' || replace(replace(cast(new."old_plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."pos_status_code" is null then '' else '"' || cast(cast(new."pos_status_code" as numeric) as varchar) || '"' end||','||
          case when new."geom" is null then '' else '"' || replace(replace(cast(ST_AsEWKT(new."geom") as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."personmodify" is null then '' else '"' || cast(cast(new."personmodify" as numeric) as varchar) || '"' end||','||
          case when new."datemodify" is null then '' else '"' || to_char(new."datemodify", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."dateapproval" is null then '' else '"' || to_char(new."dateapproval", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."actor_type_code" is null then '' else '"' || cast(cast(new."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id" is null then '' else '"' || cast(cast(new."actor_id" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_conflict" is null then '' else '"' || cast(cast(new."actor_id_conflict" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_prot" is null then '' else '"' || cast(cast(new."actor_id_prot" as numeric) as varchar) || '"' end||','||
          case when new."desc" is null then '' else '"' || replace(replace(cast(new."desc" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."tree_spec_code" is null then '' else '"' || replace(replace(cast(new."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."change_type_id" is null then '' else '"' || cast(cast(new."change_type_id" as numeric) as varchar) || '"' end||','||
          case when new."change_type_id_last" is null then '' else '"' || cast(cast(new."change_type_id_last" as numeric) as varchar) || '"' end||','||
          case when new."year_approval" is null then '' else '"' || cast(cast(new."year_approval" as numeric) as varchar) || '"' end||','||
          case when new."last" is null then '' else '"' || cast(cast(new."last" as numeric) as varchar) || '"' end||','||
          case when new."ts_created" is null then '' else '"' || to_char(new."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."ts_modified" is null then '' else '"' || to_char(new."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_l_p_plt_hstry_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="public.plot_history">
		<function signature="public.fsym_on_i_for_l_p_plt_hstry_str()"/>
</trigger>

<function name="fsym_on_u_for_l_p_plt_hstry_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    var_row_data := 
          case when new."plot_history_uuid" is null then '' else '"' || replace(replace(cast(new."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_uuid" is null then '' else '"' || replace(replace(cast(new."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."plot_code" is null then '' else '"' || replace(replace(cast(new."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."sub_compt_code" is null then '' else '"' || replace(replace(cast(new."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."compt_code" is null then '' else '"' || replace(replace(cast(new."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."commune_code" is null then '' else '"' || cast(cast(new."commune_code" as numeric) as varchar) || '"' end||','||
          case when new."parcel_code" is null then '' else '"' || cast(cast(new."parcel_code" as numeric) as varchar) || '"' end||','||
          case when new."map_sheet" is null then '' else '"' || replace(replace(cast(new."map_sheet" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."village" is null then '' else '"' || replace(replace(cast(new."village" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."area" is null then '' else '"' || cast(cast(new."area" as numeric) as varchar) || '"' end||','||
          case when new."forest_org_code" is null then '' else '"' || cast(cast(new."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_type_code" is null then '' else '"' || cast(cast(new."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when new."planting_year" is null then '' else '"' || cast(cast(new."planting_year" as numeric) as varchar) || '"' end||','||
          case when new."avg_year_canopy" is null then '' else '"' || cast(cast(new."avg_year_canopy" as numeric) as varchar) || '"' end||','||
          case when new."p_forest_org_code" is null then '' else '"' || cast(cast(new."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when new."plant_state_code" is null then '' else '"' || cast(cast(new."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when new."volume_per_ha" is null then '' else '"' || cast(cast(new."volume_per_ha" as numeric) as varchar) || '"' end||','||
          case when new."stem_per_ha" is null then '' else '"' || cast(cast(new."stem_per_ha" as numeric) as varchar) || '"' end||','||
          case when new."volume_per_plot" is null then '' else '"' || cast(cast(new."volume_per_plot" as numeric) as varchar) || '"' end||','||
          case when new."stem_per_plot" is null then '' else '"' || cast(cast(new."stem_per_plot" as numeric) as varchar) || '"' end||','||
          case when new."site_cond_code" is null then '' else '"' || cast(cast(new."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code" is null then '' else '"' || cast(cast(new."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_func_sub_code_after" is null then '' else '"' || cast(cast(new."forest_func_sub_code_after" as numeric) as varchar) || '"' end||','||
          case when new."conflict_sit_code" is null then '' else '"' || cast(cast(new."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_cert_code" is null then '' else '"' || cast(cast(new."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when new."land_use_terune" is null then '' else '"' || cast(cast(new."land_use_terune" as numeric) as varchar) || '"' end||','||
          case when new."prot_contr_code" is null then '' else '"' || cast(cast(new."prot_contr_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code" is null then '' else '"' || cast(cast(new."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when new."forest_use_sit_code_after" is null then '' else '"' || cast(cast(new."forest_use_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when new."nar_for_org_code" is null then '' else '"' || cast(cast(new."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when new."old_plot_code" is null then '' else '"' || replace(replace(cast(new."old_plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."pos_status_code" is null then '' else '"' || cast(cast(new."pos_status_code" as numeric) as varchar) || '"' end||','||
          case when new."geom" is null then '' else '"' || replace(replace(cast(ST_AsEWKT(new."geom") as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."personmodify" is null then '' else '"' || cast(cast(new."personmodify" as numeric) as varchar) || '"' end||','||
          case when new."datemodify" is null then '' else '"' || to_char(new."datemodify", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."dateapproval" is null then '' else '"' || to_char(new."dateapproval", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."actor_type_code" is null then '' else '"' || cast(cast(new."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when new."actor_id" is null then '' else '"' || cast(cast(new."actor_id" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_conflict" is null then '' else '"' || cast(cast(new."actor_id_conflict" as numeric) as varchar) || '"' end||','||
          case when new."actor_id_prot" is null then '' else '"' || cast(cast(new."actor_id_prot" as numeric) as varchar) || '"' end||','||
          case when new."desc" is null then '' else '"' || replace(replace(cast(new."desc" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."tree_spec_code" is null then '' else '"' || replace(replace(cast(new."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."change_type_id" is null then '' else '"' || cast(cast(new."change_type_id" as numeric) as varchar) || '"' end||','||
          case when new."change_type_id_last" is null then '' else '"' || cast(cast(new."change_type_id_last" as numeric) as varchar) || '"' end||','||
          case when new."year_approval" is null then '' else '"' || cast(cast(new."year_approval" as numeric) as varchar) || '"' end||','||
          case when new."last" is null then '' else '"' || cast(cast(new."last" as numeric) as varchar) || '"' end||','||
          case when new."ts_created" is null then '' else '"' || to_char(new."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."ts_modified" is null then '' else '"' || to_char(new."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := 
          case when old."plot_history_uuid" is null then '' else '"' || replace(replace(cast(old."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_uuid" is null then '' else '"' || replace(replace(cast(old."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_code" is null then '' else '"' || replace(replace(cast(old."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."sub_compt_code" is null then '' else '"' || replace(replace(cast(old."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."compt_code" is null then '' else '"' || replace(replace(cast(old."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."parcel_code" is null then '' else '"' || cast(cast(old."parcel_code" as numeric) as varchar) || '"' end||','||
          case when old."map_sheet" is null then '' else '"' || replace(replace(cast(old."map_sheet" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."village" is null then '' else '"' || replace(replace(cast(old."village" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."area" is null then '' else '"' || cast(cast(old."area" as numeric) as varchar) || '"' end||','||
          case when old."forest_org_code" is null then '' else '"' || cast(cast(old."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_type_code" is null then '' else '"' || cast(cast(old."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when old."planting_year" is null then '' else '"' || cast(cast(old."planting_year" as numeric) as varchar) || '"' end||','||
          case when old."avg_year_canopy" is null then '' else '"' || cast(cast(old."avg_year_canopy" as numeric) as varchar) || '"' end||','||
          case when old."p_forest_org_code" is null then '' else '"' || cast(cast(old."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."plant_state_code" is null then '' else '"' || cast(cast(old."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when old."volume_per_ha" is null then '' else '"' || cast(cast(old."volume_per_ha" as numeric) as varchar) || '"' end||','||
          case when old."stem_per_ha" is null then '' else '"' || cast(cast(old."stem_per_ha" as numeric) as varchar) || '"' end||','||
          case when old."volume_per_plot" is null then '' else '"' || cast(cast(old."volume_per_plot" as numeric) as varchar) || '"' end||','||
          case when old."stem_per_plot" is null then '' else '"' || cast(cast(old."stem_per_plot" as numeric) as varchar) || '"' end||','||
          case when old."site_cond_code" is null then '' else '"' || cast(cast(old."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code" is null then '' else '"' || cast(cast(old."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code_after" is null then '' else '"' || cast(cast(old."forest_func_sub_code_after" as numeric) as varchar) || '"' end||','||
          case when old."conflict_sit_code" is null then '' else '"' || cast(cast(old."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_cert_code" is null then '' else '"' || cast(cast(old."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_terune" is null then '' else '"' || cast(cast(old."land_use_terune" as numeric) as varchar) || '"' end||','||
          case when old."prot_contr_code" is null then '' else '"' || cast(cast(old."prot_contr_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code" is null then '' else '"' || cast(cast(old."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code_after" is null then '' else '"' || cast(cast(old."forest_use_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when old."nar_for_org_code" is null then '' else '"' || cast(cast(old."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when old."old_plot_code" is null then '' else '"' || replace(replace(cast(old."old_plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."pos_status_code" is null then '' else '"' || cast(cast(old."pos_status_code" as numeric) as varchar) || '"' end||','||
          case when old."geom" is null then '' else '"' || replace(replace(cast(ST_AsEWKT(old."geom") as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."personmodify" is null then '' else '"' || cast(cast(old."personmodify" as numeric) as varchar) || '"' end||','||
          case when old."datemodify" is null then '' else '"' || to_char(old."datemodify", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."dateapproval" is null then '' else '"' || to_char(old."dateapproval", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."actor_type_code" is null then '' else '"' || cast(cast(old."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_conflict" is null then '' else '"' || cast(cast(old."actor_id_conflict" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_prot" is null then '' else '"' || cast(cast(old."actor_id_prot" as numeric) as varchar) || '"' end||','||
          case when old."desc" is null then '' else '"' || replace(replace(cast(old."desc" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."tree_spec_code" is null then '' else '"' || replace(replace(cast(old."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."change_type_id" is null then '' else '"' || cast(cast(old."change_type_id" as numeric) as varchar) || '"' end||','||
          case when old."change_type_id_last" is null then '' else '"' || cast(cast(old."change_type_id_last" as numeric) as varchar) || '"' end||','||
          case when old."year_approval" is null then '' else '"' || cast(cast(old."year_approval" as numeric) as varchar) || '"' end||','||
          case when old."last" is null then '' else '"' || cast(cast(old."last" as numeric) as varchar) || '"' end||','||
          case when old."ts_created" is null then '' else '"' || to_char(old."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."ts_modified" is null then '' else '"' || to_char(old."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'plot_history',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      29,                                                                                                                                             
                                      
          case when old."plot_history_uuid" is null then '' else '"' || replace(replace(cast(old."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_l_p_plt_hstry_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="public.plot_history">
		<function signature="public.fsym_on_u_for_l_p_plt_hstry_str()"/>
</trigger>

<function name="fsym_on_d_for_l_p_plt_hstry_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and "symds".sym_triggers_disabled() = 0 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'plot_history',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      29,                                                                                                                                             
                                      
          case when old."plot_history_uuid" is null then '' else '"' || replace(replace(cast(old."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      
          case when old."plot_history_uuid" is null then '' else '"' || replace(replace(cast(old."plot_history_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_uuid" is null then '' else '"' || replace(replace(cast(old."plot_uuid" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."plot_code" is null then '' else '"' || replace(replace(cast(old."plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."sub_compt_code" is null then '' else '"' || replace(replace(cast(old."sub_compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."compt_code" is null then '' else '"' || replace(replace(cast(old."compt_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."commune_code" is null then '' else '"' || cast(cast(old."commune_code" as numeric) as varchar) || '"' end||','||
          case when old."parcel_code" is null then '' else '"' || cast(cast(old."parcel_code" as numeric) as varchar) || '"' end||','||
          case when old."map_sheet" is null then '' else '"' || replace(replace(cast(old."map_sheet" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."village" is null then '' else '"' || replace(replace(cast(old."village" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."area" is null then '' else '"' || cast(cast(old."area" as numeric) as varchar) || '"' end||','||
          case when old."forest_org_code" is null then '' else '"' || cast(cast(old."forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_type_code" is null then '' else '"' || cast(cast(old."forest_type_code" as numeric) as varchar) || '"' end||','||
          case when old."planting_year" is null then '' else '"' || cast(cast(old."planting_year" as numeric) as varchar) || '"' end||','||
          case when old."avg_year_canopy" is null then '' else '"' || cast(cast(old."avg_year_canopy" as numeric) as varchar) || '"' end||','||
          case when old."p_forest_org_code" is null then '' else '"' || cast(cast(old."p_forest_org_code" as numeric) as varchar) || '"' end||','||
          case when old."plant_state_code" is null then '' else '"' || cast(cast(old."plant_state_code" as numeric) as varchar) || '"' end||','||
          case when old."volume_per_ha" is null then '' else '"' || cast(cast(old."volume_per_ha" as numeric) as varchar) || '"' end||','||
          case when old."stem_per_ha" is null then '' else '"' || cast(cast(old."stem_per_ha" as numeric) as varchar) || '"' end||','||
          case when old."volume_per_plot" is null then '' else '"' || cast(cast(old."volume_per_plot" as numeric) as varchar) || '"' end||','||
          case when old."stem_per_plot" is null then '' else '"' || cast(cast(old."stem_per_plot" as numeric) as varchar) || '"' end||','||
          case when old."site_cond_code" is null then '' else '"' || cast(cast(old."site_cond_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code" is null then '' else '"' || cast(cast(old."forest_func_sub_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_func_sub_code_after" is null then '' else '"' || cast(cast(old."forest_func_sub_code_after" as numeric) as varchar) || '"' end||','||
          case when old."conflict_sit_code" is null then '' else '"' || cast(cast(old."conflict_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_cert_code" is null then '' else '"' || cast(cast(old."land_use_cert_code" as numeric) as varchar) || '"' end||','||
          case when old."land_use_terune" is null then '' else '"' || cast(cast(old."land_use_terune" as numeric) as varchar) || '"' end||','||
          case when old."prot_contr_code" is null then '' else '"' || cast(cast(old."prot_contr_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code" is null then '' else '"' || cast(cast(old."forest_use_sit_code" as numeric) as varchar) || '"' end||','||
          case when old."forest_use_sit_code_after" is null then '' else '"' || cast(cast(old."forest_use_sit_code_after" as numeric) as varchar) || '"' end||','||
          case when old."nar_for_org_code" is null then '' else '"' || cast(cast(old."nar_for_org_code" as numeric) as varchar) || '"' end||','||
          case when old."old_plot_code" is null then '' else '"' || replace(replace(cast(old."old_plot_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."pos_status_code" is null then '' else '"' || cast(cast(old."pos_status_code" as numeric) as varchar) || '"' end||','||
          case when old."geom" is null then '' else '"' || replace(replace(cast(ST_AsEWKT(old."geom") as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."personmodify" is null then '' else '"' || cast(cast(old."personmodify" as numeric) as varchar) || '"' end||','||
          case when old."datemodify" is null then '' else '"' || to_char(old."datemodify", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."dateapproval" is null then '' else '"' || to_char(old."dateapproval", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."actor_type_code" is null then '' else '"' || cast(cast(old."actor_type_code" as numeric) as varchar) || '"' end||','||
          case when old."actor_id" is null then '' else '"' || cast(cast(old."actor_id" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_conflict" is null then '' else '"' || cast(cast(old."actor_id_conflict" as numeric) as varchar) || '"' end||','||
          case when old."actor_id_prot" is null then '' else '"' || cast(cast(old."actor_id_prot" as numeric) as varchar) || '"' end||','||
          case when old."desc" is null then '' else '"' || replace(replace(cast(old."desc" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."tree_spec_code" is null then '' else '"' || replace(replace(cast(old."tree_spec_code" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."change_type_id" is null then '' else '"' || cast(cast(old."change_type_id" as numeric) as varchar) || '"' end||','||
          case when old."change_type_id_last" is null then '' else '"' || cast(cast(old."change_type_id_last" as numeric) as varchar) || '"' end||','||
          case when old."year_approval" is null then '' else '"' || cast(cast(old."year_approval" as numeric) as varchar) || '"' end||','||
          case when old."last" is null then '' else '"' || cast(cast(old."last" as numeric) as varchar) || '"' end||','||
          case when old."ts_created" is null then '' else '"' || to_char(old."ts_created", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when old."ts_modified" is null then '' else '"' || to_char(old."ts_modified", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                   
                                      'frms',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_l_p_plt_hstry_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="public.plot_history">
		<function signature="public.fsym_on_d_for_l_p_plt_hstry_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_trggr_rtr_grplt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_trigger_router_grouplet',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      30,                                                                                                                                             
                                      
          case when new."grouplet_id" is null then '' else '"' || replace(replace(cast(new."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."applies_when" is null then '' else '"' || replace(replace(cast(new."applies_when" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_trggr_rtr_grplt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_trigger_router_grouplet">
		<function signature="symds.fsym_on_i_for_sym_trggr_rtr_grplt_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_trggr_rtr_grplt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."grouplet_id" is null then '' else '"' || replace(replace(cast(new."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."trigger_id" is null then '' else '"' || replace(replace(cast(new."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."router_id" is null then '' else '"' || replace(replace(cast(new."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."applies_when" is null then '' else '"' || replace(replace(cast(new."applies_when" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_update_by" is null then '' else '"' || replace(replace(cast(new."last_update_by" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."last_update_time" is null then '' else '"' || to_char(new."last_update_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_trigger_router_grouplet',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      30,                                                                                                                                             
                                      
          case when old."grouplet_id" is null then '' else '"' || replace(replace(cast(old."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."applies_when" is null then '' else '"' || replace(replace(cast(old."applies_when" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_trggr_rtr_grplt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_trigger_router_grouplet">
		<function signature="symds.fsym_on_u_for_sym_trggr_rtr_grplt_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_trggr_rtr_grplt_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_trigger_router_grouplet',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      30,                                                                                                                                             
                                      
          case when old."grouplet_id" is null then '' else '"' || replace(replace(cast(old."grouplet_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."trigger_id" is null then '' else '"' || replace(replace(cast(old."trigger_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."router_id" is null then '' else '"' || replace(replace(cast(old."router_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."applies_when" is null then '' else '"' || replace(replace(cast(old."applies_when" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'config',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_trggr_rtr_grplt_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_trigger_router_grouplet">
		<function signature="symds.fsym_on_d_for_sym_trggr_rtr_grplt_str()"/>
</trigger>

<function name="fsym_on_i_for_sym_nd_hst_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, row_data, channel_id, transaction_id, source_node_id, external_data, create_time)                                        
                                    values(                                                                                                                                                            
                                      'sym_node_host',                                                                                                                                            
                                      'I',                                                                                                                                                             
                                      31,                                                                                                                                             
                                      
          case when new."node_id" is null then '' else '"' || replace(replace(cast(new."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."host_name" is null then '' else '"' || replace(replace(cast(new."host_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."ip_address" is null then '' else '"' || replace(replace(cast(new."ip_address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."os_user" is null then '' else '"' || replace(replace(cast(new."os_user" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."os_name" is null then '' else '"' || replace(replace(cast(new."os_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."os_arch" is null then '' else '"' || replace(replace(cast(new."os_arch" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."os_version" is null then '' else '"' || replace(replace(cast(new."os_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."available_processors" is null then '' else '"' || cast(cast(new."available_processors" as numeric) as varchar) || '"' end||','||
          case when new."free_memory_bytes" is null then '' else '"' || cast(cast(new."free_memory_bytes" as numeric) as varchar) || '"' end||','||
          case when new."total_memory_bytes" is null then '' else '"' || cast(cast(new."total_memory_bytes" as numeric) as varchar) || '"' end||','||
          case when new."max_memory_bytes" is null then '' else '"' || cast(cast(new."max_memory_bytes" as numeric) as varchar) || '"' end||','||
          case when new."java_version" is null then '' else '"' || replace(replace(cast(new."java_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."java_vendor" is null then '' else '"' || replace(replace(cast(new."java_vendor" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."jdbc_version" is null then '' else '"' || replace(replace(cast(new."jdbc_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."symmetric_version" is null then '' else '"' || replace(replace(cast(new."symmetric_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."timezone_offset" is null then '' else '"' || replace(replace(cast(new."timezone_offset" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."heartbeat_time" is null then '' else '"' || to_char(new."heartbeat_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_restart_time" is null then '' else '"' || to_char(new."last_restart_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end,                                                                                                                                                      
                                      'heartbeat',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_i_for_sym_nd_hst_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="symds.sym_node_host">
		<function signature="symds.fsym_on_i_for_sym_nd_hst_str()"/>
</trigger>

<function name="fsym_on_u_for_sym_nd_hst_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                declare var_row_data text; 
                                declare var_old_data text; 
                                begin
                                  if 1=1 and 1=1 then                                                                                                 
                                    var_row_data := 
          case when new."node_id" is null then '' else '"' || replace(replace(cast(new."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."host_name" is null then '' else '"' || replace(replace(cast(new."host_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."ip_address" is null then '' else '"' || replace(replace(cast(new."ip_address" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."os_user" is null then '' else '"' || replace(replace(cast(new."os_user" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."os_name" is null then '' else '"' || replace(replace(cast(new."os_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."os_arch" is null then '' else '"' || replace(replace(cast(new."os_arch" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."os_version" is null then '' else '"' || replace(replace(cast(new."os_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."available_processors" is null then '' else '"' || cast(cast(new."available_processors" as numeric) as varchar) || '"' end||','||
          case when new."free_memory_bytes" is null then '' else '"' || cast(cast(new."free_memory_bytes" as numeric) as varchar) || '"' end||','||
          case when new."total_memory_bytes" is null then '' else '"' || cast(cast(new."total_memory_bytes" as numeric) as varchar) || '"' end||','||
          case when new."max_memory_bytes" is null then '' else '"' || cast(cast(new."max_memory_bytes" as numeric) as varchar) || '"' end||','||
          case when new."java_version" is null then '' else '"' || replace(replace(cast(new."java_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."java_vendor" is null then '' else '"' || replace(replace(cast(new."java_vendor" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."jdbc_version" is null then '' else '"' || replace(replace(cast(new."jdbc_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."symmetric_version" is null then '' else '"' || replace(replace(cast(new."symmetric_version" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."timezone_offset" is null then '' else '"' || replace(replace(cast(new."timezone_offset" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when new."heartbeat_time" is null then '' else '"' || to_char(new."heartbeat_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."last_restart_time" is null then '' else '"' || to_char(new."last_restart_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end||','||
          case when new."create_time" is null then '' else '"' || to_char(new."create_time", 'YYYY-MM-DD HH24:MI:SS.US') || '"' end; 
                                    var_old_data := null; 
                                    if 1=1 then 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, row_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                     
                                    values(                                                                                                                                                            
                                      'sym_node_host',                                                                                                                                            
                                      'U',                                                                                                                                                             
                                      31,                                                                                                                                             
                                      
          case when old."node_id" is null then '' else '"' || replace(replace(cast(old."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."host_name" is null then '' else '"' || replace(replace(cast(old."host_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      var_row_data,                                                                                                                                                      
                                      var_old_data,                                                                                                                                                   
                                      'heartbeat',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_u_for_sym_nd_hst_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="symds.sym_node_host">
		<function signature="symds.fsym_on_u_for_sym_nd_hst_str()"/>
</trigger>

<function name="fsym_on_d_for_sym_nd_hst_str"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="symds"/>
	<role name="formisuser"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger" length="1"/>
	</return-type>
	<definition><![CDATA[                                                                                                                
                                begin                                                                                                                                                                  
                                  if 1=1 and 1=1 then                                                                                                 
                                    insert into "symds".sym_data                                                                                                                     
                                    (table_name, event_type, trigger_hist_id, pk_data, old_data, channel_id, transaction_id, source_node_id, external_data, create_time)                               
                                    values(                                                                                                                                                            
                                      'sym_node_host',                                                                                                                                            
                                      'D',                                                                                                                                                             
                                      31,                                                                                                                                             
                                      
          case when old."node_id" is null then '' else '"' || replace(replace(cast(old."node_id" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end||','||
          case when old."host_name" is null then '' else '"' || replace(replace(cast(old."host_name" as varchar),$$\$$,$$\\$$),'"',$$\"$$) || '"' end,                                                                                                                                                      
                                      null,                                                                                                                                                   
                                      'heartbeat',                                                                                                                                                
                                      txid_current(),                                                                                                                                               
                                      "symds".sym_node_disabled(),                                                                                                                   
                                      null,                                                                                                                                               
                                      CURRENT_TIMESTAMP                                                                                                                
                                    );                                                                                                                                                                 
                                  end if;                                                                                                                                                              
                                                                                                                                                                               
                                  return null;                                                                                                                                                         
                                end;                                                                                                                                                                   
                                ]]></definition>
</function>

<trigger name="sym_on_d_for_sym_nd_hst_str" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="true" upd-event="false" trunc-event="false"
	 table="symds.sym_node_host">
		<function signature="symds.fsym_on_d_for_sym_nd_hst_str()"/>
</trigger>

<constraint name="sym_fk_cf_2_grp_lnk" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_node_group_link" table="symds.sym_conflict">
	<columns names="source_node_group_id,target_node_group_id" ref-type="src-columns"/>
	<columns names="source_node_group_id,target_node_group_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_ftr_2_ftrg" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_file_trigger" table="symds.sym_file_trigger_router">
	<columns names="trigger_id" ref-type="src-columns"/>
	<columns names="trigger_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_ftr_2_rtr" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_router" table="symds.sym_file_trigger_router">
	<columns names="router_id" ref-type="src-columns"/>
	<columns names="router_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_gpltlnk_2_gplt" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_grouplet" table="symds.sym_grouplet_link">
	<columns names="grouplet_id" ref-type="src-columns"/>
	<columns names="grouplet_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_lnk_2_grp_src" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_node_group" table="symds.sym_node_group_link">
	<columns names="source_node_group_id" ref-type="src-columns"/>
	<columns names="node_group_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_lnk_2_grp_tgt" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_node_group" table="symds.sym_node_group_link">
	<columns names="target_node_group_id" ref-type="src-columns"/>
	<columns names="node_group_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_ident_2_node" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_node" table="symds.sym_node_identity">
	<columns names="node_id" ref-type="src-columns"/>
	<columns names="node_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_sec_2_node" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_node" table="symds.sym_node_security">
	<columns names="node_id" ref-type="src-columns"/>
	<columns names="node_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_rt_2_grp_lnk" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_node_group_link" table="symds.sym_router">
	<columns names="source_node_group_id,target_node_group_id" ref-type="src-columns"/>
	<columns names="source_node_group_id,target_node_group_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_tt_2_grp_lnk" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_node_group_link" table="symds.sym_transform_table">
	<columns names="source_node_group_id,target_node_group_id" ref-type="src-columns"/>
	<columns names="source_node_group_id,target_node_group_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_trg_2_chnl" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_channel" table="symds.sym_trigger">
	<columns names="channel_id" ref-type="src-columns"/>
	<columns names="channel_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_trg_2_rld_chnl" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_channel" table="symds.sym_trigger">
	<columns names="reload_channel_id" ref-type="src-columns"/>
	<columns names="channel_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_tr_2_trg" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_trigger" table="symds.sym_trigger_router">
	<columns names="trigger_id" ref-type="src-columns"/>
	<columns names="trigger_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_tr_2_rtr" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_router" table="symds.sym_trigger_router">
	<columns names="router_id" ref-type="src-columns"/>
	<columns names="router_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_trgplt_2_gplt" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_grouplet" table="symds.sym_trigger_router_grouplet">
	<columns names="grouplet_id" ref-type="src-columns"/>
	<columns names="grouplet_id" ref-type="dst-columns"/>
</constraint>

<constraint name="sym_fk_trgplt_2_tr" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="symds.sym_trigger_router" table="symds.sym_trigger_router_grouplet">
	<columns names="trigger_id,router_id" ref-type="src-columns"/>
	<columns names="trigger_id,router_id" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_sym_conflict_sym_node_group_link" type="relfk"
	 custom-color="#5aa578"
	 src-table="symds.sym_conflict"
	 dst-table="symds.sym_node_group_link"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_file_trigger_router_sym_file_trigger" type="relfk"
	 custom-color="#4b3e56"
	 src-table="symds.sym_file_trigger_router"
	 dst-table="symds.sym_file_trigger"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_file_trigger_router_sym_router" type="relfk"
	 custom-color="#9ac721"
	 src-table="symds.sym_file_trigger_router"
	 dst-table="symds.sym_router"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_grouplet_link_sym_grouplet" type="relfk"
	 custom-color="#249b49"
	 src-table="symds.sym_grouplet_link"
	 dst-table="symds.sym_grouplet"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_node_group_link_sym_node_group" type="relfk"
	 custom-color="#942665"
	 src-table="symds.sym_node_group_link"
	 dst-table="symds.sym_node_group"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_node_identity_sym_node" type="relfk"
	 custom-color="#abb258"
	 src-table="symds.sym_node_identity"
	 dst-table="symds.sym_node"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_node_security_sym_node" type="relfk"
	 custom-color="#94e1e5"
	 src-table="symds.sym_node_security"
	 dst-table="symds.sym_node"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_router_sym_node_group_link" type="relfk"
	 custom-color="#a239f5"
	 src-table="symds.sym_router"
	 dst-table="symds.sym_node_group_link"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_transform_table_sym_node_group_link" type="relfk"
	 custom-color="#4e132e"
	 src-table="symds.sym_transform_table"
	 dst-table="symds.sym_node_group_link"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_trigger_sym_channel" type="relfk"
	 custom-color="#081cb1"
	 src-table="symds.sym_trigger"
	 dst-table="symds.sym_channel"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_trigger_router_sym_trigger" type="relfk"
	 custom-color="#87ec86"
	 src-table="symds.sym_trigger_router"
	 dst-table="symds.sym_trigger"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_trigger_router_sym_router" type="relfk"
	 custom-color="#63e1f3"
	 src-table="symds.sym_trigger_router"
	 dst-table="symds.sym_router"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_trigger_router_grouplet_sym_grouplet" type="relfk"
	 custom-color="#e41bea"
	 src-table="symds.sym_trigger_router_grouplet"
	 dst-table="symds.sym_grouplet"
	 src-required="false" dst-required="false"/>

<relationship name="rel_sym_trigger_router_grouplet_sym_trigger_router" type="relfk"
	 custom-color="#36beed"
	 src-table="symds.sym_trigger_router_grouplet"
	 dst-table="symds.sym_trigger_router"
	 src-required="false" dst-required="false"/>

<permission>
	<object name="public.version" type="table"/>
	<roles names="formisadmin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.version" type="table"/>
	<roles names="formisuser"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.change_log" type="table"/>
	<roles names="formisadmin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.change_log" type="table"/>
	<roles names="formisuser"/>
	<privileges select="true"/>
</permission>
</dbmodel>
